<?xml version="1.0"?>
<doc>
  <assembly>
    <name>igorc</name>
  </assembly>
  <members>
    <member name="T:Igor.AttributeInheritance">
      <summary>
            Igor attribute inheritance types
            </summary>
    </member>
    <member name="F:Igor.AttributeInheritance.None">
      <summary>
            No inheritance
            </summary>
    </member>
    <member name="F:Igor.AttributeInheritance.Scope">
      <summary>
            Scope inheritance. Nested statements inherit attribute value from their scope.
            For example, types and services inherit attribute values set for module they are declared in.
            Scope inherited attributes can also be provided via command line.
            </summary>
    </member>
    <member name="F:Igor.AttributeInheritance.Type">
      <summary>
            Type inheritance. Typed declarations (e.g. record fields) inherit attribute values from type declarations.
            Alias (define) types inherit attribute values from alias target type.
            </summary>
    </member>
    <member name="F:Igor.AttributeInheritance.Inherited">
      <summary>
            Variant inheritance. Records inherit attribute values from their ancestor variants.
            </summary>
    </member>
    <member name="T:Igor.IgorAttributeTargets">
      <summary>
            Igor attribute targets. Defines which statements attribute is valid for.
            </summary>
    </member>
    <member name="T:Igor.AttributeDescriptor">
      <summary>
            Base class for Igor attribute descriptors
            </summary>
    </member>
    <member name="P:Igor.AttributeDescriptor.Name">
      <summary>
            Attribute name
            </summary>
    </member>
    <member name="P:Igor.AttributeDescriptor.Type">
      <summary>
            C# type
            </summary>
    </member>
    <member name="P:Igor.AttributeDescriptor.Inheritance">
      <summary>
            Attribute inheritance type
            </summary>
    </member>
    <member name="P:Igor.AttributeDescriptor.Targets">
      <summary>
            Valid attribute targets
            </summary>
    </member>
    <member name="P:Igor.AttributeDescriptor.DeprecationMessage">
      <summary>
            If attribute is obsolete, contains deprecation message to be displayed to the user, otherwise contains null
            </summary>
    </member>
    <member name="P:Igor.AttributeDescriptor.SupportedValues">
      <summary>
            Supported attribute values description string, to be displayed in errors and warnings
            </summary>
    </member>
    <member name="T:Igor.AttributeDescriptor`1">
      <summary>
            Base template class for Igor attribute descriptors
            </summary>
      <typeparam name="T">Attribute type</typeparam>
    </member>
    <member name="T:Igor.Context">
      <summary>
            Generation context singleton
            </summary>
    </member>
    <member name="M:Igor.Context.Attribute``1(Igor.AttributeDescriptor{``0},``0)">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or default value if value is unset in Igor source or environment)
            </summary>
      <typeparam name="T">Attribute value type argument</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <param name="defaultValue">Default value</param>
      <returns>Attribute value or default</returns>
    </member>
    <member name="P:Igor.Context.Target">
      <summary>
            Current target name
            </summary>
    </member>
    <member name="P:Igor.Context.TargetVersion">
      <summary>
            Target version provided by user (or default target version if not provided by user).
            May be null if target doesn't support versions.
            </summary>
    </member>
    <member name="P:Igor.Context.Attributes">
      <summary>
            List of environment attributes (provided via command line)
            </summary>
    </member>
    <member name="P:Igor.Context.Verbose">
      <summary>
            Enable verbose logging
            </summary>
    </member>
    <member name="P:Igor.Context.Bom">
      <summary>
            Enable Unicode BOM file header
            </summary>
    </member>
    <member name="P:Igor.Context.CompilerOutput">
      <summary>
            Compiler output for logging and problem reporting
            </summary>
    </member>
    <member name="P:Igor.Context.Instance">
      <summary>
            Singleton instance
            </summary>
    </member>
    <member name="T:Igor.CoreAttributes">
      <summary>
            Built-in target-independent attributes
            </summary>
    </member>
    <member name="P:Igor.CoreAttributes.AllAttributes">
      <summary>
            Returns the list of all built-in target-independent attributes
            </summary>
    </member>
    <member name="T:Igor.CustomAttributesAttribute">
      <summary>
            Mark class containing custom attributes with [CustomAttributes] to let Igor be aware of them.
            </summary>
    </member>
    <member name="T:Igor.CodeException">
      <summary>
            Base class for exceptions that are bound to a certain Igor source code location.
            </summary>
      <remarks>
            Exceptions immediately stop compilation process, and so should be avoided in favour of compiler messages, 
            because it's a better user experience to get a list of errors at once rather than get them one by one.
            </remarks>
      <seealso cref="P:Igor.Context.CompilerOutput" />
    </member>
    <member name="M:Igor.CodeException.#ctor(Igor.Location,System.String)">
      <summary>
            Create an exception that is bound to a certain Igor source code location.
            </summary>
      <remarks>
            Exceptions immediately stop compilation process, and so should be avoided in favour of compiler messages, 
            because it's a better user experience to get a list of errors at once rather than get them one by one.
            </remarks>
      <seealso cref="P:Igor.Context.CompilerOutput" />
    </member>
    <member name="T:Igor.ITarget">
      <summary>
            Interface that should be implemented by all Igor targets.
            </summary>
    </member>
    <member name="M:Igor.ITarget.Generate(System.Collections.Generic.IReadOnlyList{Igor.Declarations.Module},System.Collections.Generic.IReadOnlyList{System.Reflection.Assembly})">
      <summary>
            Called to generate target files from the source Igor modules.
            </summary>
      <param name="modules">List of module declarations (only source modules, imported modules are not included)</param>
      <param name="scripts">List of compiled extension scripts assemblies</param>
      <returns>List of generated files</returns>
    </member>
    <member name="P:Igor.ITarget.Name">
      <summary>
            Target name. Used as an argument to -t compiler option, and as an attribute target.
            </summary>
    </member>
    <member name="P:Igor.ITarget.DefaultVersion">
      <summary>
            Default target version, if Version option is not provided by the user.
            Return null if target doesn't support versions.
            </summary>
    </member>
    <member name="P:Igor.ITarget.SupportedAttributes">
      <summary>
            Returns the list of built-in target-specific attributes.
            </summary>
    </member>
    <member name="T:Igor.TargetFile">
      <summary>
            Generated target file
            </summary>
    </member>
    <member name="P:Igor.TargetFile.Name">
      <summary>
            File name, relative to output folder
            </summary>
    </member>
    <member name="P:Igor.TargetFile.Text">
      <summary>
            File content
            </summary>
    </member>
    <member name="P:Igor.TargetFile.Empty">
      <summary>
            Is the file considered to be empty (contains no meaningful declarations)?
            Empty files are not created in the file system.
            Empty files are deleted, if the related option is provided.
            </summary>
    </member>
    <member name="T:Igor.CollectionHelper">
      <summary>
            Utility extension methods for collections
            </summary>
    </member>
    <member name="T:Igor.ReflectionHelper">
      <summary>
            Reflection routines and extension methods
            </summary>
    </member>
    <member name="T:Igor.Version">
      <summary>
            Igor Version
            </summary>
    </member>
    <member name="P:Igor.Version.VersionString">
      <summary>
            Igor version string with revision number
            </summary>
    </member>
    <member name="P:Igor.Version.HeaderVersionString">
      <summary>
            Igor version string without revision number. This version string should be included into generated file header
            instead of the full VersionString, to ensure that generated file content doesn't change between revisions.
            </summary>
    </member>
    <member name="F:Igor.Text.Notation.None">
      <summary>
            No translation, keep identifier as is
            </summary>
    </member>
    <member name="F:Igor.Text.Notation.Lower">
      <summary>
            Lowercase all letters, e.g. 'getobjectid'
            </summary>
    </member>
    <member name="F:Igor.Text.Notation.Upper">
      <summary>
            Uppercase all letters, e.g. 'GETOBJECTID'
            </summary>
    </member>
    <member name="F:Igor.Text.Notation.LowerCamel">
      <summary>
            Camel case notation, starts with the lower case, e.g. 'getObjectId' or 'getObjectID' depending on initialism treatment
            </summary>
    </member>
    <member name="F:Igor.Text.Notation.UpperCamel">
      <summary>
            Camel case notation, starts with the upper case (Pascal notation), e.g. 'GetObjectId' or 'GetObjectID' depending on initialism treatment
            </summary>
    </member>
    <member name="F:Igor.Text.Notation.LowerUnderscore">
      <summary>
            Lowercase all letters, split words with '_', e.g. 'get_object_id'
            </summary>
    </member>
    <member name="F:Igor.Text.Notation.UpperUnderscore">
      <summary>
            Uppercase all letters, split words with '_', e.g. 'GET_OBJECT_ID'
            </summary>
    </member>
    <member name="F:Igor.Text.Notation.LowerHyphen">
      <summary>
            Lowercase all letters, split words with '-', e.g. 'get-object-id'
            </summary>
    </member>
    <member name="F:Igor.Text.Notation.UpperHyphen">
      <summary>
            Uppercase all letters, split words with '-', e.g. 'GET-OBJECT-ID'
            </summary>
    </member>
    <member name="F:Igor.Text.Notation.Title">
      <summary>
            Space separated capitalized words, e.g. 'Get Object Id'
            </summary>
    </member>
    <member name="F:Igor.Text.Notation.LowerInitialism">
      <summary>
            Lowercase first letters of each word, e.g. "goi"
            </summary>
    </member>
    <member name="T:Igor.Text.NotationHelper">
      <summary>
            Static routines and extension methods for Notation name translation.
            </summary>
      <seealso cref="T:Igor.Text.Notation" />
    </member>
    <member name="M:Igor.Text.NotationHelper.IsInitialism(System.String)">
      <summary>
            Is the word a known initialism?
            </summary>
      <param name="word">Word</param>
      <returns>True if the word is an initialism, false otherwise</returns>
    </member>
    <member name="M:Igor.Text.NotationHelper.Format(System.String,Igor.Text.Notation,System.Boolean)">
      <summary>
            Extension method to translate identifier to a given Notation
            </summary>
      <example>
        <code>
            "get_object_id".Format(Notation.LowerCamel, true)
            </code>
            returns "getObjectID"
            </example>
      <param name="str">Source identifier</param>
      <param name="notation">Notation used to translate identifier</param>
      <param name="upperInitialisms">Whether to uppercase initialisms in camel notations</param>
      <returns>Translated identifier</returns>
      <seealso cref="T:Igor.Text.Notation" />
    </member>
    <member name="T:Igor.Text.StringHelper">
      <summary>
            String processing static routines and extension methods
            </summary>
    </member>
    <member name="M:Igor.Text.StringHelper.RemoveDoubleSpaces(System.String)">
      <summary>
            Replace any space sequence with a single space, except the starting indentation sequence
            </summary>
      <param name="str">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Igor.Text.StringHelper.LongestCommonPrefix(System.String,System.String,System.String@,System.String@,System.String@)">
      <summary>
            Finds the longest common prefix of two strings.
            </summary>
      <param name="str1">First string</param>
      <param name="str2">Second string</param>
      <param name="prefix">Returns the common prefix of <paramref name="str1" /> and <paramref name="str2" /></param>
      <param name="tail1">Returns the remaining part of <paramref name="str1" /></param>
      <param name="tail2">Returns the remaining part of <paramref name="str2" /></param>
    </member>
    <member name="M:Igor.Text.StringHelper.LongestCommonPrefix(System.String,System.String,System.Char,System.String@,System.String@,System.String@)">
      <summary>
            Finds the longest common prefix of two strings with respect to the separator character.
            </summary>
      <example>
        <code>
            LongestCommonPrefix("System.Collections.Generic", "System.Collections.Immutable", '.', out var prefix, out var tail1, out var tail2);
            </code>
            would lead to <paramref name="prefix" /> == "System.Collections", <paramref name="tail1" /> == "Generic", <paramref name="tail2" /> == "Immutable"
            </example>
      <param name="str1">First string</param>
      <param name="str2">Second string</param>
      <param name="sep">Separator character</param>
      <param name="prefix">Returns the common prefix of <paramref name="str1" /> and <paramref name="str2" /></param>
      <param name="tail1">Returns the remaining part of <paramref name="str1" /></param>
      <param name="tail2">Returns the remaining part of <paramref name="str2" /></param>
    </member>
    <member name="M:Igor.Text.StringHelper.LongestCommonPrefix(System.String,System.String,System.String,System.String@,System.String@,System.String@)">
      <summary>
            Finds the longest common prefix of two strings with respect to the separator character.
            </summary>
      <example>
        <code>
            LongestCommonPrefix("System.Collections.Generic", "System.Collections.Immutable", '.', out var prefix, out var tail1, out var tail2);
            </code>
            would lead to <paramref name="prefix" /> == "System.Collections", <paramref name="tail1" /> == "Generic", <paramref name="tail2" /> == "Immutable"
            </example>
      <param name="str1">First string</param>
      <param name="str2">Second string</param>
      <param name="sep">Separator string</param>
      <param name="prefix">Returns the common prefix of <paramref name="str1" /> and <paramref name="str2" /></param>
      <param name="tail1">Returns the remaining part of <paramref name="str1" /></param>
      <param name="tail2">Returns the remaining part of <paramref name="str2" /></param>
    </member>
    <member name="M:Igor.Text.StringHelper.Quoted(System.String,System.String,System.String)">
      <summary>
            Put string into quotes
            </summary>
      <param name="value">Source string</param>
      <param name="startQuote">Start quote string</param>
      <param name="endQuote">End quote string (same as start quote if null)</param>
      <returns>Quoted string</returns>
    </member>
    <member name="M:Igor.Text.StringHelper.RemovePrefix(System.String,System.String,System.StringComparison)">
      <summary>
            Remove prefix from string, if present, or the original string otherwise.
            </summary>
      <param name="value">Source string</param>
      <param name="prefix">Prefix to remove</param>
      <param name="comparisonType">Comparison type</param>
      <returns>String without prefix</returns>
    </member>
    <member name="M:Igor.Text.StringHelper.RemoveSuffix(System.String,System.String,System.StringComparison)">
      <summary>
            Remove suffix from string, if present, or the original string otherwise.
            </summary>
      <param name="value">Source string</param>
      <param name="suffix">Suffix to remove</param>
      <param name="comparisonType">Comparison type</param>
      <returns>String without suffix</returns>
    </member>
    <member name="T:Igor.Text.TextHelper">
      <summary>
            Text (string containing new line characters) processing static functions and extension methods.
            </summary>
    </member>
    <member name="M:Igor.Text.TextHelper.Indent(System.String,System.Int32)">
      <summary>
            Indent text with a given number of spaces
            </summary>
      <param name="str">Source text</param>
      <param name="i">Number of spaces</param>
      <returns>Indented text</returns>
    </member>
    <member name="M:Igor.Text.TextHelper.Comment(System.String,System.String)">
      <summary>
            Comment text
            </summary>
      <param name="str">Source text</param>
      <param name="prefix">Comment prefix</param>
      <returns>Commented text</returns>
    </member>
    <member name="M:Igor.Text.TextHelper.FixLineBreaks(System.String)">
      <summary>
            Replace all line breaks with the platform-specific new line characters (e.g. "\r\n")
            </summary>
      <param name="str">Source text</param>
      <returns>Text with valid new line characters</returns>
    </member>
    <member name="M:Igor.Text.TextHelper.Lines(System.String)">
      <summary>
            Split text to lines (without trailing space and newline characters)
            </summary>
      <param name="str">Source text</param>
      <returns>Array of lines</returns>
    </member>
    <member name="M:Igor.Text.TextHelper.JoinStrings``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.String})">
      <summary>
            Join a sequence of values using string formatter function and a separator
            </summary>
      <param name="values">Source values</param>
      <param name="format">Value to string formatter</param>
      <param name="sep">Separator string</param>
      <returns>Combined string</returns>
    </member>
    <member name="M:Igor.Text.TextHelper.JoinStrings``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
      <summary>
            Join a sequence of values using string formatter function 
            </summary>
      <param name="values">Source values</param>
      <param name="format">Value to string formatter</param>
      <returns>Combined string</returns>
    </member>
    <member name="M:Igor.Text.TextHelper.JoinStrings(System.Collections.Generic.IEnumerable{System.String},System.String)">
      <summary>
            Join a sequence of strings using a separator
            </summary>
      <param name="strings">Source strings</param>
      <param name="sep">Separator string</param>
      <returns>Combined string</returns>
    </member>
    <member name="M:Igor.Text.TextHelper.FixEndLine(System.String)">
      <summary>
            Ensures text ends with platform-specific NewLine symbol
            </summary>
      <param name="source">Source text</param>
      <returns>Text ending with NewLine</returns>
    </member>
    <member name="M:Igor.Text.TextHelper.RemoveDoubleEmptyLines(System.String)">
      <summary>
            Remove double empty lines. Ensure that that there are no adjacent empty lines.
            Lines are empty if they contain nothing but whitespaces.
            </summary>
      <param name="source">Source text</param>
      <returns>Text with double empty lines removed</returns>
    </member>
    <member name="M:Igor.Text.TextHelper.RemoveEmptyLines(System.String,System.Predicate{System.String},System.Predicate{System.String})">
      <summary>
            Conditionally remove empty lines.
            Empty lines are removed if the previous line satisfies <paramref name="removeBefore" /> predicate
            or the next line satisfies <paramref name="removeAfter" /> predicate.
            </summary>
      <param name="source">Source text</param>
      <param name="removeAfter">Predicate that prescripts to remove the next line</param>
      <param name="removeBefore">Predicate that prescripts to remove the previous line</param>
      <returns>Text with empty lines removed</returns>
    </member>
    <member name="P:Igor.Declarations.AttributeHost.Attributes">
      <summary>
            The attribute collection. Obsolete and will be removed in future releases.
            Use Attribute or ListAttribute functions instead.
            </summary>
    </member>
    <member name="T:Igor.Declarations.Statement">
      <summary>
            Base type for named AST declaration.
            Statements can host Igor attributes.
            </summary>
    </member>
    <member name="M:Igor.Declarations.Statement.ToString">
      <summary>
            String representation of this AST, for debug purposes
            </summary>
      <returns>String representation of this AST</returns>
    </member>
    <member name="P:Igor.Declarations.Statement.Name">
      <summary>
            Name of the entity defined by this declaration
            </summary>
    </member>
    <member name="T:Igor.Declarations.Module">
      <summary>
            Module AST
            </summary>
    </member>
    <member name="P:Igor.Declarations.Module.Definitions">
      <summary>
            List of top-level definitions (forms)
            </summary>
    </member>
    <member name="T:Igor.Declarations.Form">
      <summary>
            Base AST type for top-level declarations (forms) contained in modules: enums, records, services, etc.
            </summary>
    </member>
    <member name="P:Igor.Declarations.Form.Module">
      <summary>
            AST of module in which this form is declared
            </summary>
    </member>
    <member name="T:Igor.Declarations.TypeForm">
      <summary>
            Base AST type for type declarations
            </summary>
    </member>
    <member name="T:Igor.Declarations.EnumField">
      <summary>
            Enum field declaration AST
            </summary>
    </member>
    <member name="P:Igor.Declarations.EnumField.UserValue">
      <summary>
            Integer value of enum field
            </summary>
    </member>
    <member name="P:Igor.Declarations.EnumField.Enum">
      <summary>
            Enum AST this field belongs to
            </summary>
    </member>
    <member name="T:Igor.Declarations.EnumForm">
      <summary>
            Enum type declaration AST
            </summary>
    </member>
    <member name="P:Igor.Declarations.EnumForm.Fields">
      <summary>
            The list of enum fields
            </summary>
    </member>
    <member name="T:Igor.Declarations.RecordFieldDeclaration">
      <summary>
            Record, variant or interface field declaration AST
            </summary>
    </member>
    <member name="P:Igor.Declarations.RecordFieldDeclaration.TypeReference">
      <summary>
            Type AST of this field
            </summary>
    </member>
    <member name="P:Igor.Declarations.RecordFieldDeclaration.DefaultValueReference">
      <summary>
            Default value of the field
            </summary>
    </member>
    <member name="P:Igor.Declarations.RecordFieldDeclaration.IsTag">
      <summary>
            Is the field a variant tag?
            When deserializing variants, tag field is deserialized first, to define which record it is.
            </summary>
    </member>
    <member name="P:Igor.Declarations.RecordFieldDeclaration.Struct">
      <summary>
            Struct (record, interface or variant) this field belongs to.
            </summary>
    </member>
    <member name="P:Igor.Declarations.RecordField.IsLocal">
      <summary>
            Is the field local (not inherited)?
            </summary>
    </member>
    <member name="T:Igor.Declarations.StructForm">
      <summary>
            Base AST type for struct declarations: records, variants and interfaces
            </summary>
    </member>
    <member name="P:Igor.Declarations.StructForm.AncestorReference">
      <summary>
            Ancestor variant (or null if there's no ancestor)
            </summary>
    </member>
    <member name="P:Igor.Declarations.StructForm.InterfaceReferences">
      <summary>
            List of interfaces this struct implements
            </summary>
    </member>
    <member name="P:Igor.Declarations.StructForm.TagField">
      <summary>
            Variant tag field (or null if there's no tag field)
            </summary>
    </member>
    <member name="P:Igor.Declarations.StructForm.IsException">
      <summary>
            Is this struct an exception?
            </summary>
    </member>
    <member name="T:Igor.Declarations.RecordForm">
      <summary>
            Record declaration AST
            </summary>
    </member>
    <member name="P:Igor.Declarations.RecordForm.TagValueReference">
      <summary>
            Tag field value for this record 
            </summary>
    </member>
    <member name="T:Igor.Declarations.InterfaceForm">
      <summary>
            Interface declaration AST
            </summary>
    </member>
    <member name="T:Igor.Declarations.VariantForm">
      <summary>
            Variant declaration AST
            </summary>
    </member>
    <member name="P:Igor.Declarations.VariantForm.Descendants">
      <summary>
            List of direct descendants (both records and variants)
            </summary>
    </member>
    <member name="P:Igor.Declarations.VariantForm.Records">
      <summary>
            List of all record descendants, both direct and indirect
            </summary>
    </member>
    <member name="T:Igor.Declarations.UnionClause">
      <summary>
            Union clause declaration AST
            </summary>
    </member>
    <member name="T:Igor.Declarations.UnionForm">
      <summary>
            Union type declaration AST
            </summary>
    </member>
    <member name="T:Igor.Declarations.DefineForm">
      <summary>
            Alias (define) type declaration AST
            </summary>
    </member>
    <member name="P:Igor.Declarations.DefineForm.TypeReference">
      <summary>
            Alias target type. This define type is defined as an alias for that type.
            </summary>
    </member>
    <member name="T:Igor.Declarations.FunctionArgument">
      <summary>
            Service function argument AST
            </summary>
    </member>
    <member name="P:Igor.Declarations.FunctionArgument.Name">
      <summary>
            Argument name
            </summary>
    </member>
    <member name="P:Igor.Declarations.FunctionArgument.TypeReference">
      <summary>
            Argument type
            </summary>
    </member>
    <member name="P:Igor.Declarations.FunctionArgument.Function">
      <summary>
            Function AST this argument belongs to
            </summary>
    </member>
    <member name="P:Igor.Declarations.FunctionArgument.Index">
      <summary>
            Zero-based index of this argument
            </summary>
    </member>
    <member name="T:Igor.Declarations.FunctionThrow">
      <summary>
            AST of reference to exception thrown by service functions
            </summary>
    </member>
    <member name="P:Igor.Declarations.FunctionThrow.ExceptionReference">
      <summary>
            Thrown exception AST exception record
            </summary>
    </member>
    <member name="P:Igor.Declarations.FunctionThrow.Id">
      <summary>
            Unique integer ID for serialization
            </summary>
    </member>
    <member name="P:Igor.Declarations.FunctionThrow.Function">
      <summary>
            Function AST
            </summary>
    </member>
    <member name="T:Igor.Declarations.ServiceFunction">
      <summary>
            Service function declaration AST
            </summary>
    </member>
    <member name="P:Igor.Declarations.ServiceFunction.Direction">
      <summary>
            Function direction (c-&gt;s or s-&gt;c)
            </summary>
    </member>
    <member name="P:Igor.Declarations.ServiceFunction.Arguments">
      <summary>
            List of function arguments
            </summary>
    </member>
    <member name="P:Igor.Declarations.ServiceFunction.ReturnArguments">
      <summary>
            List of returned result arguments. Null if function is not an RPC.
            </summary>
    </member>
    <member name="P:Igor.Declarations.ServiceFunction.Throws">
      <summary>
            List of thrown exception references
            </summary>
    </member>
    <member name="P:Igor.Declarations.ServiceFunction.Index">
      <summary>
            Function index in the service
            </summary>
    </member>
    <member name="P:Igor.Declarations.ServiceFunction.Service">
      <summary>
            Service AST this function belongs to
            </summary>
    </member>
    <member name="P:Igor.Declarations.ServiceFunction.IsRpc">
      <summary>
            Is function an RPC?
            </summary>
    </member>
    <member name="T:Igor.Declarations.ServiceForm">
      <summary>
            Service declaration AST
            </summary>
    </member>
    <member name="P:Igor.Declarations.ServiceForm.Functions">
      <summary>
            List of functions
            </summary>
    </member>
    <member name="T:Igor.Declarations.WebServiceForm">
      <summary>
            Web service declaration AST
            </summary>
    </member>
    <member name="T:Igor.Declarations.WebResource">
      <summary>
            Web resource declaration AST
            </summary>
    </member>
    <member name="P:Igor.Declarations.WebResource.WebService">
      <summary>
            Web service AST where this resource is defined
            </summary>
    </member>
    <member name="P:Igor.Declarations.WebResource.Path">
      <summary>
            List of URL path segments
            </summary>
    </member>
    <member name="P:Igor.Declarations.WebResource.Query">
      <summary>
            List of URL query parameters
            </summary>
    </member>
    <member name="P:Igor.Declarations.WebResource.Method">
      <summary>
            HTTP method
            </summary>
    </member>
    <member name="P:Igor.Declarations.WebResource.Responses">
      <summary>
            List of possible responses
            </summary>
    </member>
    <member name="P:Igor.Declarations.WebResource.RequestHeaders">
      <summary>
            List of request headers
            </summary>
    </member>
    <member name="P:Igor.Declarations.WebResource.RequestContent">
      <summary>
            Request content AST, if available. Can be null if request has no body.
            </summary>
    </member>
    <member name="P:Igor.Declarations.WebResource.RequestBodyType">
      <summary>
            Request body type AST. Can be null if request has no body.
            </summary>
    </member>
    <member name="P:Igor.Declarations.GenericTypeVariable.Name">
      <summary>
            Name of generic type variable
            </summary>
    </member>
    <member name="T:Igor.Declarations.BuiltInType">
      <summary>
            Igor built-in type instances
            </summary>
    </member>
    <member name="T:Igor.Declarations.BuiltInType.Bool">
      <summary>
            Built-in Igor bool type instance
            </summary>
    </member>
    <member name="T:Igor.Declarations.BuiltInType.Integer">
      <summary>
            Built-in Igor integer type instance
            </summary>
    </member>
    <member name="T:Igor.Declarations.BuiltInType.Float">
      <summary>
            Built-in Igor float type instance
            </summary>
    </member>
    <member name="T:Igor.Declarations.BuiltInType.String">
      <summary>
            Built-in Igor string type instance
            </summary>
    </member>
    <member name="T:Igor.Declarations.BuiltInType.Binary">
      <summary>
            Built-in Igor binary type instance
            </summary>
    </member>
    <member name="T:Igor.Declarations.BuiltInType.Atom">
      <summary>
            Built-in Igor atom type instance
            </summary>
    </member>
    <member name="T:Igor.Declarations.BuiltInType.Json">
      <summary>
            Built-in Igor json type instance
            </summary>
    </member>
    <member name="T:Igor.Declarations.BuiltInType.List">
      <summary>
            Built-in Igor list type instance
            </summary>
    </member>
    <member name="T:Igor.Declarations.BuiltInType.Dict">
      <summary>
            Built-in Igor dict type instance
            </summary>
    </member>
    <member name="T:Igor.Declarations.BuiltInType.Optional">
      <summary>
            Built-in Igor optional type instance (?T)
            </summary>
    </member>
    <member name="T:Igor.Declarations.BuiltInType.Flags">
      <summary>
            Built-in Igor flags type instance
            </summary>
    </member>
    <member name="T:Igor.Declarations.IScope">
      <summary>
            IScope interface provides name resolution
            </summary>
    </member>
    <member name="T:Igor.Declarations.SymbolTable">
      <summary>
            Name table that can be used to register and search for names
            </summary>
    </member>
    <member name="T:Igor.Compiler.CompilerMessageType">
      <summary>
            Problem type
            </summary>
    </member>
    <member name="F:Igor.Compiler.CompilerMessageType.Error">
      <summary>
            Problem is an error
            </summary>
    </member>
    <member name="F:Igor.Compiler.CompilerMessageType.Warning">
      <summary>
            Problem is a warning
            </summary>
    </member>
    <member name="F:Igor.Compiler.CompilerMessageType.Hint">
      <summary>
            Problem is a hint
            </summary>
    </member>
    <member name="T:Igor.Compiler.CompilerOutput">
      <summary>
            Base class for Igor compiler output log implementations.
            CompilerOutput is responsible for reporting problems and simple text messages.
            </summary>
    </member>
    <member name="M:Igor.Compiler.CompilerOutput.Log(System.String)">
      <summary>
            Log simple text message
            </summary>
      <param name="text">Message text</param>
    </member>
    <member name="M:Igor.Compiler.CompilerOutput.WriteMessage(Igor.Compiler.CompilerMessageType,Igor.Location,System.String,System.String)">
      <summary>
            Implementation of logging compiler messages
            </summary>
      <param name="type">Problem type</param>
      <param name="location">Problem location</param>
      <param name="text">Problem description</param>
      <param name="code">Problem code identifier</param>
    </member>
    <member name="M:Igor.Compiler.CompilerOutput.ReportMessage(Igor.Compiler.CompilerMessageType,Igor.Location,System.String,System.String)">
      <summary>
            Report a problem
            </summary>
      <param name="type">Problem type</param>
      <param name="location">Problem location (use Location.NoLocation if location is unknown or not applicable)</param>
      <param name="text">Problem description</param>
      <param name="code">Problem code identifier</param>
    </member>
    <member name="M:Igor.Compiler.CompilerOutput.ReportMessage(Igor.Compiler.CompilerMessageType,Igor.Location,System.String,Igor.Compiler.ProblemCode)">
      <summary>
            Report a problem
            </summary>
      <param name="type">Problem type</param>
      <param name="location">Location (use CompilerOutput.NoLocation if location is unknown or not applicable)</param>
      <param name="text">Problem description</param>
      <param name="code">Problem code identifier</param>
    </member>
    <member name="M:Igor.Compiler.CompilerOutput.Error(Igor.Location,System.String,Igor.Compiler.ProblemCode)">
      <summary>
            Report error
            </summary>
      <param name="location">Location (use CompilerOutput.NoLocation if location is unknown or not applicable)</param>
      <param name="text">Problem description</param>
      <param name="code">Problem code identifier</param>
    </member>
    <member name="M:Igor.Compiler.CompilerOutput.Warning(Igor.Location,System.String,Igor.Compiler.ProblemCode)">
      <summary>
            Report warning
            </summary>
      <param name="location">Location (use CompilerOutput.NoLocation if location is unknown or not applicable)</param>
      <param name="text">Problem description</param>
      <param name="code">Problem code identifier</param>
    </member>
    <member name="M:Igor.Compiler.CompilerOutput.Hint(Igor.Location,System.String,Igor.Compiler.ProblemCode)">
      <summary>
            Report hint
            </summary>
      <param name="location">Location (use CompilerOutput.NoLocation if location is unknown or not applicable)</param>
      <param name="text">Problem description</param>
      <param name="code">Problem code identifier</param>
    </member>
    <member name="P:Igor.Compiler.CompilerOutput.HasErrors">
      <summary>
            Whether errors have been reported
            </summary>
    </member>
    <member name="T:Igor.Compiler.ConsoleCompilerOutput">
      <summary>
            Compiler output implementation for system console
            </summary>
    </member>
    <member name="T:Igor.Compiler.IScriptCompiler">
      <summary>
            Interface for script compiler implementations
            </summary>
    </member>
    <member name="M:Igor.Compiler.IScriptCompiler.CompileFiles(System.Collections.Generic.IReadOnlyCollection{System.String},Igor.Compiler.CompilerOutput)">
      <summary>
            Compile a script file to an assembly
            </summary>
      <param name="filenames">Script source filenames</param>
      <param name="compilerOutput">CompilerOutput instance for error reporting</param>
      <returns>Compiled assembly</returns>
    </member>
    <member name="M:Igor.Compiler.Workspace.EnvironmentAttribute``1(Igor.AttributeDescriptor{``0},``0)">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or default value if value is unset in Igor source or environment)
            </summary>
      <typeparam name="T">Attribute value type argument</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <param name="defaultValue">Default value</param>
      <returns>Attribute value or default</returns>
    </member>
    <member name="T:Igor.Core.AST.IType">
      <summary>
            AST type marker interface
            </summary>
    </member>
    <member name="T:Igor.Core.AST.IInterface">
      <summary>
            AST interface marker interface
            </summary>
    </member>
    <member name="T:Igor.Core.AST.Statement">
      <summary>
            Base type for named AST declaration.
            Statements can host Igor attributes.
            </summary>
    </member>
    <member name="M:Igor.Core.AST.Statement.ToString">
      <summary>
            String representation of this AST, for debug purposes
            </summary>
      <returns>String representation of this AST</returns>
    </member>
    <member name="M:Igor.Core.AST.Statement.Error(System.String)">
      <summary>
            Report an error related to this statement declaration.
            </summary>
      <param name="message">Error description</param>
    </member>
    <member name="M:Igor.Core.AST.Statement.Warning(System.String)">
      <summary>
            Report a warning related to this statement declaration.
            </summary>
      <param name="message">Warning description</param>
    </member>
    <member name="M:Igor.Core.AST.Statement.Hint(System.String)">
      <summary>
            Report a hint related to this statement declaration.
            </summary>
      <param name="message">Hint description</param>
    </member>
    <member name="M:Igor.Core.AST.Statement.Attribute``1(Igor.AttributeDescriptor{``0},``0)">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or default value if value is unset in Igor source or environment)
            </summary>
      <typeparam name="T">Attribute value type argument</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <param name="defaultValue">Default value</param>
      <returns>Attribute value or default</returns>
    </member>
    <member name="M:Igor.Core.AST.Statement.Attribute``1(Igor.StructAttributeDescriptor{``0})">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or null if value is unset in Igor source or environment).
            This is a function overload for value/struct types: numbers, bools and enums.
            </summary>
      <typeparam name="T">Attribute value type argument (must be value/struct type)</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>Nullable attribute value (null if value is not found)</returns>
    </member>
    <member name="M:Igor.Core.AST.Statement.Attribute``1(Igor.ClassAttributeDescriptor{``0})">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or null if value is unset in Igor source or environment).
            This is a function overload for reference/class types: strings and objects.
            </summary>
      <typeparam name="T">Attribute value type argument (must be reference/class type)</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>Attribute value (null if value is not found)</returns>
    </member>
    <member name="M:Igor.Core.AST.Statement.ListAttribute``1(Igor.AttributeDescriptor{``0})">
      <summary>
            Get a list of all attribute values set for this AST statement or inherited using inheritance type defined by attribute descriptor.
            Empty list is returned if no values are found.
            </summary>
      <typeparam name="T">Attribute value type argument</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>List of found attribute values</returns>
    </member>
    <member name="P:Igor.Core.AST.Statement.NestedHosts">
      <summary>
            List of nested declarations
            </summary>
    </member>
    <member name="P:Igor.Core.AST.Statement.Location">
      <summary>
            Declaration location in Igor source file
            </summary>
    </member>
    <member name="P:Igor.Core.AST.Statement.Attributes">
      <summary>
            The attribute collection. Obsolete and will be removed in future releases.
            Use Attribute or ListAttribute functions instead.
            </summary>
    </member>
    <member name="P:Igor.Core.AST.Statement.Name">
      <summary>
            Name of the entity defined by this declaration
            </summary>
    </member>
    <member name="P:Igor.Core.AST.Statement.Annotation">
      <summary>
            Annotation string (if present in Igor source file) or null (if not present)
            </summary>
    </member>
    <member name="T:Igor.Core.AST.Module">
      <summary>
            Module AST
            </summary>
    </member>
    <member name="P:Igor.Core.AST.Module.Definitions">
      <summary>
            List of top-level definitions (forms)
            </summary>
    </member>
    <member name="P:Igor.Core.AST.Module.Enums">
      <summary>
            List of enum types declared in this module
            </summary>
    </member>
    <member name="P:Igor.Core.AST.Module.Structs">
      <summary>
            List of struct types (records, variants, interfaces) declared in this module
            </summary>
    </member>
    <member name="P:Igor.Core.AST.Module.Records">
      <summary>
            List of records declared in this module
            </summary>
    </member>
    <member name="P:Igor.Core.AST.Module.Types">
      <summary>
            List of all types declared in this module
            </summary>
    </member>
    <member name="P:Igor.Core.AST.Module.Services">
      <summary>
            List of services declared in this module
            </summary>
    </member>
    <member name="P:Igor.Core.AST.Module.WebServices">
      <summary>
            List of web services declared in this module
            </summary>
    </member>
    <member name="P:Igor.Core.AST.Module.Tables">
      <summary>
            List of tables declared in this module
            </summary>
    </member>
    <member name="T:Igor.Core.AST.Form">
      <summary>
            Base AST type for top-level declarations (forms) contained in modules: enums, records, services, etc.
            </summary>
    </member>
    <member name="P:Igor.Core.AST.Form.Module">
      <summary>
            AST of module in which this form is declared
            </summary>
    </member>
    <member name="P:Igor.Core.AST.Form.jsonEnabled">
      <summary>
            Is JSON serialization enabled (the value of json.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.Core.AST.Form.binaryEnabled">
      <summary>
            Is binary serialization enabled (the value of binary.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.Core.AST.Form.xmlEnabled">
      <summary>
            Is XML serialization enabled (the value of xml.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.Core.AST.Form.stringEnabled">
      <summary>
            Is string serialization enabled (the value of string.enabled attribute)
            </summary>
    </member>
    <member name="T:Igor.Core.AST.TypeForm">
      <summary>
            Base AST type for type declarations
            </summary>
    </member>
    <member name="P:Igor.Core.AST.TypeForm.Args">
      <summary>
            List of generic arguments (type variables)
            </summary>
    </member>
    <member name="P:Igor.Core.AST.TypeForm.Arity">
      <summary>
            Generic arity (number of type arguments)
            </summary>
    </member>
    <member name="P:Igor.Core.AST.TypeForm.IsGeneric">
      <summary>
            Is type generic
            </summary>
    </member>
    <member name="T:Igor.Core.AST.GenericArgument">
      <summary>
            Generic argument type variable
            </summary>
    </member>
    <member name="P:Igor.Core.AST.GenericArgument.Location">
      <summary>
            Location in Igor source file
            </summary>
    </member>
    <member name="P:Igor.Core.AST.GenericArgument.Name">
      <summary>
            Name of generic type variable
            </summary>
    </member>
    <member name="T:Igor.Core.AST.EnumField">
      <summary>
            Enum field declaration AST
            </summary>
    </member>
    <member name="P:Igor.Core.AST.EnumField.Value">
      <summary>
            Integer value of enum field
            </summary>
    </member>
    <member name="P:Igor.Core.AST.EnumField.Enum">
      <summary>
            Enum AST this field belongs to
            </summary>
    </member>
    <member name="P:Igor.Core.AST.EnumField.jsonFieldNotation">
      <summary>
            Notation used to translate Igor name to JSON string values (the value of json.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.Core.AST.EnumField.jsonKey">
      <summary>
            JSON serialization value for this enum field, translated using jsonFieldNotation or overriden by json.key attribute
            </summary>
    </member>
    <member name="P:Igor.Core.AST.EnumField.xmlEnumNotation">
      <summary>
            Notation used to translate Igor name to XML string values (the value of xml.enum_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.Core.AST.EnumField.xmlName">
      <summary>
            XML serialization value for this enum field, translated using xmlEnumNotation or overriden by xml.name attribute
            </summary>
    </member>
    <member name="P:Igor.Core.AST.EnumField.stringFieldNotation">
      <summary>
            Notation used to translate Igor name to string values (the value of string.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.Core.AST.EnumField.stringValue">
      <summary>
            String serialization value for this enum field, translated using xmlEnumNotation or overriden by string.value attribute
            </summary>
    </member>
    <member name="T:Igor.Core.AST.EnumForm">
      <summary>
            Enum type declaration AST
            </summary>
    </member>
    <member name="P:Igor.Core.AST.EnumForm.IntType">
      <summary>
            Base integer type. This is the minimum range integer type that includes all field values, or the value of int_type attribute.
            </summary>
    </member>
    <member name="P:Igor.Core.AST.EnumForm.Flags">
      <summary>
            Enum represents bit flags
            </summary>
    </member>
    <member name="P:Igor.Core.AST.EnumForm.jsonNumber">
      <summary>
            Serialize enum values to JSON as integer numbers
            </summary>
    </member>
    <member name="P:Igor.Core.AST.EnumForm.Fields">
      <summary>
            The list of enum fields
            </summary>
    </member>
    <member name="T:Igor.Core.AST.RecordField">
      <summary>
            Record, variant or interface field declaration AST
            </summary>
    </member>
    <member name="P:Igor.Core.AST.RecordField.Type">
      <summary>
            Type AST of this field
            </summary>
    </member>
    <member name="P:Igor.Core.AST.RecordField.DefaultValue">
      <summary>
            Default value of the field
            </summary>
    </member>
    <member name="P:Igor.Core.AST.RecordField.IsTag">
      <summary>
            Is the field a variant tag?
            When deserializing variants, tag field is deserialized first, to define which record it is.
            </summary>
    </member>
    <member name="P:Igor.Core.AST.RecordField.IsInherited">
      <summary>
            Is the field inherited from the ancestor variant?
            </summary>
    </member>
    <member name="P:Igor.Core.AST.RecordField.IsLocal">
      <summary>
            Is the field local (not inherited)?
            </summary>
    </member>
    <member name="P:Igor.Core.AST.RecordField.Struct">
      <summary>
            Struct (record, interface or variant) this field belongs to.
            </summary>
    </member>
    <member name="P:Igor.Core.AST.RecordField.binaryIgnore">
      <summary>
            Should this field be skipped during binary serialization (value of binary.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.Core.AST.RecordField.jsonFieldNotation">
      <summary>
            Notation used to translate Igor name to JSON string values (value of json.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.Core.AST.RecordField.jsonKey">
      <summary>
            JSON serialization object key for this field, translated using jsonFieldNotation or overriden by json.key attribute
            </summary>
    </member>
    <member name="P:Igor.Core.AST.RecordField.jsonIgnore">
      <summary>
            Should this field be skipped during JSON serialization (value of json.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.Core.AST.RecordField.xmlIgnore">
      <summary>
            Should this field be skipped during XML serialization (value of xml.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.Core.AST.RecordField.Default">
      <summary>
            Default value AST (or null if there's no default value)
            </summary>
    </member>
    <member name="P:Igor.Core.AST.RecordField.HasDefault">
      <summary>
            Does the field has default value?
            </summary>
    </member>
    <member name="P:Igor.Core.AST.RecordField.IsOptional">
      <summary>
            Is field optional?
            </summary>
    </member>
    <member name="P:Igor.Core.AST.RecordField.NonOptType">
      <summary>
            Returns non-optional type of this field
            </summary>
    </member>
    <member name="T:Igor.Core.AST.StructForm">
      <summary>
            Base AST type for struct declarations: records, variants and interfaces
            </summary>
    </member>
    <member name="P:Igor.Core.AST.StructForm.Fields">
      <summary>
            List of all fields (both local and inherited)
            </summary>
    </member>
    <member name="P:Igor.Core.AST.StructForm.Ancestor">
      <summary>
            Ancestor variant (or null if there's no ancestor)
            </summary>
    </member>
    <member name="P:Igor.Core.AST.StructForm.Interfaces">
      <summary>
            List of interfaces this struct implements
            </summary>
    </member>
    <member name="P:Igor.Core.AST.StructForm.TagField">
      <summary>
            Variant tag field (or null if there's no tag field)
            </summary>
    </member>
    <member name="P:Igor.Core.AST.StructForm.IsException">
      <summary>
            Is this struct an exception?
            </summary>
    </member>
    <member name="P:Igor.Core.AST.StructForm.jsonSerializedFields">
      <summary>
            List of fields included into JSON serialization
            </summary>
    </member>
    <member name="P:Igor.Core.AST.StructForm.jsonNulls">
      <summary>
            Whether generated JSON serializer should include nulls for optional fields.
            If this property is not set, serializer may prefer the most convenient or efficient implementation.
            </summary>
    </member>
    <member name="P:Igor.Core.AST.StructForm.binarySerializedFields">
      <summary>
            List of fields included into binary serialization
            </summary>
    </member>
    <member name="P:Igor.Core.AST.StructForm.xmlSerializedFields">
      <summary>
            List of fields included into XML serialization
            </summary>
    </member>
    <member name="P:Igor.Core.AST.StructForm.IsPatch">
      <summary>
            Is it a patch record (value of patch_record attribute)?
            </summary>
    </member>
    <member name="T:Igor.Core.AST.RecordForm">
      <summary>
            Record declaration AST
            </summary>
    </member>
    <member name="P:Igor.Core.AST.RecordForm.TagValue">
      <summary>
            Tag field value for this record
            </summary>
    </member>
    <member name="T:Igor.Core.AST.InterfaceForm">
      <summary>
            Interface declaration AST
            </summary>
    </member>
    <member name="T:Igor.Core.AST.VariantForm">
      <summary>
            Variant declaration AST
            </summary>
    </member>
    <member name="P:Igor.Core.AST.VariantForm.Descendants">
      <summary>
            List of direct descendants (both records and variants)
            </summary>
    </member>
    <member name="P:Igor.Core.AST.VariantForm.Records">
      <summary>
            List of all record descendants, both direct and indirect
            </summary>
    </member>
    <member name="T:Igor.Core.AST.UnionClause">
      <summary>
            Union clause declaration AST
            </summary>
    </member>
    <member name="T:Igor.Core.AST.UnionForm">
      <summary>
            Union type declaration AST
            </summary>
    </member>
    <member name="T:Igor.Core.AST.DefineForm">
      <summary>
            Alias (define) type declaration AST
            </summary>
    </member>
    <member name="P:Igor.Core.AST.DefineForm.Type">
      <summary>
            Alias target type. This define type is defined as an alias for that type.
            </summary>
    </member>
    <member name="T:Igor.Core.AST.FunctionArgument">
      <summary>
            Service function argument AST
            </summary>
    </member>
    <member name="P:Igor.Core.AST.FunctionArgument.Name">
      <summary>
            Argument name
            </summary>
    </member>
    <member name="P:Igor.Core.AST.FunctionArgument.Type">
      <summary>
            Argument type
            </summary>
    </member>
    <member name="P:Igor.Core.AST.FunctionArgument.Function">
      <summary>
            Function AST this argument belongs to
            </summary>
    </member>
    <member name="P:Igor.Core.AST.FunctionArgument.Index">
      <summary>
            Zero-based index of this argument
            </summary>
    </member>
    <member name="T:Igor.Core.AST.FunctionThrow">
      <summary>
            AST of reference to exception thrown by service functions
            </summary>
    </member>
    <member name="P:Igor.Core.AST.FunctionThrow.Exception">
      <summary>
            Thrown exception AST exception record
            </summary>
    </member>
    <member name="P:Igor.Core.AST.FunctionThrow.Id">
      <summary>
            Unique integer ID for serialization
            </summary>
    </member>
    <member name="P:Igor.Core.AST.FunctionThrow.Function">
      <summary>
            Function AST
            </summary>
    </member>
    <member name="T:Igor.Core.AST.ServiceFunction">
      <summary>
            Service function declaration AST
            </summary>
    </member>
    <member name="P:Igor.Core.AST.ServiceFunction.Direction">
      <summary>
            Function direction (c-&gt;s or s-&gt;c)
            </summary>
    </member>
    <member name="P:Igor.Core.AST.ServiceFunction.Arguments">
      <summary>
            List of function arguments
            </summary>
    </member>
    <member name="P:Igor.Core.AST.ServiceFunction.ReturnArguments">
      <summary>
            List of returned result arguments. Null if function is not an RPC.
            </summary>
    </member>
    <member name="P:Igor.Core.AST.ServiceFunction.Throws">
      <summary>
            List of thrown exception references
            </summary>
    </member>
    <member name="P:Igor.Core.AST.ServiceFunction.Index">
      <summary>
            Function index in the service
            </summary>
    </member>
    <member name="P:Igor.Core.AST.ServiceFunction.Service">
      <summary>
            Service AST this function belongs to
            </summary>
    </member>
    <member name="P:Igor.Core.AST.ServiceFunction.IsRpc">
      <summary>
            Is function an RPC?
            </summary>
    </member>
    <member name="T:Igor.Core.AST.ServiceForm">
      <summary>
            Service declaration AST
            </summary>
    </member>
    <member name="P:Igor.Core.AST.ServiceForm.Functions">
      <summary>
            List of functions
            </summary>
    </member>
    <member name="T:Igor.Core.AST.WebServiceForm">
      <summary>
            Web service declaration AST
            </summary>
    </member>
    <member name="T:Igor.Core.AST.WebResource">
      <summary>
            Web resource declaration AST
            </summary>
    </member>
    <member name="P:Igor.Core.AST.WebResource.WebService">
      <summary>
            Web service AST where this resource is defined
            </summary>
    </member>
    <member name="P:Igor.Core.AST.WebResource.Path">
      <summary>
            List of URL path segments
            </summary>
    </member>
    <member name="P:Igor.Core.AST.WebResource.Query">
      <summary>
            List of URL query parameters
            </summary>
    </member>
    <member name="P:Igor.Core.AST.WebResource.Method">
      <summary>
            HTTP method
            </summary>
    </member>
    <member name="P:Igor.Core.AST.WebResource.Responses">
      <summary>
            List of possible responses
            </summary>
    </member>
    <member name="P:Igor.Core.AST.WebResource.RequestHeaders">
      <summary>
            List of request headers
            </summary>
    </member>
    <member name="P:Igor.Core.AST.WebResource.RequestContent">
      <summary>
            Request content AST, if available. Can be null if request has no body.
            </summary>
    </member>
    <member name="P:Igor.Core.AST.WebResource.RequestBodyType">
      <summary>
            Request body type AST. Can be null if request has no body.
            </summary>
    </member>
    <member name="P:Igor.Core.AST.WebContent.Type">
      <summary>
            Content Type
            </summary>
    </member>
    <member name="P:Igor.Core.AST.WebContent.Format">
      <summary>
            Data format of the content type
            </summary>
    </member>
    <member name="P:Igor.Core.AST.WebContent.Resource">
      <summary>
            Resource this content belongs to
            </summary>
    </member>
    <member name="P:Igor.Core.AST.WebContent.Var">
      <summary>
            Content variable. May be null, if only type was provided
            </summary>
    </member>
    <member name="P:Igor.Core.AST.WebContent.Annotation">
      <summary>
            Annotation string (if present in Igor source file) or null (if not present)
            </summary>
    </member>
    <member name="P:Igor.Core.AST.WebHeader.Name">
      <summary>
            Header name.
            </summary>
    </member>
    <member name="P:Igor.Core.AST.WebHeader.StaticValue">
      <summary>
            Static header value. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Core.AST.WebHeader.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Core.AST.WebHeader.IsStatic">
      <summary>
            True if header has a static value.
            </summary>
    </member>
    <member name="P:Igor.Core.AST.WebPathSegment.StaticValue">
      <summary>
            Static string segment. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Core.AST.WebPathSegment.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Core.AST.WebPathSegment.IsStatic">
      <summary>
            True if this segment is a static segment.
            </summary>
    </member>
    <member name="P:Igor.Core.AST.WebQueryParameter.StaticValue">
      <summary>
            Static query parameter value. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Core.AST.WebQueryParameter.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Core.AST.WebQueryParameter.IsStatic">
      <summary>
            True if query parameter has a static value.
            </summary>
    </member>
    <member name="P:Igor.Core.AST.WebQueryParameter.Format">
      <summary>
            Data format for query variable
            </summary>
    </member>
    <member name="T:Igor.Core.AST.GenericType">
      <summary>
            Generic type instance AST
            </summary>
    </member>
    <member name="P:Igor.Core.AST.GenericType.Prototype">
      <summary>
            Generic type prototype declaration AST
            </summary>
    </member>
    <member name="P:Igor.Core.AST.GenericType.Args">
      <summary>
            Generic type arguments
            </summary>
    </member>
    <member name="T:Igor.Core.AST.GenericInterface">
      <summary>
            Generic interface instance AST
            </summary>
    </member>
    <member name="P:Igor.Core.AST.GenericInterface.Prototype">
      <summary>
            Generic interface prototype declaration AST
            </summary>
    </member>
    <member name="P:Igor.Core.AST.GenericInterface.Args">
      <summary>
            Generic type arguments
            </summary>
    </member>
    <member name="T:Igor.Core.AST.BuiltInType">
      <summary>
            Igor built-in type instances
            </summary>
    </member>
    <member name="T:Igor.Core.AST.BuiltInType.Bool">
      <summary>
            Built-in Igor bool type instance
            </summary>
    </member>
    <member name="T:Igor.Core.AST.BuiltInType.Integer">
      <summary>
            Built-in Igor integer type instance
            </summary>
    </member>
    <member name="T:Igor.Core.AST.BuiltInType.Float">
      <summary>
            Built-in Igor float type instance
            </summary>
    </member>
    <member name="T:Igor.Core.AST.BuiltInType.String">
      <summary>
            Built-in Igor string type instance
            </summary>
    </member>
    <member name="T:Igor.Core.AST.BuiltInType.Binary">
      <summary>
            Built-in Igor binary type instance
            </summary>
    </member>
    <member name="T:Igor.Core.AST.BuiltInType.Atom">
      <summary>
            Built-in Igor atom type instance
            </summary>
    </member>
    <member name="T:Igor.Core.AST.BuiltInType.Json">
      <summary>
            Built-in Igor json type instance
            </summary>
    </member>
    <member name="T:Igor.Core.AST.BuiltInType.List">
      <summary>
            Built-in Igor list type instance
            </summary>
    </member>
    <member name="T:Igor.Core.AST.BuiltInType.Dict">
      <summary>
            Built-in Igor dict type instance
            </summary>
    </member>
    <member name="T:Igor.Core.AST.BuiltInType.Optional">
      <summary>
            Built-in Igor optional type instance (?T)
            </summary>
    </member>
    <member name="T:Igor.Core.AST.BuiltInType.Flags">
      <summary>
            Built-in Igor flags type instance
            </summary>
    </member>
    <member name="T:Igor.Core.AST.BuiltInType.OneOf">
      <summary>
            Built-in Igor oneof type instance
            </summary>
    </member>
    <member name="T:Igor.Core.AST.AstMapper">
      <summary>
            Maps Igor.Declarations namespace classes to AST namespace classes.
            </summary>
    </member>
    <member name="M:Igor.Core.AST.AstMapper.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Igor.Core.AST.AstMapper.Map(System.Collections.Generic.IReadOnlyList{Igor.Declarations.Module})">
      <summary>
            Maps Igor.Declarations namespace classes to AST namespace classes.
            </summary>
      <param name="modules">Module declarations parse tree</param>
      <returns>Modules AST</returns>
    </member>
    <member name="T:Microsoft.CodeDom.Providers.DotNetCompilerPlatform.CSharpCodeProvider">
      <summary>
            Provides access to instances of the .NET Compiler Platform C# code generator and code compiler.
            </summary>
    </member>
    <member name="M:Microsoft.CodeDom.Providers.DotNetCompilerPlatform.CSharpCodeProvider.#ctor">
      <summary>
            Default Constructor
            </summary>
    </member>
    <member name="M:Microsoft.CodeDom.Providers.DotNetCompilerPlatform.CSharpCodeProvider.#ctor(Microsoft.CodeDom.Providers.DotNetCompilerPlatform.ICompilerSettings)">
      <summary>
            Creates an instance using the given ICompilerSettings
            </summary>
      <param name="compilerSettings">
      </param>
    </member>
    <member name="M:Microsoft.CodeDom.Providers.DotNetCompilerPlatform.CSharpCodeProvider.#ctor(Microsoft.CodeDom.Providers.DotNetCompilerPlatform.IProviderOptions)">
      <summary>
            Creates an instance using the given IProviderOptions
            </summary>
      <param name="providerOptions">
      </param>
    </member>
    <member name="M:Microsoft.CodeDom.Providers.DotNetCompilerPlatform.CSharpCodeProvider.CreateCompiler">
      <summary>
            Gets an instance of the .NET Compiler Platform C# code compiler.
            </summary>
      <returns>An instance of the .NET Compiler Platform C# code compiler</returns>
    </member>
    <member name="T:Microsoft.CodeDom.Providers.DotNetCompilerPlatform.IProviderOptions">
      <summary>
            Provides settings for the C# and VB CodeProviders
            </summary>
    </member>
    <member name="P:Microsoft.CodeDom.Providers.DotNetCompilerPlatform.IProviderOptions.CompilerVersion">
      <summary>
            A string representing the in-box .Net Framework compiler version to be used.
            Not applicable to this Roslyn-based package which contains it's own compiler.
            </summary>
    </member>
    <member name="P:Microsoft.CodeDom.Providers.DotNetCompilerPlatform.IProviderOptions.WarnAsError">
      <summary>
            Returns true if the codedom provider has warnAsError set to true
            </summary>
    </member>
    <member name="P:Microsoft.CodeDom.Providers.DotNetCompilerPlatform.IProviderOptions.UseAspNetSettings">
      <summary>
            Returns true if the codedom provider is requesting to use similar default
            compiler options as ASP.Net does with in-box .Net Framework compilers.
            These options are programatically enforced on top of parameters passed
            in to the codedom provider.
            </summary>
    </member>
    <member name="P:Microsoft.CodeDom.Providers.DotNetCompilerPlatform.IProviderOptions.AllOptions">
      <summary>
            Returns the entire set of options - known or not - as configured in &lt;providerOptions&gt;
            </summary>
    </member>
    <member name="T:Microsoft.CodeDom.Providers.DotNetCompilerPlatform.ProviderOptions">
      <summary>
            A set of options for the C# and VB CodeProviders.
            </summary>
    </member>
    <member name="M:Microsoft.CodeDom.Providers.DotNetCompilerPlatform.ProviderOptions.#ctor">
      <summary>
            Create a default set of options for the C# and VB CodeProviders.
            </summary>
    </member>
    <member name="M:Microsoft.CodeDom.Providers.DotNetCompilerPlatform.ProviderOptions.#ctor(Microsoft.CodeDom.Providers.DotNetCompilerPlatform.IProviderOptions)">
      <summary>
            Create a set of options for the C# or VB CodeProviders using the specified inputs.
            </summary>
    </member>
    <member name="M:Microsoft.CodeDom.Providers.DotNetCompilerPlatform.ProviderOptions.#ctor(System.String,System.Int32)">
      <summary>
            Create a set of options for the C# or VB CodeProviders using some specified inputs.
            </summary>
    </member>
    <member name="P:Microsoft.CodeDom.Providers.DotNetCompilerPlatform.ProviderOptions.CompilerFullPath">
      <summary>
            The full path to csc.exe or vbc.exe
            </summary>
    </member>
    <member name="P:Microsoft.CodeDom.Providers.DotNetCompilerPlatform.ProviderOptions.CompilerServerTimeToLive">
      <summary>
            TTL in seconds
            </summary>
    </member>
    <member name="P:Microsoft.CodeDom.Providers.DotNetCompilerPlatform.ProviderOptions.CompilerVersion">
      <summary>
            Used by in-box framework code providers to determine which compat version of the compiler to use.
            </summary>
    </member>
    <member name="P:Microsoft.CodeDom.Providers.DotNetCompilerPlatform.ProviderOptions.WarnAsError">
      <summary>
            Treat all warnings as errors. Will override defaults and command-line options given for a compiler.
            </summary>
    </member>
    <member name="P:Microsoft.CodeDom.Providers.DotNetCompilerPlatform.ProviderOptions.UseAspNetSettings">
      <summary>
            Use the set of compiler options that was traditionally added programatically for ASP.Net.
            </summary>
    </member>
    <member name="P:Microsoft.CodeDom.Providers.DotNetCompilerPlatform.ProviderOptions.AllOptions">
      <summary>
            A collection of all &lt;providerOptions&gt; specified in config for the given CodeDomProvider.
            </summary>
    </member>
    <member name="T:Microsoft.CodeDom.Providers.DotNetCompilerPlatform.ICompilerSettings">
      <summary>
            Provides settings for the C# and VB CodeProviders
            </summary>
    </member>
    <member name="P:Microsoft.CodeDom.Providers.DotNetCompilerPlatform.ICompilerSettings.CompilerFullPath">
      <summary>
            The full path to csc.exe or vbc.exe
            </summary>
    </member>
    <member name="P:Microsoft.CodeDom.Providers.DotNetCompilerPlatform.ICompilerSettings.CompilerServerTimeToLive">
      <summary>
            TTL in seconds
            </summary>
    </member>
    <member name="T:Microsoft.CodeDom.Providers.DotNetCompilerPlatform.VBCodeProvider">
      <summary>
            Provides access to instances of the .NET Compiler Platform VB code generator and code compiler.
            </summary>
    </member>
    <member name="M:Microsoft.CodeDom.Providers.DotNetCompilerPlatform.VBCodeProvider.#ctor">
      <summary>
            Default Constructor
            </summary>
    </member>
    <member name="M:Microsoft.CodeDom.Providers.DotNetCompilerPlatform.VBCodeProvider.#ctor(Microsoft.CodeDom.Providers.DotNetCompilerPlatform.ICompilerSettings)">
      <summary>
            Creates an instance using the given ICompilerSettings
            </summary>
      <param name="compilerSettings">
      </param>
    </member>
    <member name="M:Microsoft.CodeDom.Providers.DotNetCompilerPlatform.VBCodeProvider.#ctor(Microsoft.CodeDom.Providers.DotNetCompilerPlatform.IProviderOptions)">
      <summary>
            Creates an instance using the given ICompilerSettings
            </summary>
      <param name="providerOptions">
      </param>
    </member>
    <member name="M:Microsoft.CodeDom.Providers.DotNetCompilerPlatform.VBCodeProvider.CreateCompiler">
      <summary>
            Gets an instance of the .NET Compiler Platform VB code compiler.
            </summary>
      <returns>An instance of the .NET Compiler Platform VB code compiler</returns>
    </member>
    <member name="T:Igor.Erlang.Target">
      <summary>
            ITarget implementation for Erlang language
            </summary>
    </member>
    <member name="T:Igor.Erlang.AST.Form">
      <summary>
            Base AST type for top-level declarations (forms) contained in modules: enums, records, services, etc.
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.Form.Module">
      <summary>
            AST of module in which this form is declared
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.Form.jsonEnabled">
      <summary>
            Is JSON serialization enabled (the value of json.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.Form.binaryEnabled">
      <summary>
            Is binary serialization enabled (the value of binary.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.Form.xmlEnabled">
      <summary>
            Is XML serialization enabled (the value of xml.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.Form.stringEnabled">
      <summary>
            Is string serialization enabled (the value of string.enabled attribute)
            </summary>
    </member>
    <member name="T:Igor.Erlang.AST.TypeForm">
      <summary>
            Base AST type for type declarations
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.TypeForm.Args">
      <summary>
            List of generic arguments (type variables)
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.TypeForm.Arity">
      <summary>
            Generic arity (number of type arguments)
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.TypeForm.IsGeneric">
      <summary>
            Is type generic
            </summary>
    </member>
    <member name="T:Igor.Erlang.AST.GenericType">
      <summary>
            Generic type instance AST
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.GenericType.Prototype">
      <summary>
            Generic type prototype declaration AST
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.GenericType.Args">
      <summary>
            Generic type arguments
            </summary>
    </member>
    <member name="T:Igor.Erlang.AST.EnumForm">
      <summary>
            Enum type declaration AST
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.EnumForm.IntType">
      <summary>
            Base integer type. This is the minimum range integer type that includes all field values, or the value of int_type attribute.
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.EnumForm.Flags">
      <summary>
            Enum represents bit flags
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.EnumForm.jsonNumber">
      <summary>
            Serialize enum values to JSON as integer numbers
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.EnumForm.Fields">
      <summary>
            The list of enum fields
            </summary>
    </member>
    <member name="T:Igor.Erlang.AST.RecordField">
      <summary>
            Record, variant or interface field declaration AST
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.RecordField.Type">
      <summary>
            Type AST of this field
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.RecordField.DefaultValue">
      <summary>
            Default value of the field
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.RecordField.IsTag">
      <summary>
            Is the field a variant tag?
            When deserializing variants, tag field is deserialized first, to define which record it is.
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.RecordField.IsInherited">
      <summary>
            Is the field inherited from the ancestor variant?
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.RecordField.IsLocal">
      <summary>
            Is the field local (not inherited)?
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.RecordField.Struct">
      <summary>
            Struct (record, interface or variant) this field belongs to.
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.RecordField.binaryIgnore">
      <summary>
            Should this field be skipped during binary serialization (value of binary.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.RecordField.jsonFieldNotation">
      <summary>
            Notation used to translate Igor name to JSON string values (value of json.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.RecordField.jsonKey">
      <summary>
            JSON serialization object key for this field, translated using jsonFieldNotation or overriden by json.key attribute
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.RecordField.jsonIgnore">
      <summary>
            Should this field be skipped during JSON serialization (value of json.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.RecordField.xmlIgnore">
      <summary>
            Should this field be skipped during XML serialization (value of xml.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.RecordField.Default">
      <summary>
            Default value AST (or null if there's no default value)
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.RecordField.HasDefault">
      <summary>
            Does the field has default value?
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.RecordField.IsOptional">
      <summary>
            Is field optional?
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.RecordField.NonOptType">
      <summary>
            Returns non-optional type of this field
            </summary>
    </member>
    <member name="T:Igor.Erlang.AST.StructForm">
      <summary>
            Base AST type for struct declarations: records, variants and interfaces
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.StructForm.Fields">
      <summary>
            List of all fields (both local and inherited)
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.StructForm.Ancestor">
      <summary>
            Ancestor variant (or null if there's no ancestor)
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.StructForm.Interfaces">
      <summary>
            List of interfaces this struct implements
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.StructForm.TagField">
      <summary>
            Variant tag field (or null if there's no tag field)
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.StructForm.IsException">
      <summary>
            Is this struct an exception?
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.StructForm.jsonSerializedFields">
      <summary>
            List of fields included into JSON serialization
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.StructForm.jsonNulls">
      <summary>
            Whether generated JSON serializer should include nulls for optional fields.
            If this property is not set, serializer may prefer the most convenient or efficient implementation.
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.StructForm.binarySerializedFields">
      <summary>
            List of fields included into binary serialization
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.StructForm.xmlSerializedFields">
      <summary>
            List of fields included into XML serialization
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.StructForm.IsPatch">
      <summary>
            Is it a patch record (value of patch_record attribute)?
            </summary>
    </member>
    <member name="T:Igor.Erlang.AST.DefineForm">
      <summary>
            Alias (define) type declaration AST
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.DefineForm.Type">
      <summary>
            Alias target type. This define type is defined as an alias for that type.
            </summary>
    </member>
    <member name="T:Igor.Erlang.AST.UnionForm">
      <summary>
            Union type declaration AST
            </summary>
    </member>
    <member name="T:Igor.Erlang.AST.FunctionArgument">
      <summary>
            Service function argument AST
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.FunctionArgument.Name">
      <summary>
            Argument name
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.FunctionArgument.Type">
      <summary>
            Argument type
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.FunctionArgument.Function">
      <summary>
            Function AST this argument belongs to
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.FunctionArgument.Index">
      <summary>
            Zero-based index of this argument
            </summary>
    </member>
    <member name="T:Igor.Erlang.AST.IType">
      <summary>
            AST type marker interface
            </summary>
    </member>
    <member name="T:Igor.Erlang.AST.IInterface">
      <summary>
            AST interface marker interface
            </summary>
    </member>
    <member name="T:Igor.Erlang.AST.Statement">
      <summary>
            Base type for named AST declaration.
            Statements can host Igor attributes.
            </summary>
    </member>
    <member name="M:Igor.Erlang.AST.Statement.ToString">
      <summary>
            String representation of this AST, for debug purposes
            </summary>
      <returns>String representation of this AST</returns>
    </member>
    <member name="M:Igor.Erlang.AST.Statement.Error(System.String)">
      <summary>
            Report an error related to this statement declaration.
            </summary>
      <param name="message">Error description</param>
    </member>
    <member name="M:Igor.Erlang.AST.Statement.Warning(System.String)">
      <summary>
            Report a warning related to this statement declaration.
            </summary>
      <param name="message">Warning description</param>
    </member>
    <member name="M:Igor.Erlang.AST.Statement.Hint(System.String)">
      <summary>
            Report a hint related to this statement declaration.
            </summary>
      <param name="message">Hint description</param>
    </member>
    <member name="M:Igor.Erlang.AST.Statement.Attribute``1(Igor.AttributeDescriptor{``0},``0)">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or default value if value is unset in Igor source or environment)
            </summary>
      <typeparam name="T">Attribute value type argument</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <param name="defaultValue">Default value</param>
      <returns>Attribute value or default</returns>
    </member>
    <member name="M:Igor.Erlang.AST.Statement.Attribute``1(Igor.StructAttributeDescriptor{``0})">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or null if value is unset in Igor source or environment).
            This is a function overload for value/struct types: numbers, bools and enums.
            </summary>
      <typeparam name="T">Attribute value type argument (must be value/struct type)</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>Nullable attribute value (null if value is not found)</returns>
    </member>
    <member name="M:Igor.Erlang.AST.Statement.Attribute``1(Igor.ClassAttributeDescriptor{``0})">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or null if value is unset in Igor source or environment).
            This is a function overload for reference/class types: strings and objects.
            </summary>
      <typeparam name="T">Attribute value type argument (must be reference/class type)</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>Attribute value (null if value is not found)</returns>
    </member>
    <member name="M:Igor.Erlang.AST.Statement.ListAttribute``1(Igor.AttributeDescriptor{``0})">
      <summary>
            Get a list of all attribute values set for this AST statement or inherited using inheritance type defined by attribute descriptor.
            Empty list is returned if no values are found.
            </summary>
      <typeparam name="T">Attribute value type argument</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>List of found attribute values</returns>
    </member>
    <member name="P:Igor.Erlang.AST.Statement.NestedHosts">
      <summary>
            List of nested declarations
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.Statement.Location">
      <summary>
            Declaration location in Igor source file
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.Statement.Attributes">
      <summary>
            The attribute collection. Obsolete and will be removed in future releases.
            Use Attribute or ListAttribute functions instead.
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.Statement.Name">
      <summary>
            Name of the entity defined by this declaration
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.Statement.Annotation">
      <summary>
            Annotation string (if present in Igor source file) or null (if not present)
            </summary>
    </member>
    <member name="T:Igor.Erlang.AST.Module">
      <summary>
            Module AST
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.Module.Definitions">
      <summary>
            List of top-level definitions (forms)
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.Module.Enums">
      <summary>
            List of enum types declared in this module
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.Module.Structs">
      <summary>
            List of struct types (records, variants, interfaces) declared in this module
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.Module.Records">
      <summary>
            List of records declared in this module
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.Module.Types">
      <summary>
            List of all types declared in this module
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.Module.Services">
      <summary>
            List of services declared in this module
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.Module.WebServices">
      <summary>
            List of web services declared in this module
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.Module.Tables">
      <summary>
            List of tables declared in this module
            </summary>
    </member>
    <member name="T:Igor.Erlang.AST.GenericArgument">
      <summary>
            Generic argument type variable
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.GenericArgument.Location">
      <summary>
            Location in Igor source file
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.GenericArgument.Name">
      <summary>
            Name of generic type variable
            </summary>
    </member>
    <member name="T:Igor.Erlang.AST.EnumField">
      <summary>
            Enum field declaration AST
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.EnumField.Value">
      <summary>
            Integer value of enum field
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.EnumField.Enum">
      <summary>
            Enum AST this field belongs to
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.EnumField.jsonFieldNotation">
      <summary>
            Notation used to translate Igor name to JSON string values (the value of json.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.EnumField.jsonKey">
      <summary>
            JSON serialization value for this enum field, translated using jsonFieldNotation or overriden by json.key attribute
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.EnumField.xmlEnumNotation">
      <summary>
            Notation used to translate Igor name to XML string values (the value of xml.enum_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.EnumField.xmlName">
      <summary>
            XML serialization value for this enum field, translated using xmlEnumNotation or overriden by xml.name attribute
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.EnumField.stringFieldNotation">
      <summary>
            Notation used to translate Igor name to string values (the value of string.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.EnumField.stringValue">
      <summary>
            String serialization value for this enum field, translated using xmlEnumNotation or overriden by string.value attribute
            </summary>
    </member>
    <member name="T:Igor.Erlang.AST.RecordForm">
      <summary>
            Record declaration AST
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.RecordForm.TagValue">
      <summary>
            Tag field value for this record
            </summary>
    </member>
    <member name="T:Igor.Erlang.AST.InterfaceForm">
      <summary>
            Interface declaration AST
            </summary>
    </member>
    <member name="T:Igor.Erlang.AST.VariantForm">
      <summary>
            Variant declaration AST
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.VariantForm.Descendants">
      <summary>
            List of direct descendants (both records and variants)
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.VariantForm.Records">
      <summary>
            List of all record descendants, both direct and indirect
            </summary>
    </member>
    <member name="T:Igor.Erlang.AST.UnionClause">
      <summary>
            Union clause declaration AST
            </summary>
    </member>
    <member name="T:Igor.Erlang.AST.FunctionThrow">
      <summary>
            AST of reference to exception thrown by service functions
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.FunctionThrow.Exception">
      <summary>
            Thrown exception AST exception record
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.FunctionThrow.Id">
      <summary>
            Unique integer ID for serialization
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.FunctionThrow.Function">
      <summary>
            Function AST
            </summary>
    </member>
    <member name="T:Igor.Erlang.AST.ServiceFunction">
      <summary>
            Service function declaration AST
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.ServiceFunction.Direction">
      <summary>
            Function direction (c-&gt;s or s-&gt;c)
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.ServiceFunction.Arguments">
      <summary>
            List of function arguments
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.ServiceFunction.ReturnArguments">
      <summary>
            List of returned result arguments. Null if function is not an RPC.
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.ServiceFunction.Throws">
      <summary>
            List of thrown exception references
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.ServiceFunction.Index">
      <summary>
            Function index in the service
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.ServiceFunction.Service">
      <summary>
            Service AST this function belongs to
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.ServiceFunction.IsRpc">
      <summary>
            Is function an RPC?
            </summary>
    </member>
    <member name="T:Igor.Erlang.AST.ServiceForm">
      <summary>
            Service declaration AST
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.ServiceForm.Functions">
      <summary>
            List of functions
            </summary>
    </member>
    <member name="T:Igor.Erlang.AST.WebServiceForm">
      <summary>
            Web service declaration AST
            </summary>
    </member>
    <member name="T:Igor.Erlang.AST.WebResource">
      <summary>
            Web resource declaration AST
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.WebResource.WebService">
      <summary>
            Web service AST where this resource is defined
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.WebResource.Path">
      <summary>
            List of URL path segments
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.WebResource.Query">
      <summary>
            List of URL query parameters
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.WebResource.Method">
      <summary>
            HTTP method
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.WebResource.Responses">
      <summary>
            List of possible responses
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.WebResource.RequestHeaders">
      <summary>
            List of request headers
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.WebResource.RequestContent">
      <summary>
            Request content AST, if available. Can be null if request has no body.
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.WebResource.RequestBodyType">
      <summary>
            Request body type AST. Can be null if request has no body.
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.WebContent.Type">
      <summary>
            Content Type
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.WebContent.Format">
      <summary>
            Data format of the content type
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.WebContent.Resource">
      <summary>
            Resource this content belongs to
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.WebContent.Var">
      <summary>
            Content variable. May be null, if only type was provided
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.WebContent.Annotation">
      <summary>
            Annotation string (if present in Igor source file) or null (if not present)
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.WebHeader.Name">
      <summary>
            Header name.
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.WebHeader.StaticValue">
      <summary>
            Static header value. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.WebHeader.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.WebHeader.IsStatic">
      <summary>
            True if header has a static value.
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.WebPathSegment.StaticValue">
      <summary>
            Static string segment. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.WebPathSegment.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.WebPathSegment.IsStatic">
      <summary>
            True if this segment is a static segment.
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.WebQueryParameter.StaticValue">
      <summary>
            Static query parameter value. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.WebQueryParameter.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.WebQueryParameter.IsStatic">
      <summary>
            True if query parameter has a static value.
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.WebQueryParameter.Format">
      <summary>
            Data format for query variable
            </summary>
    </member>
    <member name="T:Igor.Erlang.AST.GenericInterface">
      <summary>
            Generic interface instance AST
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.GenericInterface.Prototype">
      <summary>
            Generic interface prototype declaration AST
            </summary>
    </member>
    <member name="P:Igor.Erlang.AST.GenericInterface.Args">
      <summary>
            Generic type arguments
            </summary>
    </member>
    <member name="T:Igor.Erlang.AST.BuiltInType">
      <summary>
            Igor built-in type instances
            </summary>
    </member>
    <member name="T:Igor.Erlang.AST.BuiltInType.Bool">
      <summary>
            Built-in Igor bool type instance
            </summary>
    </member>
    <member name="T:Igor.Erlang.AST.BuiltInType.Integer">
      <summary>
            Built-in Igor integer type instance
            </summary>
    </member>
    <member name="T:Igor.Erlang.AST.BuiltInType.Float">
      <summary>
            Built-in Igor float type instance
            </summary>
    </member>
    <member name="T:Igor.Erlang.AST.BuiltInType.String">
      <summary>
            Built-in Igor string type instance
            </summary>
    </member>
    <member name="T:Igor.Erlang.AST.BuiltInType.Binary">
      <summary>
            Built-in Igor binary type instance
            </summary>
    </member>
    <member name="T:Igor.Erlang.AST.BuiltInType.Atom">
      <summary>
            Built-in Igor atom type instance
            </summary>
    </member>
    <member name="T:Igor.Erlang.AST.BuiltInType.Json">
      <summary>
            Built-in Igor json type instance
            </summary>
    </member>
    <member name="T:Igor.Erlang.AST.BuiltInType.List">
      <summary>
            Built-in Igor list type instance
            </summary>
    </member>
    <member name="T:Igor.Erlang.AST.BuiltInType.Dict">
      <summary>
            Built-in Igor dict type instance
            </summary>
    </member>
    <member name="T:Igor.Erlang.AST.BuiltInType.Optional">
      <summary>
            Built-in Igor optional type instance (?T)
            </summary>
    </member>
    <member name="T:Igor.Erlang.AST.BuiltInType.Flags">
      <summary>
            Built-in Igor flags type instance
            </summary>
    </member>
    <member name="T:Igor.Erlang.AST.BuiltInType.OneOf">
      <summary>
            Built-in Igor oneof type instance
            </summary>
    </member>
    <member name="T:Igor.Erlang.AST.AstMapper">
      <summary>
            Maps Igor.Declarations namespace classes to AST namespace classes.
            </summary>
    </member>
    <member name="M:Igor.Erlang.AST.AstMapper.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Igor.Erlang.AST.AstMapper.Map(System.Collections.Generic.IReadOnlyList{Igor.Declarations.Module})">
      <summary>
            Maps Igor.Declarations namespace classes to AST namespace classes.
            </summary>
      <param name="modules">Module declarations parse tree</param>
      <returns>Modules AST</returns>
    </member>
    <member name="T:Igor.CSharp.Target">
      <summary>
            ITarget implementation for C# language
            </summary>
    </member>
    <member name="T:Igor.CSharp.AST.IType">
      <summary>
            AST type marker interface
            </summary>
    </member>
    <member name="T:Igor.CSharp.AST.IInterface">
      <summary>
            AST interface marker interface
            </summary>
    </member>
    <member name="T:Igor.CSharp.AST.Statement">
      <summary>
            Base type for named AST declaration.
            Statements can host Igor attributes.
            </summary>
    </member>
    <member name="M:Igor.CSharp.AST.Statement.ToString">
      <summary>
            String representation of this AST, for debug purposes
            </summary>
      <returns>String representation of this AST</returns>
    </member>
    <member name="M:Igor.CSharp.AST.Statement.Error(System.String)">
      <summary>
            Report an error related to this statement declaration.
            </summary>
      <param name="message">Error description</param>
    </member>
    <member name="M:Igor.CSharp.AST.Statement.Warning(System.String)">
      <summary>
            Report a warning related to this statement declaration.
            </summary>
      <param name="message">Warning description</param>
    </member>
    <member name="M:Igor.CSharp.AST.Statement.Hint(System.String)">
      <summary>
            Report a hint related to this statement declaration.
            </summary>
      <param name="message">Hint description</param>
    </member>
    <member name="M:Igor.CSharp.AST.Statement.Attribute``1(Igor.AttributeDescriptor{``0},``0)">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or default value if value is unset in Igor source or environment)
            </summary>
      <typeparam name="T">Attribute value type argument</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <param name="defaultValue">Default value</param>
      <returns>Attribute value or default</returns>
    </member>
    <member name="M:Igor.CSharp.AST.Statement.Attribute``1(Igor.StructAttributeDescriptor{``0})">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or null if value is unset in Igor source or environment).
            This is a function overload for value/struct types: numbers, bools and enums.
            </summary>
      <typeparam name="T">Attribute value type argument (must be value/struct type)</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>Nullable attribute value (null if value is not found)</returns>
    </member>
    <member name="M:Igor.CSharp.AST.Statement.Attribute``1(Igor.ClassAttributeDescriptor{``0})">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or null if value is unset in Igor source or environment).
            This is a function overload for reference/class types: strings and objects.
            </summary>
      <typeparam name="T">Attribute value type argument (must be reference/class type)</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>Attribute value (null if value is not found)</returns>
    </member>
    <member name="M:Igor.CSharp.AST.Statement.ListAttribute``1(Igor.AttributeDescriptor{``0})">
      <summary>
            Get a list of all attribute values set for this AST statement or inherited using inheritance type defined by attribute descriptor.
            Empty list is returned if no values are found.
            </summary>
      <typeparam name="T">Attribute value type argument</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>List of found attribute values</returns>
    </member>
    <member name="P:Igor.CSharp.AST.Statement.NestedHosts">
      <summary>
            List of nested declarations
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.Statement.Location">
      <summary>
            Declaration location in Igor source file
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.Statement.Attributes">
      <summary>
            The attribute collection. Obsolete and will be removed in future releases.
            Use Attribute or ListAttribute functions instead.
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.Statement.Name">
      <summary>
            Name of the entity defined by this declaration
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.Statement.Annotation">
      <summary>
            Annotation string (if present in Igor source file) or null (if not present)
            </summary>
    </member>
    <member name="T:Igor.CSharp.AST.Module">
      <summary>
            Module AST
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.Module.Definitions">
      <summary>
            List of top-level definitions (forms)
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.Module.Enums">
      <summary>
            List of enum types declared in this module
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.Module.Structs">
      <summary>
            List of struct types (records, variants, interfaces) declared in this module
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.Module.Records">
      <summary>
            List of records declared in this module
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.Module.Types">
      <summary>
            List of all types declared in this module
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.Module.Services">
      <summary>
            List of services declared in this module
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.Module.WebServices">
      <summary>
            List of web services declared in this module
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.Module.Tables">
      <summary>
            List of tables declared in this module
            </summary>
    </member>
    <member name="T:Igor.CSharp.AST.Form">
      <summary>
            Base AST type for top-level declarations (forms) contained in modules: enums, records, services, etc.
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.Form.Module">
      <summary>
            AST of module in which this form is declared
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.Form.jsonEnabled">
      <summary>
            Is JSON serialization enabled (the value of json.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.Form.binaryEnabled">
      <summary>
            Is binary serialization enabled (the value of binary.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.Form.xmlEnabled">
      <summary>
            Is XML serialization enabled (the value of xml.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.Form.stringEnabled">
      <summary>
            Is string serialization enabled (the value of string.enabled attribute)
            </summary>
    </member>
    <member name="T:Igor.CSharp.AST.TypeForm">
      <summary>
            Base AST type for type declarations
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.TypeForm.Args">
      <summary>
            List of generic arguments (type variables)
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.TypeForm.Arity">
      <summary>
            Generic arity (number of type arguments)
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.TypeForm.IsGeneric">
      <summary>
            Is type generic
            </summary>
    </member>
    <member name="T:Igor.CSharp.AST.GenericArgument">
      <summary>
            Generic argument type variable
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.GenericArgument.Location">
      <summary>
            Location in Igor source file
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.GenericArgument.Name">
      <summary>
            Name of generic type variable
            </summary>
    </member>
    <member name="T:Igor.CSharp.AST.EnumField">
      <summary>
            Enum field declaration AST
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.EnumField.Value">
      <summary>
            Integer value of enum field
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.EnumField.Enum">
      <summary>
            Enum AST this field belongs to
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.EnumField.jsonFieldNotation">
      <summary>
            Notation used to translate Igor name to JSON string values (the value of json.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.EnumField.jsonKey">
      <summary>
            JSON serialization value for this enum field, translated using jsonFieldNotation or overriden by json.key attribute
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.EnumField.xmlEnumNotation">
      <summary>
            Notation used to translate Igor name to XML string values (the value of xml.enum_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.EnumField.xmlName">
      <summary>
            XML serialization value for this enum field, translated using xmlEnumNotation or overriden by xml.name attribute
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.EnumField.stringFieldNotation">
      <summary>
            Notation used to translate Igor name to string values (the value of string.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.EnumField.stringValue">
      <summary>
            String serialization value for this enum field, translated using xmlEnumNotation or overriden by string.value attribute
            </summary>
    </member>
    <member name="T:Igor.CSharp.AST.EnumForm">
      <summary>
            Enum type declaration AST
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.EnumForm.IntType">
      <summary>
            Base integer type. This is the minimum range integer type that includes all field values, or the value of int_type attribute.
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.EnumForm.Flags">
      <summary>
            Enum represents bit flags
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.EnumForm.jsonNumber">
      <summary>
            Serialize enum values to JSON as integer numbers
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.EnumForm.Fields">
      <summary>
            The list of enum fields
            </summary>
    </member>
    <member name="T:Igor.CSharp.AST.RecordField">
      <summary>
            Record, variant or interface field declaration AST
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.RecordField.Type">
      <summary>
            Type AST of this field
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.RecordField.DefaultValue">
      <summary>
            Default value of the field
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.RecordField.IsTag">
      <summary>
            Is the field a variant tag?
            When deserializing variants, tag field is deserialized first, to define which record it is.
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.RecordField.IsInherited">
      <summary>
            Is the field inherited from the ancestor variant?
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.RecordField.IsLocal">
      <summary>
            Is the field local (not inherited)?
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.RecordField.Struct">
      <summary>
            Struct (record, interface or variant) this field belongs to.
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.RecordField.binaryIgnore">
      <summary>
            Should this field be skipped during binary serialization (value of binary.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.RecordField.jsonFieldNotation">
      <summary>
            Notation used to translate Igor name to JSON string values (value of json.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.RecordField.jsonKey">
      <summary>
            JSON serialization object key for this field, translated using jsonFieldNotation or overriden by json.key attribute
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.RecordField.jsonIgnore">
      <summary>
            Should this field be skipped during JSON serialization (value of json.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.RecordField.xmlIgnore">
      <summary>
            Should this field be skipped during XML serialization (value of xml.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.RecordField.Default">
      <summary>
            Default value AST (or null if there's no default value)
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.RecordField.HasDefault">
      <summary>
            Does the field has default value?
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.RecordField.IsOptional">
      <summary>
            Is field optional?
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.RecordField.NonOptType">
      <summary>
            Returns non-optional type of this field
            </summary>
    </member>
    <member name="T:Igor.CSharp.AST.StructForm">
      <summary>
            Base AST type for struct declarations: records, variants and interfaces
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.StructForm.Fields">
      <summary>
            List of all fields (both local and inherited)
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.StructForm.Ancestor">
      <summary>
            Ancestor variant (or null if there's no ancestor)
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.StructForm.Interfaces">
      <summary>
            List of interfaces this struct implements
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.StructForm.TagField">
      <summary>
            Variant tag field (or null if there's no tag field)
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.StructForm.IsException">
      <summary>
            Is this struct an exception?
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.StructForm.jsonSerializedFields">
      <summary>
            List of fields included into JSON serialization
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.StructForm.jsonNulls">
      <summary>
            Whether generated JSON serializer should include nulls for optional fields.
            If this property is not set, serializer may prefer the most convenient or efficient implementation.
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.StructForm.binarySerializedFields">
      <summary>
            List of fields included into binary serialization
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.StructForm.xmlSerializedFields">
      <summary>
            List of fields included into XML serialization
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.StructForm.IsPatch">
      <summary>
            Is it a patch record (value of patch_record attribute)?
            </summary>
    </member>
    <member name="T:Igor.CSharp.AST.RecordForm">
      <summary>
            Record declaration AST
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.RecordForm.TagValue">
      <summary>
            Tag field value for this record
            </summary>
    </member>
    <member name="T:Igor.CSharp.AST.InterfaceForm">
      <summary>
            Interface declaration AST
            </summary>
    </member>
    <member name="T:Igor.CSharp.AST.VariantForm">
      <summary>
            Variant declaration AST
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.VariantForm.Descendants">
      <summary>
            List of direct descendants (both records and variants)
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.VariantForm.Records">
      <summary>
            List of all record descendants, both direct and indirect
            </summary>
    </member>
    <member name="T:Igor.CSharp.AST.UnionClause">
      <summary>
            Union clause declaration AST
            </summary>
    </member>
    <member name="T:Igor.CSharp.AST.UnionForm">
      <summary>
            Union type declaration AST
            </summary>
    </member>
    <member name="T:Igor.CSharp.AST.DefineForm">
      <summary>
            Alias (define) type declaration AST
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.DefineForm.Type">
      <summary>
            Alias target type. This define type is defined as an alias for that type.
            </summary>
    </member>
    <member name="T:Igor.CSharp.AST.FunctionArgument">
      <summary>
            Service function argument AST
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.FunctionArgument.Name">
      <summary>
            Argument name
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.FunctionArgument.Type">
      <summary>
            Argument type
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.FunctionArgument.Function">
      <summary>
            Function AST this argument belongs to
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.FunctionArgument.Index">
      <summary>
            Zero-based index of this argument
            </summary>
    </member>
    <member name="T:Igor.CSharp.AST.FunctionThrow">
      <summary>
            AST of reference to exception thrown by service functions
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.FunctionThrow.Exception">
      <summary>
            Thrown exception AST exception record
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.FunctionThrow.Id">
      <summary>
            Unique integer ID for serialization
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.FunctionThrow.Function">
      <summary>
            Function AST
            </summary>
    </member>
    <member name="T:Igor.CSharp.AST.ServiceFunction">
      <summary>
            Service function declaration AST
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.ServiceFunction.Direction">
      <summary>
            Function direction (c-&gt;s or s-&gt;c)
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.ServiceFunction.Arguments">
      <summary>
            List of function arguments
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.ServiceFunction.ReturnArguments">
      <summary>
            List of returned result arguments. Null if function is not an RPC.
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.ServiceFunction.Throws">
      <summary>
            List of thrown exception references
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.ServiceFunction.Index">
      <summary>
            Function index in the service
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.ServiceFunction.Service">
      <summary>
            Service AST this function belongs to
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.ServiceFunction.IsRpc">
      <summary>
            Is function an RPC?
            </summary>
    </member>
    <member name="T:Igor.CSharp.AST.ServiceForm">
      <summary>
            Service declaration AST
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.ServiceForm.Functions">
      <summary>
            List of functions
            </summary>
    </member>
    <member name="T:Igor.CSharp.AST.WebServiceForm">
      <summary>
            Web service declaration AST
            </summary>
    </member>
    <member name="T:Igor.CSharp.AST.WebResource">
      <summary>
            Web resource declaration AST
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.WebResource.WebService">
      <summary>
            Web service AST where this resource is defined
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.WebResource.Path">
      <summary>
            List of URL path segments
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.WebResource.Query">
      <summary>
            List of URL query parameters
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.WebResource.Method">
      <summary>
            HTTP method
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.WebResource.Responses">
      <summary>
            List of possible responses
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.WebResource.RequestHeaders">
      <summary>
            List of request headers
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.WebResource.RequestContent">
      <summary>
            Request content AST, if available. Can be null if request has no body.
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.WebResource.RequestBodyType">
      <summary>
            Request body type AST. Can be null if request has no body.
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.WebContent.Type">
      <summary>
            Content Type
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.WebContent.Format">
      <summary>
            Data format of the content type
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.WebContent.Resource">
      <summary>
            Resource this content belongs to
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.WebContent.Var">
      <summary>
            Content variable. May be null, if only type was provided
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.WebContent.Annotation">
      <summary>
            Annotation string (if present in Igor source file) or null (if not present)
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.WebHeader.Name">
      <summary>
            Header name.
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.WebHeader.StaticValue">
      <summary>
            Static header value. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.WebHeader.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.WebHeader.IsStatic">
      <summary>
            True if header has a static value.
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.WebPathSegment.StaticValue">
      <summary>
            Static string segment. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.WebPathSegment.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.WebPathSegment.IsStatic">
      <summary>
            True if this segment is a static segment.
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.WebQueryParameter.StaticValue">
      <summary>
            Static query parameter value. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.WebQueryParameter.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.WebQueryParameter.IsStatic">
      <summary>
            True if query parameter has a static value.
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.WebQueryParameter.Format">
      <summary>
            Data format for query variable
            </summary>
    </member>
    <member name="T:Igor.CSharp.AST.GenericType">
      <summary>
            Generic type instance AST
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.GenericType.Prototype">
      <summary>
            Generic type prototype declaration AST
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.GenericType.Args">
      <summary>
            Generic type arguments
            </summary>
    </member>
    <member name="T:Igor.CSharp.AST.GenericInterface">
      <summary>
            Generic interface instance AST
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.GenericInterface.Prototype">
      <summary>
            Generic interface prototype declaration AST
            </summary>
    </member>
    <member name="P:Igor.CSharp.AST.GenericInterface.Args">
      <summary>
            Generic type arguments
            </summary>
    </member>
    <member name="T:Igor.CSharp.AST.BuiltInType">
      <summary>
            Igor built-in type instances
            </summary>
    </member>
    <member name="T:Igor.CSharp.AST.BuiltInType.Bool">
      <summary>
            Built-in Igor bool type instance
            </summary>
    </member>
    <member name="T:Igor.CSharp.AST.BuiltInType.Integer">
      <summary>
            Built-in Igor integer type instance
            </summary>
    </member>
    <member name="T:Igor.CSharp.AST.BuiltInType.Float">
      <summary>
            Built-in Igor float type instance
            </summary>
    </member>
    <member name="T:Igor.CSharp.AST.BuiltInType.String">
      <summary>
            Built-in Igor string type instance
            </summary>
    </member>
    <member name="T:Igor.CSharp.AST.BuiltInType.Binary">
      <summary>
            Built-in Igor binary type instance
            </summary>
    </member>
    <member name="T:Igor.CSharp.AST.BuiltInType.Atom">
      <summary>
            Built-in Igor atom type instance
            </summary>
    </member>
    <member name="T:Igor.CSharp.AST.BuiltInType.Json">
      <summary>
            Built-in Igor json type instance
            </summary>
    </member>
    <member name="T:Igor.CSharp.AST.BuiltInType.List">
      <summary>
            Built-in Igor list type instance
            </summary>
    </member>
    <member name="T:Igor.CSharp.AST.BuiltInType.Dict">
      <summary>
            Built-in Igor dict type instance
            </summary>
    </member>
    <member name="T:Igor.CSharp.AST.BuiltInType.Optional">
      <summary>
            Built-in Igor optional type instance (?T)
            </summary>
    </member>
    <member name="T:Igor.CSharp.AST.BuiltInType.Flags">
      <summary>
            Built-in Igor flags type instance
            </summary>
    </member>
    <member name="T:Igor.CSharp.AST.BuiltInType.OneOf">
      <summary>
            Built-in Igor oneof type instance
            </summary>
    </member>
    <member name="T:Igor.CSharp.AST.AstMapper">
      <summary>
            Maps Igor.Declarations namespace classes to AST namespace classes.
            </summary>
    </member>
    <member name="M:Igor.CSharp.AST.AstMapper.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Igor.CSharp.AST.AstMapper.Map(System.Collections.Generic.IReadOnlyList{Igor.Declarations.Module})">
      <summary>
            Maps Igor.Declarations namespace classes to AST namespace classes.
            </summary>
      <param name="modules">Module declarations parse tree</param>
      <returns>Modules AST</returns>
    </member>
    <member name="T:Igor.TypeScript.ITsGenerator">
      <summary>
            Interface for TypeScript generator.
            Custom TypeScript generators should implement this interface.
            </summary>
    </member>
    <member name="M:Igor.TypeScript.ITsGenerator.Generate(Igor.TypeScript.Model.TsModel,Igor.TypeScript.AST.Module)">
      <summary>
            Called to generate/modify target model for the given Igor module
            </summary>
      <param name="model">TypeScript model</param>
      <param name="mod">Igor module AST</param>
    </member>
    <member name="T:Igor.TypeScript.TsAttributes">
      <summary>
            Built-in attributes available for TypeScript target ("ts")
            </summary>
    </member>
    <member name="P:Igor.TypeScript.TsAttributes.AllAttributes">
      <summary>
            Returns the list of all built-in TypeScript attributes
            </summary>
    </member>
    <member name="T:Igor.TypeScript.TsName">
      <summary>
            Routines for manipulating fully qualified TypeScript names
            </summary>
    </member>
    <member name="M:Igor.TypeScript.TsName.Combine(System.String[])">
      <summary>
            Combine fully qualified name from several parts, using dot as a separator
            </summary>
      <param name="parts">Name parts</param>
      <returns>Fully qualified name</returns>
    </member>
    <member name="T:Igor.TypeScript.Target">
      <summary>
            ITarget implementation for TypeScript language
            </summary>
    </member>
    <member name="T:Igor.TypeScript.Model.TsClass">
      <summary>
            TypeScript class model
            </summary>
    </member>
    <member name="M:Igor.TypeScript.Model.TsClass.Interface(System.String)">
      <summary>
            Add implemented interface. Calling this function twice with the same interface name only adds interface once.
            </summary>
      <param name="intf">TypeScript interface name</param>
    </member>
    <member name="M:Igor.TypeScript.Model.TsClass.Property(System.String)">
      <summary>
            Define property in this class
            </summary>
      <param name="prop">Property definition text</param>
    </member>
    <member name="M:Igor.TypeScript.Model.TsClass.Constructor(System.String)">
      <summary>
            Define constructor in this class
            </summary>
      <param name="ctor">Constructor definition text</param>
    </member>
    <member name="M:Igor.TypeScript.Model.TsClass.Function(System.String)">
      <summary>
            Define function in this class
            </summary>
      <param name="fun">Function definition text</param>
    </member>
    <member name="M:Igor.TypeScript.Model.TsClass.Decorator(System.String)">
      <summary>
            Add decorator
            </summary>
      <param name="decorator">Decorator text</param>
    </member>
    <member name="P:Igor.TypeScript.Model.TsClass.Export">
      <summary>
            Is class exported?
            </summary>
    </member>
    <member name="P:Igor.TypeScript.Model.TsClass.Abstract">
      <summary>
            Is class abstract?
            </summary>
    </member>
    <member name="P:Igor.TypeScript.Model.TsClass.GenericArgs">
      <summary>
            List of generic arguments (type variables)
            </summary>
    </member>
    <member name="T:Igor.TypeScript.Model.TsDeclaration">
      <summary>
            Base class for TypeScript top-level declarations
            </summary>
    </member>
    <member name="P:Igor.TypeScript.Model.TsDeclaration.Name">
      <summary>
            TypeScript name of declared entity
            </summary>
    </member>
    <member name="P:Igor.TypeScript.Model.TsDeclaration.Annotation">
      <summary>
            TSDoc annotation
            </summary>
    </member>
    <member name="T:Igor.TypeScript.Model.TsEnumField">
      <summary>
            TypeScript enum field model
            </summary>
    </member>
    <member name="P:Igor.TypeScript.Model.TsEnumField.Name">
      <summary>
            Enum field name
            </summary>
    </member>
    <member name="P:Igor.TypeScript.Model.TsEnumField.Value">
      <summary>
            Enum field integer value
            </summary>
    </member>
    <member name="P:Igor.TypeScript.Model.TsEnumField.Annotation">
      <summary>
            Enum field TSDoc annotation
            </summary>
    </member>
    <member name="T:Igor.TypeScript.Model.TsEnum">
      <summary>
            TypeScript enum model
            </summary>
    </member>
    <member name="M:Igor.TypeScript.Model.TsEnum.Field(System.String)">
      <summary>
            Create or find existing enum field by name
            </summary>
      <param name="name">Enum field name</param>
      <returns>Enum field model</returns>
    </member>
    <member name="P:Igor.TypeScript.Model.TsEnum.Export">
      <summary>
            Is enum exported?
            </summary>
    </member>
    <member name="T:Igor.TypeScript.Model.TsFile">
      <summary>
            TypeScript file model
            </summary>
    </member>
    <member name="M:Igor.TypeScript.Model.TsFile.Namespace(System.String)">
      <summary>
            Create or find existing namespace declaration by name
            </summary>
      <param name="name">TypeScript namespace name</param>
      <returns>TypeScript namespace model</returns>
    </member>
    <member name="M:Igor.TypeScript.Model.TsFile.Function(System.String)">
      <summary>
            Define function in this namespace
            </summary>
      <param name="fun">Function text</param>
    </member>
    <member name="M:Igor.TypeScript.Model.TsFile.Enum(System.String)">
      <summary>
            Create or find existing enum declaration by name
            </summary>
      <param name="name">TypeScript enum type name</param>
      <returns>TypeScript enum model</returns>
    </member>
    <member name="M:Igor.TypeScript.Model.TsFile.Class(System.String)">
      <summary>
            Create or find existing class declaration by name
            </summary>
      <param name="name">TypeScript class type name</param>
      <returns>TypeScript class model</returns>
    </member>
    <member name="M:Igor.TypeScript.Model.TsFile.Interface(System.String)">
      <summary>
            Create or find existing interface declaration by name
            </summary>
      <param name="name">TypeScript interface type name</param>
      <returns>TypeScript interface model</returns>
    </member>
    <member name="M:Igor.TypeScript.Model.TsFile.Import(System.String)">
      <summary>
            Add import statement.
            Calling it twice with the same argument will only produce one import statement.
            </summary>
      <param name="import">Full import statement string ending with simicolon</param>
    </member>
    <member name="P:Igor.TypeScript.Model.TsFile.Name">
      <summary>
            Module name, used for import
            </summary>
    </member>
    <member name="P:Igor.TypeScript.Model.TsFile.FileName">
      <summary>
            File name with extension, relative to the output folder
            </summary>
    </member>
    <member name="T:Igor.TypeScript.Model.TsInterface">
      <summary>
            TypeScript interface model
            </summary>
    </member>
    <member name="M:Igor.TypeScript.Model.TsInterface.Interface(System.String)">
      <summary>
            Add implemented interface. Calling this function twice with the same interface name only adds interface once.
            </summary>
      <param name="intf">TypeScript interface name</param>
    </member>
    <member name="M:Igor.TypeScript.Model.TsInterface.Property(System.String)">
      <summary>
            Declare property in this interface
            </summary>
      <param name="prop">Property declaration text</param>
    </member>
    <member name="M:Igor.TypeScript.Model.TsInterface.Function(System.String)">
      <summary>
            Declare function in this interface
            </summary>
      <param name="fun">Function declaration text</param>
    </member>
    <member name="P:Igor.TypeScript.Model.TsInterface.GenericArgs">
      <summary>
            List of generic arguments (type variables)
            </summary>
    </member>
    <member name="T:Igor.TypeScript.Model.TsModel">
      <summary>
            TypeScript target model
            </summary>
    </member>
    <member name="M:Igor.TypeScript.Model.TsModel.File(System.String,System.String)">
      <summary>
            Get file model by name
            </summary>
      <param name="name">Module name, used for import</param>
      <param name="path">File name with .ts extension, relative to output folder</param>
      <returns>File model</returns>
    </member>
    <member name="T:Igor.TypeScript.Model.TsModelHelper">
      <summary>
            Utilities for obtaining TypeScript models for AST types
            </summary>
    </member>
    <member name="M:Igor.TypeScript.Model.TsModelHelper.FileOf(Igor.TypeScript.Model.TsModel,Igor.TypeScript.AST.Module)">
      <summary>
            Get the TypeScript file model for the AST module
            </summary>
      <param name="model">TypeScript model</param>
      <param name="astModule">AST module</param>
      <returns>TypeScript file model</returns>
    </member>
    <member name="M:Igor.TypeScript.Model.TsModelHelper.FileOf(Igor.TypeScript.Model.TsModel,Igor.TypeScript.AST.Form)">
      <summary>
            Get the TypeScript file model for the AST form (top-level module definition)
            </summary>
      <param name="model">TypeScript model</param>
      <param name="astForm">AST form</param>
      <returns>TypeScript file model</returns>
    </member>
    <member name="T:Igor.TypeScript.Model.TsNamespace">
      <summary>
            TypeScript namespace model
            </summary>
    </member>
    <member name="M:Igor.TypeScript.Model.TsNamespace.Function(System.String)">
      <summary>
            Define function in this namespace
            </summary>
      <param name="fun">Function text</param>
    </member>
    <member name="M:Igor.TypeScript.Model.TsNamespace.Enum(System.String)">
      <summary>
            Create or find existing enum declaration by name
            </summary>
      <param name="name">TypeScript enum type name</param>
      <returns>TypeScript enum model</returns>
    </member>
    <member name="M:Igor.TypeScript.Model.TsNamespace.Class(System.String)">
      <summary>
            Create or find existing class declaration by name
            </summary>
      <param name="name">TypeScript class type name</param>
      <returns>TypeScript class model</returns>
    </member>
    <member name="M:Igor.TypeScript.Model.TsNamespace.Interface(System.String)">
      <summary>
            Create or find existing interface declaration by name
            </summary>
      <param name="name">TypeScript interface type name</param>
      <returns>TypeScript interface model</returns>
    </member>
    <member name="M:Igor.TypeScript.Model.TsNamespace.Namespace(System.String)">
      <summary>
            Create or find existing namespace declaration by name
            </summary>
      <param name="name">TypeScript namespace name</param>
      <returns>TypeScript namespace model</returns>
    </member>
    <member name="P:Igor.TypeScript.Model.TsNamespace.Export">
      <summary>
            Is namespace exported?
            </summary>
    </member>
    <member name="T:Igor.TypeScript.AST.IType">
      <summary>
            AST type marker interface
            </summary>
    </member>
    <member name="T:Igor.TypeScript.AST.IInterface">
      <summary>
            AST interface marker interface
            </summary>
    </member>
    <member name="T:Igor.TypeScript.AST.Statement">
      <summary>
            Base type for named AST declaration.
            Statements can host Igor attributes.
            </summary>
    </member>
    <member name="M:Igor.TypeScript.AST.Statement.ToString">
      <summary>
            String representation of this AST, for debug purposes
            </summary>
      <returns>String representation of this AST</returns>
    </member>
    <member name="M:Igor.TypeScript.AST.Statement.Error(System.String)">
      <summary>
            Report an error related to this statement declaration.
            </summary>
      <param name="message">Error description</param>
    </member>
    <member name="M:Igor.TypeScript.AST.Statement.Warning(System.String)">
      <summary>
            Report a warning related to this statement declaration.
            </summary>
      <param name="message">Warning description</param>
    </member>
    <member name="M:Igor.TypeScript.AST.Statement.Hint(System.String)">
      <summary>
            Report a hint related to this statement declaration.
            </summary>
      <param name="message">Hint description</param>
    </member>
    <member name="M:Igor.TypeScript.AST.Statement.Attribute``1(Igor.AttributeDescriptor{``0},``0)">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or default value if value is unset in Igor source or environment)
            </summary>
      <typeparam name="T">Attribute value type argument</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <param name="defaultValue">Default value</param>
      <returns>Attribute value or default</returns>
    </member>
    <member name="M:Igor.TypeScript.AST.Statement.Attribute``1(Igor.StructAttributeDescriptor{``0})">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or null if value is unset in Igor source or environment).
            This is a function overload for value/struct types: numbers, bools and enums.
            </summary>
      <typeparam name="T">Attribute value type argument (must be value/struct type)</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>Nullable attribute value (null if value is not found)</returns>
    </member>
    <member name="M:Igor.TypeScript.AST.Statement.Attribute``1(Igor.ClassAttributeDescriptor{``0})">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or null if value is unset in Igor source or environment).
            This is a function overload for reference/class types: strings and objects.
            </summary>
      <typeparam name="T">Attribute value type argument (must be reference/class type)</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>Attribute value (null if value is not found)</returns>
    </member>
    <member name="M:Igor.TypeScript.AST.Statement.ListAttribute``1(Igor.AttributeDescriptor{``0})">
      <summary>
            Get a list of all attribute values set for this AST statement or inherited using inheritance type defined by attribute descriptor.
            Empty list is returned if no values are found.
            </summary>
      <typeparam name="T">Attribute value type argument</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>List of found attribute values</returns>
    </member>
    <member name="P:Igor.TypeScript.AST.Statement.NestedHosts">
      <summary>
            List of nested declarations
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.Statement.Location">
      <summary>
            Declaration location in Igor source file
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.Statement.Attributes">
      <summary>
            The attribute collection. Obsolete and will be removed in future releases.
            Use Attribute or ListAttribute functions instead.
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.Statement.Name">
      <summary>
            Name of the entity defined by this declaration
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.Statement.Annotation">
      <summary>
            Annotation string (if present in Igor source file) or null (if not present)
            </summary>
    </member>
    <member name="T:Igor.TypeScript.AST.Module">
      <summary>
            Module AST
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.Module.Definitions">
      <summary>
            List of top-level definitions (forms)
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.Module.Enums">
      <summary>
            List of enum types declared in this module
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.Module.Structs">
      <summary>
            List of struct types (records, variants, interfaces) declared in this module
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.Module.Records">
      <summary>
            List of records declared in this module
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.Module.Types">
      <summary>
            List of all types declared in this module
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.Module.Services">
      <summary>
            List of services declared in this module
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.Module.WebServices">
      <summary>
            List of web services declared in this module
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.Module.Tables">
      <summary>
            List of tables declared in this module
            </summary>
    </member>
    <member name="T:Igor.TypeScript.AST.Form">
      <summary>
            Base AST type for top-level declarations (forms) contained in modules: enums, records, services, etc.
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.Form.Module">
      <summary>
            AST of module in which this form is declared
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.Form.jsonEnabled">
      <summary>
            Is JSON serialization enabled (the value of json.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.Form.binaryEnabled">
      <summary>
            Is binary serialization enabled (the value of binary.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.Form.xmlEnabled">
      <summary>
            Is XML serialization enabled (the value of xml.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.Form.stringEnabled">
      <summary>
            Is string serialization enabled (the value of string.enabled attribute)
            </summary>
    </member>
    <member name="T:Igor.TypeScript.AST.TypeForm">
      <summary>
            Base AST type for type declarations
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.TypeForm.Args">
      <summary>
            List of generic arguments (type variables)
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.TypeForm.Arity">
      <summary>
            Generic arity (number of type arguments)
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.TypeForm.IsGeneric">
      <summary>
            Is type generic
            </summary>
    </member>
    <member name="T:Igor.TypeScript.AST.GenericArgument">
      <summary>
            Generic argument type variable
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.GenericArgument.Location">
      <summary>
            Location in Igor source file
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.GenericArgument.Name">
      <summary>
            Name of generic type variable
            </summary>
    </member>
    <member name="T:Igor.TypeScript.AST.EnumField">
      <summary>
            Enum field declaration AST
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.EnumField.Value">
      <summary>
            Integer value of enum field
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.EnumField.Enum">
      <summary>
            Enum AST this field belongs to
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.EnumField.jsonFieldNotation">
      <summary>
            Notation used to translate Igor name to JSON string values (the value of json.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.EnumField.jsonKey">
      <summary>
            JSON serialization value for this enum field, translated using jsonFieldNotation or overriden by json.key attribute
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.EnumField.xmlEnumNotation">
      <summary>
            Notation used to translate Igor name to XML string values (the value of xml.enum_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.EnumField.xmlName">
      <summary>
            XML serialization value for this enum field, translated using xmlEnumNotation or overriden by xml.name attribute
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.EnumField.stringFieldNotation">
      <summary>
            Notation used to translate Igor name to string values (the value of string.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.EnumField.stringValue">
      <summary>
            String serialization value for this enum field, translated using xmlEnumNotation or overriden by string.value attribute
            </summary>
    </member>
    <member name="T:Igor.TypeScript.AST.EnumForm">
      <summary>
            Enum type declaration AST
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.EnumForm.IntType">
      <summary>
            Base integer type. This is the minimum range integer type that includes all field values, or the value of int_type attribute.
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.EnumForm.Flags">
      <summary>
            Enum represents bit flags
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.EnumForm.jsonNumber">
      <summary>
            Serialize enum values to JSON as integer numbers
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.EnumForm.Fields">
      <summary>
            The list of enum fields
            </summary>
    </member>
    <member name="T:Igor.TypeScript.AST.RecordField">
      <summary>
            Record, variant or interface field declaration AST
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.RecordField.Type">
      <summary>
            Type AST of this field
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.RecordField.DefaultValue">
      <summary>
            Default value of the field
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.RecordField.IsTag">
      <summary>
            Is the field a variant tag?
            When deserializing variants, tag field is deserialized first, to define which record it is.
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.RecordField.IsInherited">
      <summary>
            Is the field inherited from the ancestor variant?
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.RecordField.IsLocal">
      <summary>
            Is the field local (not inherited)?
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.RecordField.Struct">
      <summary>
            Struct (record, interface or variant) this field belongs to.
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.RecordField.binaryIgnore">
      <summary>
            Should this field be skipped during binary serialization (value of binary.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.RecordField.jsonFieldNotation">
      <summary>
            Notation used to translate Igor name to JSON string values (value of json.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.RecordField.jsonKey">
      <summary>
            JSON serialization object key for this field, translated using jsonFieldNotation or overriden by json.key attribute
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.RecordField.jsonIgnore">
      <summary>
            Should this field be skipped during JSON serialization (value of json.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.RecordField.xmlIgnore">
      <summary>
            Should this field be skipped during XML serialization (value of xml.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.RecordField.Default">
      <summary>
            Default value AST (or null if there's no default value)
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.RecordField.HasDefault">
      <summary>
            Does the field has default value?
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.RecordField.IsOptional">
      <summary>
            Is field optional?
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.RecordField.NonOptType">
      <summary>
            Returns non-optional type of this field
            </summary>
    </member>
    <member name="T:Igor.TypeScript.AST.StructForm">
      <summary>
            Base AST type for struct declarations: records, variants and interfaces
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.StructForm.Fields">
      <summary>
            List of all fields (both local and inherited)
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.StructForm.Ancestor">
      <summary>
            Ancestor variant (or null if there's no ancestor)
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.StructForm.Interfaces">
      <summary>
            List of interfaces this struct implements
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.StructForm.TagField">
      <summary>
            Variant tag field (or null if there's no tag field)
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.StructForm.IsException">
      <summary>
            Is this struct an exception?
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.StructForm.jsonSerializedFields">
      <summary>
            List of fields included into JSON serialization
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.StructForm.jsonNulls">
      <summary>
            Whether generated JSON serializer should include nulls for optional fields.
            If this property is not set, serializer may prefer the most convenient or efficient implementation.
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.StructForm.binarySerializedFields">
      <summary>
            List of fields included into binary serialization
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.StructForm.xmlSerializedFields">
      <summary>
            List of fields included into XML serialization
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.StructForm.IsPatch">
      <summary>
            Is it a patch record (value of patch_record attribute)?
            </summary>
    </member>
    <member name="T:Igor.TypeScript.AST.RecordForm">
      <summary>
            Record declaration AST
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.RecordForm.TagValue">
      <summary>
            Tag field value for this record
            </summary>
    </member>
    <member name="T:Igor.TypeScript.AST.InterfaceForm">
      <summary>
            Interface declaration AST
            </summary>
    </member>
    <member name="T:Igor.TypeScript.AST.VariantForm">
      <summary>
            Variant declaration AST
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.VariantForm.Descendants">
      <summary>
            List of direct descendants (both records and variants)
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.VariantForm.Records">
      <summary>
            List of all record descendants, both direct and indirect
            </summary>
    </member>
    <member name="T:Igor.TypeScript.AST.UnionClause">
      <summary>
            Union clause declaration AST
            </summary>
    </member>
    <member name="T:Igor.TypeScript.AST.UnionForm">
      <summary>
            Union type declaration AST
            </summary>
    </member>
    <member name="T:Igor.TypeScript.AST.DefineForm">
      <summary>
            Alias (define) type declaration AST
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.DefineForm.Type">
      <summary>
            Alias target type. This define type is defined as an alias for that type.
            </summary>
    </member>
    <member name="T:Igor.TypeScript.AST.FunctionArgument">
      <summary>
            Service function argument AST
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.FunctionArgument.Name">
      <summary>
            Argument name
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.FunctionArgument.Type">
      <summary>
            Argument type
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.FunctionArgument.Function">
      <summary>
            Function AST this argument belongs to
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.FunctionArgument.Index">
      <summary>
            Zero-based index of this argument
            </summary>
    </member>
    <member name="T:Igor.TypeScript.AST.FunctionThrow">
      <summary>
            AST of reference to exception thrown by service functions
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.FunctionThrow.Exception">
      <summary>
            Thrown exception AST exception record
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.FunctionThrow.Id">
      <summary>
            Unique integer ID for serialization
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.FunctionThrow.Function">
      <summary>
            Function AST
            </summary>
    </member>
    <member name="T:Igor.TypeScript.AST.ServiceFunction">
      <summary>
            Service function declaration AST
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.ServiceFunction.Direction">
      <summary>
            Function direction (c-&gt;s or s-&gt;c)
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.ServiceFunction.Arguments">
      <summary>
            List of function arguments
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.ServiceFunction.ReturnArguments">
      <summary>
            List of returned result arguments. Null if function is not an RPC.
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.ServiceFunction.Throws">
      <summary>
            List of thrown exception references
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.ServiceFunction.Index">
      <summary>
            Function index in the service
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.ServiceFunction.Service">
      <summary>
            Service AST this function belongs to
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.ServiceFunction.IsRpc">
      <summary>
            Is function an RPC?
            </summary>
    </member>
    <member name="T:Igor.TypeScript.AST.ServiceForm">
      <summary>
            Service declaration AST
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.ServiceForm.Functions">
      <summary>
            List of functions
            </summary>
    </member>
    <member name="T:Igor.TypeScript.AST.WebServiceForm">
      <summary>
            Web service declaration AST
            </summary>
    </member>
    <member name="T:Igor.TypeScript.AST.WebResource">
      <summary>
            Web resource declaration AST
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.WebResource.WebService">
      <summary>
            Web service AST where this resource is defined
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.WebResource.Path">
      <summary>
            List of URL path segments
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.WebResource.Query">
      <summary>
            List of URL query parameters
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.WebResource.Method">
      <summary>
            HTTP method
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.WebResource.Responses">
      <summary>
            List of possible responses
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.WebResource.RequestHeaders">
      <summary>
            List of request headers
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.WebResource.RequestContent">
      <summary>
            Request content AST, if available. Can be null if request has no body.
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.WebResource.RequestBodyType">
      <summary>
            Request body type AST. Can be null if request has no body.
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.WebContent.Type">
      <summary>
            Content Type
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.WebContent.Format">
      <summary>
            Data format of the content type
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.WebContent.Resource">
      <summary>
            Resource this content belongs to
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.WebContent.Var">
      <summary>
            Content variable. May be null, if only type was provided
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.WebContent.Annotation">
      <summary>
            Annotation string (if present in Igor source file) or null (if not present)
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.WebHeader.Name">
      <summary>
            Header name.
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.WebHeader.StaticValue">
      <summary>
            Static header value. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.WebHeader.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.WebHeader.IsStatic">
      <summary>
            True if header has a static value.
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.WebPathSegment.StaticValue">
      <summary>
            Static string segment. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.WebPathSegment.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.WebPathSegment.IsStatic">
      <summary>
            True if this segment is a static segment.
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.WebQueryParameter.StaticValue">
      <summary>
            Static query parameter value. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.WebQueryParameter.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.WebQueryParameter.IsStatic">
      <summary>
            True if query parameter has a static value.
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.WebQueryParameter.Format">
      <summary>
            Data format for query variable
            </summary>
    </member>
    <member name="T:Igor.TypeScript.AST.GenericType">
      <summary>
            Generic type instance AST
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.GenericType.Prototype">
      <summary>
            Generic type prototype declaration AST
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.GenericType.Args">
      <summary>
            Generic type arguments
            </summary>
    </member>
    <member name="T:Igor.TypeScript.AST.GenericInterface">
      <summary>
            Generic interface instance AST
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.GenericInterface.Prototype">
      <summary>
            Generic interface prototype declaration AST
            </summary>
    </member>
    <member name="P:Igor.TypeScript.AST.GenericInterface.Args">
      <summary>
            Generic type arguments
            </summary>
    </member>
    <member name="T:Igor.TypeScript.AST.BuiltInType">
      <summary>
            Igor built-in type instances
            </summary>
    </member>
    <member name="T:Igor.TypeScript.AST.BuiltInType.Bool">
      <summary>
            Built-in Igor bool type instance
            </summary>
    </member>
    <member name="T:Igor.TypeScript.AST.BuiltInType.Integer">
      <summary>
            Built-in Igor integer type instance
            </summary>
    </member>
    <member name="T:Igor.TypeScript.AST.BuiltInType.Float">
      <summary>
            Built-in Igor float type instance
            </summary>
    </member>
    <member name="T:Igor.TypeScript.AST.BuiltInType.String">
      <summary>
            Built-in Igor string type instance
            </summary>
    </member>
    <member name="T:Igor.TypeScript.AST.BuiltInType.Binary">
      <summary>
            Built-in Igor binary type instance
            </summary>
    </member>
    <member name="T:Igor.TypeScript.AST.BuiltInType.Atom">
      <summary>
            Built-in Igor atom type instance
            </summary>
    </member>
    <member name="T:Igor.TypeScript.AST.BuiltInType.Json">
      <summary>
            Built-in Igor json type instance
            </summary>
    </member>
    <member name="T:Igor.TypeScript.AST.BuiltInType.List">
      <summary>
            Built-in Igor list type instance
            </summary>
    </member>
    <member name="T:Igor.TypeScript.AST.BuiltInType.Dict">
      <summary>
            Built-in Igor dict type instance
            </summary>
    </member>
    <member name="T:Igor.TypeScript.AST.BuiltInType.Optional">
      <summary>
            Built-in Igor optional type instance (?T)
            </summary>
    </member>
    <member name="T:Igor.TypeScript.AST.BuiltInType.Flags">
      <summary>
            Built-in Igor flags type instance
            </summary>
    </member>
    <member name="T:Igor.TypeScript.AST.BuiltInType.OneOf">
      <summary>
            Built-in Igor oneof type instance
            </summary>
    </member>
    <member name="T:Igor.TypeScript.AST.AstMapper">
      <summary>
            Maps Igor.Declarations namespace classes to AST namespace classes.
            </summary>
    </member>
    <member name="M:Igor.TypeScript.AST.AstMapper.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Igor.TypeScript.AST.AstMapper.Map(System.Collections.Generic.IReadOnlyList{Igor.Declarations.Module})">
      <summary>
            Maps Igor.Declarations namespace classes to AST namespace classes.
            </summary>
      <param name="modules">Module declarations parse tree</param>
      <returns>Modules AST</returns>
    </member>
    <member name="T:Igor.JavaScript.IJsGenerator">
      <summary>
            Interface for JavaScript generator.
            Custom JavaScript generators should implement this interface.
            </summary>
    </member>
    <member name="M:Igor.JavaScript.IJsGenerator.Generate(Igor.JavaScript.Model.JsModel,Igor.JavaScript.AST.Module)">
      <summary>
            Called to generate/modify target model for the given Igor module
            </summary>
      <param name="model">JavaScript model</param>
      <param name="mod">Igor module AST</param>
    </member>
    <member name="T:Igor.JavaScript.JsAttributes">
      <summary>
            Built-in attributes available for JavaScript target ("js")
            </summary>
    </member>
    <member name="P:Igor.JavaScript.JsAttributes.AllAttributes">
      <summary>
            Returns the list of all built-in JavaScript attributes
            </summary>
    </member>
    <member name="T:Igor.JavaScript.Target">
      <summary>
            ITarget implementation for JavaScript language
            </summary>
    </member>
    <member name="T:Igor.JavaScript.Model.JsFile">
      <summary>
            JavaScript file model
            </summary>
    </member>
    <member name="P:Igor.JavaScript.Model.JsFile.FileName">
      <summary>
            File name with extension, relative to the output folder
            </summary>
    </member>
    <member name="T:Igor.JavaScript.Model.JsModel">
      <summary>
            JavaScript target model
            </summary>
    </member>
    <member name="M:Igor.JavaScript.Model.JsModel.File(System.String)">
      <summary>
            Get file model by name
            </summary>
      <param name="path">File name with .ts extension, relative to output folder</param>
      <returns>File model</returns>
    </member>
    <member name="T:Igor.JavaScript.AST.IType">
      <summary>
            AST type marker interface
            </summary>
    </member>
    <member name="T:Igor.JavaScript.AST.IInterface">
      <summary>
            AST interface marker interface
            </summary>
    </member>
    <member name="T:Igor.JavaScript.AST.Statement">
      <summary>
            Base type for named AST declaration.
            Statements can host Igor attributes.
            </summary>
    </member>
    <member name="M:Igor.JavaScript.AST.Statement.ToString">
      <summary>
            String representation of this AST, for debug purposes
            </summary>
      <returns>String representation of this AST</returns>
    </member>
    <member name="M:Igor.JavaScript.AST.Statement.Error(System.String)">
      <summary>
            Report an error related to this statement declaration.
            </summary>
      <param name="message">Error description</param>
    </member>
    <member name="M:Igor.JavaScript.AST.Statement.Warning(System.String)">
      <summary>
            Report a warning related to this statement declaration.
            </summary>
      <param name="message">Warning description</param>
    </member>
    <member name="M:Igor.JavaScript.AST.Statement.Hint(System.String)">
      <summary>
            Report a hint related to this statement declaration.
            </summary>
      <param name="message">Hint description</param>
    </member>
    <member name="M:Igor.JavaScript.AST.Statement.Attribute``1(Igor.AttributeDescriptor{``0},``0)">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or default value if value is unset in Igor source or environment)
            </summary>
      <typeparam name="T">Attribute value type argument</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <param name="defaultValue">Default value</param>
      <returns>Attribute value or default</returns>
    </member>
    <member name="M:Igor.JavaScript.AST.Statement.Attribute``1(Igor.StructAttributeDescriptor{``0})">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or null if value is unset in Igor source or environment).
            This is a function overload for value/struct types: numbers, bools and enums.
            </summary>
      <typeparam name="T">Attribute value type argument (must be value/struct type)</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>Nullable attribute value (null if value is not found)</returns>
    </member>
    <member name="M:Igor.JavaScript.AST.Statement.Attribute``1(Igor.ClassAttributeDescriptor{``0})">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or null if value is unset in Igor source or environment).
            This is a function overload for reference/class types: strings and objects.
            </summary>
      <typeparam name="T">Attribute value type argument (must be reference/class type)</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>Attribute value (null if value is not found)</returns>
    </member>
    <member name="M:Igor.JavaScript.AST.Statement.ListAttribute``1(Igor.AttributeDescriptor{``0})">
      <summary>
            Get a list of all attribute values set for this AST statement or inherited using inheritance type defined by attribute descriptor.
            Empty list is returned if no values are found.
            </summary>
      <typeparam name="T">Attribute value type argument</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>List of found attribute values</returns>
    </member>
    <member name="P:Igor.JavaScript.AST.Statement.NestedHosts">
      <summary>
            List of nested declarations
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.Statement.Location">
      <summary>
            Declaration location in Igor source file
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.Statement.Attributes">
      <summary>
            The attribute collection. Obsolete and will be removed in future releases.
            Use Attribute or ListAttribute functions instead.
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.Statement.Name">
      <summary>
            Name of the entity defined by this declaration
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.Statement.Annotation">
      <summary>
            Annotation string (if present in Igor source file) or null (if not present)
            </summary>
    </member>
    <member name="T:Igor.JavaScript.AST.Module">
      <summary>
            Module AST
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.Module.Definitions">
      <summary>
            List of top-level definitions (forms)
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.Module.Enums">
      <summary>
            List of enum types declared in this module
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.Module.Structs">
      <summary>
            List of struct types (records, variants, interfaces) declared in this module
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.Module.Records">
      <summary>
            List of records declared in this module
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.Module.Types">
      <summary>
            List of all types declared in this module
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.Module.Services">
      <summary>
            List of services declared in this module
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.Module.WebServices">
      <summary>
            List of web services declared in this module
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.Module.Tables">
      <summary>
            List of tables declared in this module
            </summary>
    </member>
    <member name="T:Igor.JavaScript.AST.Form">
      <summary>
            Base AST type for top-level declarations (forms) contained in modules: enums, records, services, etc.
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.Form.Module">
      <summary>
            AST of module in which this form is declared
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.Form.jsonEnabled">
      <summary>
            Is JSON serialization enabled (the value of json.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.Form.binaryEnabled">
      <summary>
            Is binary serialization enabled (the value of binary.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.Form.xmlEnabled">
      <summary>
            Is XML serialization enabled (the value of xml.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.Form.stringEnabled">
      <summary>
            Is string serialization enabled (the value of string.enabled attribute)
            </summary>
    </member>
    <member name="T:Igor.JavaScript.AST.TypeForm">
      <summary>
            Base AST type for type declarations
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.TypeForm.Args">
      <summary>
            List of generic arguments (type variables)
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.TypeForm.Arity">
      <summary>
            Generic arity (number of type arguments)
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.TypeForm.IsGeneric">
      <summary>
            Is type generic
            </summary>
    </member>
    <member name="T:Igor.JavaScript.AST.GenericArgument">
      <summary>
            Generic argument type variable
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.GenericArgument.Location">
      <summary>
            Location in Igor source file
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.GenericArgument.Name">
      <summary>
            Name of generic type variable
            </summary>
    </member>
    <member name="T:Igor.JavaScript.AST.EnumField">
      <summary>
            Enum field declaration AST
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.EnumField.Value">
      <summary>
            Integer value of enum field
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.EnumField.Enum">
      <summary>
            Enum AST this field belongs to
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.EnumField.jsonFieldNotation">
      <summary>
            Notation used to translate Igor name to JSON string values (the value of json.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.EnumField.jsonKey">
      <summary>
            JSON serialization value for this enum field, translated using jsonFieldNotation or overriden by json.key attribute
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.EnumField.xmlEnumNotation">
      <summary>
            Notation used to translate Igor name to XML string values (the value of xml.enum_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.EnumField.xmlName">
      <summary>
            XML serialization value for this enum field, translated using xmlEnumNotation or overriden by xml.name attribute
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.EnumField.stringFieldNotation">
      <summary>
            Notation used to translate Igor name to string values (the value of string.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.EnumField.stringValue">
      <summary>
            String serialization value for this enum field, translated using xmlEnumNotation or overriden by string.value attribute
            </summary>
    </member>
    <member name="T:Igor.JavaScript.AST.EnumForm">
      <summary>
            Enum type declaration AST
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.EnumForm.IntType">
      <summary>
            Base integer type. This is the minimum range integer type that includes all field values, or the value of int_type attribute.
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.EnumForm.Flags">
      <summary>
            Enum represents bit flags
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.EnumForm.jsonNumber">
      <summary>
            Serialize enum values to JSON as integer numbers
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.EnumForm.Fields">
      <summary>
            The list of enum fields
            </summary>
    </member>
    <member name="T:Igor.JavaScript.AST.RecordField">
      <summary>
            Record, variant or interface field declaration AST
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.RecordField.Type">
      <summary>
            Type AST of this field
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.RecordField.DefaultValue">
      <summary>
            Default value of the field
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.RecordField.IsTag">
      <summary>
            Is the field a variant tag?
            When deserializing variants, tag field is deserialized first, to define which record it is.
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.RecordField.IsInherited">
      <summary>
            Is the field inherited from the ancestor variant?
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.RecordField.IsLocal">
      <summary>
            Is the field local (not inherited)?
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.RecordField.Struct">
      <summary>
            Struct (record, interface or variant) this field belongs to.
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.RecordField.binaryIgnore">
      <summary>
            Should this field be skipped during binary serialization (value of binary.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.RecordField.jsonFieldNotation">
      <summary>
            Notation used to translate Igor name to JSON string values (value of json.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.RecordField.jsonKey">
      <summary>
            JSON serialization object key for this field, translated using jsonFieldNotation or overriden by json.key attribute
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.RecordField.jsonIgnore">
      <summary>
            Should this field be skipped during JSON serialization (value of json.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.RecordField.xmlIgnore">
      <summary>
            Should this field be skipped during XML serialization (value of xml.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.RecordField.Default">
      <summary>
            Default value AST (or null if there's no default value)
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.RecordField.HasDefault">
      <summary>
            Does the field has default value?
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.RecordField.IsOptional">
      <summary>
            Is field optional?
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.RecordField.NonOptType">
      <summary>
            Returns non-optional type of this field
            </summary>
    </member>
    <member name="T:Igor.JavaScript.AST.StructForm">
      <summary>
            Base AST type for struct declarations: records, variants and interfaces
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.StructForm.Fields">
      <summary>
            List of all fields (both local and inherited)
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.StructForm.Ancestor">
      <summary>
            Ancestor variant (or null if there's no ancestor)
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.StructForm.Interfaces">
      <summary>
            List of interfaces this struct implements
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.StructForm.TagField">
      <summary>
            Variant tag field (or null if there's no tag field)
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.StructForm.IsException">
      <summary>
            Is this struct an exception?
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.StructForm.jsonSerializedFields">
      <summary>
            List of fields included into JSON serialization
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.StructForm.jsonNulls">
      <summary>
            Whether generated JSON serializer should include nulls for optional fields.
            If this property is not set, serializer may prefer the most convenient or efficient implementation.
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.StructForm.binarySerializedFields">
      <summary>
            List of fields included into binary serialization
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.StructForm.xmlSerializedFields">
      <summary>
            List of fields included into XML serialization
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.StructForm.IsPatch">
      <summary>
            Is it a patch record (value of patch_record attribute)?
            </summary>
    </member>
    <member name="T:Igor.JavaScript.AST.RecordForm">
      <summary>
            Record declaration AST
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.RecordForm.TagValue">
      <summary>
            Tag field value for this record
            </summary>
    </member>
    <member name="T:Igor.JavaScript.AST.InterfaceForm">
      <summary>
            Interface declaration AST
            </summary>
    </member>
    <member name="T:Igor.JavaScript.AST.VariantForm">
      <summary>
            Variant declaration AST
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.VariantForm.Descendants">
      <summary>
            List of direct descendants (both records and variants)
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.VariantForm.Records">
      <summary>
            List of all record descendants, both direct and indirect
            </summary>
    </member>
    <member name="T:Igor.JavaScript.AST.UnionClause">
      <summary>
            Union clause declaration AST
            </summary>
    </member>
    <member name="T:Igor.JavaScript.AST.UnionForm">
      <summary>
            Union type declaration AST
            </summary>
    </member>
    <member name="T:Igor.JavaScript.AST.DefineForm">
      <summary>
            Alias (define) type declaration AST
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.DefineForm.Type">
      <summary>
            Alias target type. This define type is defined as an alias for that type.
            </summary>
    </member>
    <member name="T:Igor.JavaScript.AST.FunctionArgument">
      <summary>
            Service function argument AST
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.FunctionArgument.Name">
      <summary>
            Argument name
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.FunctionArgument.Type">
      <summary>
            Argument type
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.FunctionArgument.Function">
      <summary>
            Function AST this argument belongs to
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.FunctionArgument.Index">
      <summary>
            Zero-based index of this argument
            </summary>
    </member>
    <member name="T:Igor.JavaScript.AST.FunctionThrow">
      <summary>
            AST of reference to exception thrown by service functions
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.FunctionThrow.Exception">
      <summary>
            Thrown exception AST exception record
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.FunctionThrow.Id">
      <summary>
            Unique integer ID for serialization
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.FunctionThrow.Function">
      <summary>
            Function AST
            </summary>
    </member>
    <member name="T:Igor.JavaScript.AST.ServiceFunction">
      <summary>
            Service function declaration AST
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.ServiceFunction.Direction">
      <summary>
            Function direction (c-&gt;s or s-&gt;c)
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.ServiceFunction.Arguments">
      <summary>
            List of function arguments
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.ServiceFunction.ReturnArguments">
      <summary>
            List of returned result arguments. Null if function is not an RPC.
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.ServiceFunction.Throws">
      <summary>
            List of thrown exception references
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.ServiceFunction.Index">
      <summary>
            Function index in the service
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.ServiceFunction.Service">
      <summary>
            Service AST this function belongs to
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.ServiceFunction.IsRpc">
      <summary>
            Is function an RPC?
            </summary>
    </member>
    <member name="T:Igor.JavaScript.AST.ServiceForm">
      <summary>
            Service declaration AST
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.ServiceForm.Functions">
      <summary>
            List of functions
            </summary>
    </member>
    <member name="T:Igor.JavaScript.AST.WebServiceForm">
      <summary>
            Web service declaration AST
            </summary>
    </member>
    <member name="T:Igor.JavaScript.AST.WebResource">
      <summary>
            Web resource declaration AST
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.WebResource.WebService">
      <summary>
            Web service AST where this resource is defined
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.WebResource.Path">
      <summary>
            List of URL path segments
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.WebResource.Query">
      <summary>
            List of URL query parameters
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.WebResource.Method">
      <summary>
            HTTP method
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.WebResource.Responses">
      <summary>
            List of possible responses
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.WebResource.RequestHeaders">
      <summary>
            List of request headers
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.WebResource.RequestContent">
      <summary>
            Request content AST, if available. Can be null if request has no body.
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.WebResource.RequestBodyType">
      <summary>
            Request body type AST. Can be null if request has no body.
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.WebContent.Type">
      <summary>
            Content Type
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.WebContent.Format">
      <summary>
            Data format of the content type
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.WebContent.Resource">
      <summary>
            Resource this content belongs to
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.WebContent.Var">
      <summary>
            Content variable. May be null, if only type was provided
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.WebContent.Annotation">
      <summary>
            Annotation string (if present in Igor source file) or null (if not present)
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.WebHeader.Name">
      <summary>
            Header name.
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.WebHeader.StaticValue">
      <summary>
            Static header value. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.WebHeader.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.WebHeader.IsStatic">
      <summary>
            True if header has a static value.
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.WebPathSegment.StaticValue">
      <summary>
            Static string segment. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.WebPathSegment.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.WebPathSegment.IsStatic">
      <summary>
            True if this segment is a static segment.
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.WebQueryParameter.StaticValue">
      <summary>
            Static query parameter value. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.WebQueryParameter.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.WebQueryParameter.IsStatic">
      <summary>
            True if query parameter has a static value.
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.WebQueryParameter.Format">
      <summary>
            Data format for query variable
            </summary>
    </member>
    <member name="T:Igor.JavaScript.AST.GenericType">
      <summary>
            Generic type instance AST
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.GenericType.Prototype">
      <summary>
            Generic type prototype declaration AST
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.GenericType.Args">
      <summary>
            Generic type arguments
            </summary>
    </member>
    <member name="T:Igor.JavaScript.AST.GenericInterface">
      <summary>
            Generic interface instance AST
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.GenericInterface.Prototype">
      <summary>
            Generic interface prototype declaration AST
            </summary>
    </member>
    <member name="P:Igor.JavaScript.AST.GenericInterface.Args">
      <summary>
            Generic type arguments
            </summary>
    </member>
    <member name="T:Igor.JavaScript.AST.BuiltInType">
      <summary>
            Igor built-in type instances
            </summary>
    </member>
    <member name="T:Igor.JavaScript.AST.BuiltInType.Bool">
      <summary>
            Built-in Igor bool type instance
            </summary>
    </member>
    <member name="T:Igor.JavaScript.AST.BuiltInType.Integer">
      <summary>
            Built-in Igor integer type instance
            </summary>
    </member>
    <member name="T:Igor.JavaScript.AST.BuiltInType.Float">
      <summary>
            Built-in Igor float type instance
            </summary>
    </member>
    <member name="T:Igor.JavaScript.AST.BuiltInType.String">
      <summary>
            Built-in Igor string type instance
            </summary>
    </member>
    <member name="T:Igor.JavaScript.AST.BuiltInType.Binary">
      <summary>
            Built-in Igor binary type instance
            </summary>
    </member>
    <member name="T:Igor.JavaScript.AST.BuiltInType.Atom">
      <summary>
            Built-in Igor atom type instance
            </summary>
    </member>
    <member name="T:Igor.JavaScript.AST.BuiltInType.Json">
      <summary>
            Built-in Igor json type instance
            </summary>
    </member>
    <member name="T:Igor.JavaScript.AST.BuiltInType.List">
      <summary>
            Built-in Igor list type instance
            </summary>
    </member>
    <member name="T:Igor.JavaScript.AST.BuiltInType.Dict">
      <summary>
            Built-in Igor dict type instance
            </summary>
    </member>
    <member name="T:Igor.JavaScript.AST.BuiltInType.Optional">
      <summary>
            Built-in Igor optional type instance (?T)
            </summary>
    </member>
    <member name="T:Igor.JavaScript.AST.BuiltInType.Flags">
      <summary>
            Built-in Igor flags type instance
            </summary>
    </member>
    <member name="T:Igor.JavaScript.AST.BuiltInType.OneOf">
      <summary>
            Built-in Igor oneof type instance
            </summary>
    </member>
    <member name="T:Igor.JavaScript.AST.AstMapper">
      <summary>
            Maps Igor.Declarations namespace classes to AST namespace classes.
            </summary>
    </member>
    <member name="M:Igor.JavaScript.AST.AstMapper.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Igor.JavaScript.AST.AstMapper.Map(System.Collections.Generic.IReadOnlyList{Igor.Declarations.Module})">
      <summary>
            Maps Igor.Declarations namespace classes to AST namespace classes.
            </summary>
      <param name="modules">Module declarations parse tree</param>
      <returns>Modules AST</returns>
    </member>
    <member name="T:Igor.UE4.IUeGenerator">
      <summary>
            Interface for UE4 generator.
            Custom UE4 generators should implement this interface.
            </summary>
    </member>
    <member name="M:Igor.UE4.IUeGenerator.Generate(Igor.UE4.Model.UeModel,Igor.UE4.AST.Module)">
      <summary>
            Called to generate/modify target model for the given Igor module
            </summary>
      <param name="model">UE4 model</param>
      <param name="mod">Igor module AST</param>
    </member>
    <member name="T:Igor.UE4.UeName">
      <summary>
            Routines for manipulating fully qualified C++ names
            </summary>
    </member>
    <member name="M:Igor.UE4.UeName.Combine(System.String[])">
      <summary>
            Combine fully qualified name from several parts, using :: as a separator
            </summary>
      <param name="parts">Name parts</param>
      <returns>Fully qualified name</returns>
    </member>
    <member name="T:Igor.UE4.Target">
      <summary>
            ITarget implementation for Unreal Engine 4 (C++ language)
            </summary>
    </member>
    <member name="T:Igor.UE4.Model.UeCppFile">
      <summary>
            UE4 cpp file model
            </summary>
    </member>
    <member name="M:Igor.UE4.Model.UeCppFile.Namespace(System.String)">
      <summary>
            Get or create a namespace with a given name.
            </summary>
      <param name="name">A name of a namespace to be found or created. Can be nested (contain ::)</param>
      <returns>Namespace model</returns>
    </member>
    <member name="P:Igor.UE4.Model.UeCppFile.DefaultNamespace">
      <summary>
            Represents default (empty) namespace model of the cpp file, containing all root declarations
            </summary>
    </member>
    <member name="T:Igor.UE4.Model.UeEnumField">
      <summary>
            C++ enum field model
            </summary>
    </member>
    <member name="P:Igor.UE4.Model.UeEnumField.Name">
      <summary>
            Enum field name
            </summary>
    </member>
    <member name="P:Igor.UE4.Model.UeEnumField.Value">
      <summary>
            Integer value for this field
            </summary>
    </member>
    <member name="P:Igor.UE4.Model.UeEnumField.Comment">
      <summary>
            Documentation comment
            </summary>
    </member>
    <member name="P:Igor.UE4.Model.UeEnumField.Meta">
      <summary>
            UE4 metadata specifiers. 
            Set null value for keys that don't require value.
            See <a href="https://docs.unrealengine.com/en-US/Programming/UnrealArchitecture/Reference/Metadata/index.html">UE4 documentation</a> for reference.
            </summary>
    </member>
    <member name="T:Igor.UE4.Model.UeEnum">
      <summary>
            C++ enum model
            </summary>
    </member>
    <member name="M:Igor.UE4.Model.UeEnum.Field(System.String)">
      <summary>
            Find or add a new enum field
            </summary>
      <param name="name">Name of the field to be found or created</param>
      <returns>Enum field model</returns>
    </member>
    <member name="P:Igor.UE4.Model.UeEnum.Name">
      <summary>
            Enum name
            </summary>
    </member>
    <member name="P:Igor.UE4.Model.UeEnum.IntType">
      <summary>
            Base integer type (may be null)
            </summary>
    </member>
    <member name="P:Igor.UE4.Model.UeEnum.Comment">
      <summary>
            Documentation comment
            </summary>
    </member>
    <member name="P:Igor.UE4.Model.UeEnum.UEnum">
      <summary>
            Whether this enum is UENUM
            </summary>
    </member>
    <member name="M:Igor.UE4.Model.UeHFile.Namespace(System.String)">
      <summary>
            Get or create a namespace with a given name.
            </summary>
      <param name="name">A name of a namespace to be found or created. Can be nested (contain ::)</param>
      <returns>Namespace model</returns>
    </member>
    <member name="P:Igor.UE4.Model.UeHFile.DefaultNamespace">
      <summary>
            Represents default (empty) namespace model of the header file, containing all root declarations
            </summary>
    </member>
    <member name="T:Igor.UE4.Model.UeMacroHost">
      <summary>
            Base class for UE4 C++ declarations that support macro attributes (UPROPERTY, UFUNCTION, UCLASS, USTRUCT or UENUM).
            </summary>
    </member>
    <member name="M:Igor.UE4.Model.UeMacroHost.Specifier(System.String,System.String)">
      <summary>
            Add UE4 macro specifier (for UPROPERTY, UFUNCTION, UCLASS, USTRUCT or UENUM macros).
            Use null value for keys that don't require value.
            Don't put values in quotes.
            </summary>
      <param name="spec">Specifier</param>
      <param name="value">Value. Use null (default) if no value is required.</param>
    </member>
    <member name="P:Igor.UE4.Model.UeMacroHost.Specifiers">
      <summary>
            UE4 macro specifiers (for UPROPERTY, UFUNCTION, UCLASS, USTRUCT or UENUM macros).
            Set null value for keys that don't require value.
            </summary>
    </member>
    <member name="P:Igor.UE4.Model.UeMacroHost.Meta">
      <summary>
            UE4 metadata specifiers. 
            Set null value for keys that don't require value.
            See <a href="https://docs.unrealengine.com/en-US/Programming/UnrealArchitecture/Reference/Metadata/index.html">UE4 documentation</a> for reference.
            </summary>
    </member>
    <member name="T:Igor.UE4.Model.UeModel">
      <summary>
            Unreal Engine 4 target model
            </summary>
    </member>
    <member name="M:Igor.UE4.Model.UeModel.CppFile(System.String)">
      <summary>
            Get cpp file model by path
            </summary>
      <param name="path">File path with .cpp extension, relative to output folder</param>
      <returns>Cpp file model</returns>
    </member>
    <member name="M:Igor.UE4.Model.UeModel.HFile(System.String)">
      <summary>
            Get header file model by path
            </summary>
      <param name="path">File path with .h extension, relative to output folder</param>
      <returns>Header file model</returns>
    </member>
    <member name="T:Igor.UE4.Model.UeNamespace">
      <summary>
            UE4 C++ namespace model
            </summary>
    </member>
    <member name="M:Igor.UE4.Model.UeNamespace.Namespace(System.String)">
      <summary>
            Find or create a nested namespace with a given name.
            </summary>
      <param name="name">A name of a namespace to be found or created. Can be nested (contain ::)</param>
      <returns>Namespace model</returns>
    </member>
    <member name="M:Igor.UE4.Model.UeNamespace.Enum(System.String)">
      <summary>
            Find or create an enumeration type with a given name
            </summary>
      <param name="name">A name of enum to be found or created</param>
      <returns>Enum model</returns>
    </member>
    <member name="M:Igor.UE4.Model.UeNamespace.StructOrClass(System.String)">
      <summary>
            Find or create a struct or class declaration with a given name
            </summary>
      <param name="name">A name of a struct or class to be found or created</param>
      <returns>Struct or class model</returns>
    </member>
    <member name="M:Igor.UE4.Model.UeNamespace.Struct(System.String)">
      <summary>
            Find or create a struct declaration with a given name
            </summary>
      <param name="name">A name of a struct to be found or created</param>
      <returns>Struct model</returns>
    </member>
    <member name="M:Igor.UE4.Model.UeNamespace.Class(System.String)">
      <summary>
            Find or create a class declaration with a given name
            </summary>
      <param name="name">A name of a class to be found or created</param>
      <returns>Class model</returns>
    </member>
    <member name="P:Igor.UE4.Model.UeNamespace.Name">
      <summary>
            Namespace name
            </summary>
    </member>
    <member name="T:Igor.UE4.Model.AccessModifier">
      <summary>
            C++ member access modifier
            </summary>
    </member>
    <member name="T:Igor.UE4.Model.UeStructField">
      <summary>
            C++ class or struct field model
            </summary>
    </member>
    <member name="P:Igor.UE4.Model.UeStructField.Name">
      <summary>
            Field name
            </summary>
    </member>
    <member name="P:Igor.UE4.Model.UeStructField.AccessModifier">
      <summary>
            Access modifier
            </summary>
    </member>
    <member name="P:Igor.UE4.Model.UeStructField.Type">
      <summary>
            C++ type name
            </summary>
    </member>
    <member name="P:Igor.UE4.Model.UeStructField.Value">
      <summary>
            Default value
            </summary>
    </member>
    <member name="P:Igor.UE4.Model.UeStructField.UProperty">
      <summary>
            Whether this field is an UPROPERTY
            </summary>
    </member>
    <member name="P:Igor.UE4.Model.UeStructField.Comment">
      <summary>
            Documentation comment
            </summary>
    </member>
    <member name="T:Igor.UE4.Model.UeFunction">
      <summary>
            C++ class or struct function (method) model
            </summary>
    </member>
    <member name="P:Igor.UE4.Model.UeFunction.AccessModifier">
      <summary>
            Access modifier
            </summary>
    </member>
    <member name="P:Igor.UE4.Model.UeFunction.Text">
      <summary>
            Function code text
            </summary>
    </member>
    <member name="P:Igor.UE4.Model.UeFunction.UFunction">
      <summary>
            Whether this function is UFUNCTION
            </summary>
    </member>
    <member name="P:Igor.UE4.Model.UeFunction.Comment">
      <summary>
            Documentation comment
            </summary>
    </member>
    <member name="T:Igor.UE4.Model.StructType">
      <summary>
            Class or struct type
            </summary>
    </member>
    <member name="T:Igor.UE4.Model.UeStruct">
      <summary>
            C++ class or struct model
            </summary>
    </member>
    <member name="M:Igor.UE4.Model.UeStruct.Field(System.String)">
      <summary>
            Find or create a field by name. Same as Field
            </summary>
      <param name="name">Name of the field to be created or found</param>
      <returns>C++ field model</returns>
    </member>
    <member name="M:Igor.UE4.Model.UeStruct.Field(System.String,System.String,Igor.UE4.Model.AccessModifier)">
      <summary>
            Find or create a new field with the specified name, type and access modifier
            </summary>
      <param name="name">Name of the field to be created or found</param>
      <param name="type">C++ field type string</param>
      <param name="accessModifier">Access modifier</param>
      <returns>C++ field model</returns>
    </member>
    <member name="M:Igor.UE4.Model.UeStruct.BaseType(System.String)">
      <summary>
            Provide a base type for the inherited struct or class
            </summary>
      <param name="baseType">Base type name</param>
    </member>
    <member name="M:Igor.UE4.Model.UeStruct.StructOrClass(System.String,Igor.UE4.Model.AccessModifier)">
      <summary>
            Find or create a nested struct or class declaration with a given name and access modifier
            </summary>
      <param name="name">A name of a struct or class to be found or created</param>
      <param name="accessModifier">Access modifier</param>
      <returns>Struct or class model</returns>
    </member>
    <member name="M:Igor.UE4.Model.UeStruct.Struct(System.String,Igor.UE4.Model.AccessModifier)">
      <summary>
            Find or create a nested struct declaration with a given name and access modifier
            </summary>
      <param name="name">A name of a struct to be found or created</param>
      <param name="accessModifier">Access modifier</param>
      <returns>Struct or class model</returns>
    </member>
    <member name="M:Igor.UE4.Model.UeStruct.Class(System.String,Igor.UE4.Model.AccessModifier)">
      <summary>
            Find or create a nested class declaration with a given name and access modifier
            </summary>
      <param name="name">A name of a class to be found or created</param>
      <param name="accessModifier">Access modifier</param>
      <returns>Struct or class model</returns>
    </member>
    <member name="M:Igor.UE4.Model.UeStruct.Friend(System.String)">
      <summary>
            Provide a friend type name
            </summary>
      <param name="name">Friend type name</param>
    </member>
    <member name="P:Igor.UE4.Model.UeStruct.Name">
      <summary>
            C++ declaration name
            </summary>
    </member>
    <member name="P:Igor.UE4.Model.UeStruct.Comment">
      <summary>
            Documentation comment
            </summary>
    </member>
    <member name="P:Igor.UE4.Model.UeStruct.ApiMacro">
      <summary>
            API macro
            </summary>
    </member>
    <member name="P:Igor.UE4.Model.UeStruct.Type">
      <summary>
            Whether this is a struct or class
            </summary>
    </member>
    <member name="P:Igor.UE4.Model.UeStruct.UClass">
      <summary>
            Whether this is an UCLASS
            </summary>
    </member>
    <member name="P:Igor.UE4.Model.UeStruct.UStruct">
      <summary>
            Whether this is an USTRUCT
            </summary>
    </member>
    <member name="T:Igor.UE4.AST.IType">
      <summary>
            AST type marker interface
            </summary>
    </member>
    <member name="T:Igor.UE4.AST.IInterface">
      <summary>
            AST interface marker interface
            </summary>
    </member>
    <member name="T:Igor.UE4.AST.Statement">
      <summary>
            Base type for named AST declaration.
            Statements can host Igor attributes.
            </summary>
    </member>
    <member name="M:Igor.UE4.AST.Statement.ToString">
      <summary>
            String representation of this AST, for debug purposes
            </summary>
      <returns>String representation of this AST</returns>
    </member>
    <member name="M:Igor.UE4.AST.Statement.Error(System.String)">
      <summary>
            Report an error related to this statement declaration.
            </summary>
      <param name="message">Error description</param>
    </member>
    <member name="M:Igor.UE4.AST.Statement.Warning(System.String)">
      <summary>
            Report a warning related to this statement declaration.
            </summary>
      <param name="message">Warning description</param>
    </member>
    <member name="M:Igor.UE4.AST.Statement.Hint(System.String)">
      <summary>
            Report a hint related to this statement declaration.
            </summary>
      <param name="message">Hint description</param>
    </member>
    <member name="M:Igor.UE4.AST.Statement.Attribute``1(Igor.AttributeDescriptor{``0},``0)">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or default value if value is unset in Igor source or environment)
            </summary>
      <typeparam name="T">Attribute value type argument</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <param name="defaultValue">Default value</param>
      <returns>Attribute value or default</returns>
    </member>
    <member name="M:Igor.UE4.AST.Statement.Attribute``1(Igor.StructAttributeDescriptor{``0})">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or null if value is unset in Igor source or environment).
            This is a function overload for value/struct types: numbers, bools and enums.
            </summary>
      <typeparam name="T">Attribute value type argument (must be value/struct type)</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>Nullable attribute value (null if value is not found)</returns>
    </member>
    <member name="M:Igor.UE4.AST.Statement.Attribute``1(Igor.ClassAttributeDescriptor{``0})">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or null if value is unset in Igor source or environment).
            This is a function overload for reference/class types: strings and objects.
            </summary>
      <typeparam name="T">Attribute value type argument (must be reference/class type)</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>Attribute value (null if value is not found)</returns>
    </member>
    <member name="M:Igor.UE4.AST.Statement.ListAttribute``1(Igor.AttributeDescriptor{``0})">
      <summary>
            Get a list of all attribute values set for this AST statement or inherited using inheritance type defined by attribute descriptor.
            Empty list is returned if no values are found.
            </summary>
      <typeparam name="T">Attribute value type argument</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>List of found attribute values</returns>
    </member>
    <member name="P:Igor.UE4.AST.Statement.NestedHosts">
      <summary>
            List of nested declarations
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.Statement.Location">
      <summary>
            Declaration location in Igor source file
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.Statement.Attributes">
      <summary>
            The attribute collection. Obsolete and will be removed in future releases.
            Use Attribute or ListAttribute functions instead.
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.Statement.Name">
      <summary>
            Name of the entity defined by this declaration
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.Statement.Annotation">
      <summary>
            Annotation string (if present in Igor source file) or null (if not present)
            </summary>
    </member>
    <member name="T:Igor.UE4.AST.Module">
      <summary>
            Module AST
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.Module.Definitions">
      <summary>
            List of top-level definitions (forms)
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.Module.Enums">
      <summary>
            List of enum types declared in this module
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.Module.Structs">
      <summary>
            List of struct types (records, variants, interfaces) declared in this module
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.Module.Records">
      <summary>
            List of records declared in this module
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.Module.Types">
      <summary>
            List of all types declared in this module
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.Module.Services">
      <summary>
            List of services declared in this module
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.Module.WebServices">
      <summary>
            List of web services declared in this module
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.Module.Tables">
      <summary>
            List of tables declared in this module
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.Module.ueCppFile">
      <summary>
            File path of the cpp file generated for this module
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.Module.ueHFile">
      <summary>
            File path of the header file generated for this module
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.Module.ueCppPath">
      <summary>
            File path of the cpp file generated for this module
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.Module.ueHPath">
      <summary>
            File path of the header file generated for this module
            </summary>
    </member>
    <member name="T:Igor.UE4.AST.Form">
      <summary>
            Base AST type for top-level declarations (forms) contained in modules: enums, records, services, etc.
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.Form.Module">
      <summary>
            AST of module in which this form is declared
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.Form.jsonEnabled">
      <summary>
            Is JSON serialization enabled (the value of json.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.Form.binaryEnabled">
      <summary>
            Is binary serialization enabled (the value of binary.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.Form.xmlEnabled">
      <summary>
            Is XML serialization enabled (the value of xml.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.Form.stringEnabled">
      <summary>
            Is string serialization enabled (the value of string.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.Form.ueIgorPath">
      <summary>
            Path to the Igor standard library, used for all Igor includes. 
            Value of igor_path attribute.
            Empty by default
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.Form.ueNamespace">
      <summary>
            C++ namespace for this declaration (nested namespaces are separated with ::)
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.Form.uePrefix">
      <summary>
            Project prefix for all generated types
            </summary>
    </member>
    <member name="T:Igor.UE4.AST.TypeForm">
      <summary>
            Base AST type for type declarations
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.TypeForm.Args">
      <summary>
            List of generic arguments (type variables)
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.TypeForm.Arity">
      <summary>
            Generic arity (number of type arguments)
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.TypeForm.IsGeneric">
      <summary>
            Is type generic
            </summary>
    </member>
    <member name="T:Igor.UE4.AST.GenericArgument">
      <summary>
            Generic argument type variable
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.GenericArgument.Location">
      <summary>
            Location in Igor source file
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.GenericArgument.Name">
      <summary>
            Name of generic type variable
            </summary>
    </member>
    <member name="T:Igor.UE4.AST.EnumField">
      <summary>
            Enum field declaration AST
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.EnumField.Value">
      <summary>
            Integer value of enum field
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.EnumField.Enum">
      <summary>
            Enum AST this field belongs to
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.EnumField.jsonFieldNotation">
      <summary>
            Notation used to translate Igor name to JSON string values (the value of json.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.EnumField.jsonKey">
      <summary>
            JSON serialization value for this enum field, translated using jsonFieldNotation or overriden by json.key attribute
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.EnumField.xmlEnumNotation">
      <summary>
            Notation used to translate Igor name to XML string values (the value of xml.enum_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.EnumField.xmlName">
      <summary>
            XML serialization value for this enum field, translated using xmlEnumNotation or overriden by xml.name attribute
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.EnumField.stringFieldNotation">
      <summary>
            Notation used to translate Igor name to string values (the value of string.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.EnumField.stringValue">
      <summary>
            String serialization value for this enum field, translated using xmlEnumNotation or overriden by string.value attribute
            </summary>
    </member>
    <member name="T:Igor.UE4.AST.EnumForm">
      <summary>
            Enum type declaration AST
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.EnumForm.IntType">
      <summary>
            Base integer type. This is the minimum range integer type that includes all field values, or the value of int_type attribute.
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.EnumForm.Flags">
      <summary>
            Enum represents bit flags
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.EnumForm.jsonNumber">
      <summary>
            Serialize enum values to JSON as integer numbers
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.EnumForm.Fields">
      <summary>
            The list of enum fields
            </summary>
    </member>
    <member name="T:Igor.UE4.AST.RecordField">
      <summary>
            Record, variant or interface field declaration AST
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.RecordField.Type">
      <summary>
            Type AST of this field
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.RecordField.DefaultValue">
      <summary>
            Default value of the field
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.RecordField.IsTag">
      <summary>
            Is the field a variant tag?
            When deserializing variants, tag field is deserialized first, to define which record it is.
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.RecordField.IsInherited">
      <summary>
            Is the field inherited from the ancestor variant?
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.RecordField.IsLocal">
      <summary>
            Is the field local (not inherited)?
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.RecordField.Struct">
      <summary>
            Struct (record, interface or variant) this field belongs to.
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.RecordField.binaryIgnore">
      <summary>
            Should this field be skipped during binary serialization (value of binary.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.RecordField.jsonFieldNotation">
      <summary>
            Notation used to translate Igor name to JSON string values (value of json.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.RecordField.jsonKey">
      <summary>
            JSON serialization object key for this field, translated using jsonFieldNotation or overriden by json.key attribute
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.RecordField.jsonIgnore">
      <summary>
            Should this field be skipped during JSON serialization (value of json.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.RecordField.xmlIgnore">
      <summary>
            Should this field be skipped during XML serialization (value of xml.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.RecordField.Default">
      <summary>
            Default value AST (or null if there's no default value)
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.RecordField.HasDefault">
      <summary>
            Does the field has default value?
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.RecordField.IsOptional">
      <summary>
            Is field optional?
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.RecordField.NonOptType">
      <summary>
            Returns non-optional type of this field
            </summary>
    </member>
    <member name="T:Igor.UE4.AST.StructForm">
      <summary>
            Base AST type for struct declarations: records, variants and interfaces
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.StructForm.Fields">
      <summary>
            List of all fields (both local and inherited)
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.StructForm.Ancestor">
      <summary>
            Ancestor variant (or null if there's no ancestor)
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.StructForm.Interfaces">
      <summary>
            List of interfaces this struct implements
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.StructForm.TagField">
      <summary>
            Variant tag field (or null if there's no tag field)
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.StructForm.IsException">
      <summary>
            Is this struct an exception?
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.StructForm.jsonSerializedFields">
      <summary>
            List of fields included into JSON serialization
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.StructForm.jsonNulls">
      <summary>
            Whether generated JSON serializer should include nulls for optional fields.
            If this property is not set, serializer may prefer the most convenient or efficient implementation.
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.StructForm.binarySerializedFields">
      <summary>
            List of fields included into binary serialization
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.StructForm.xmlSerializedFields">
      <summary>
            List of fields included into XML serialization
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.StructForm.IsPatch">
      <summary>
            Is it a patch record (value of patch_record attribute)?
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.StructForm.ueUStruct">
      <summary>
            Generate USTRUCT macro for this struct
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.StructForm.ueUClass">
      <summary>
            Generate UCLASS macro for this class
            </summary>
    </member>
    <member name="T:Igor.UE4.AST.RecordForm">
      <summary>
            Record declaration AST
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.RecordForm.TagValue">
      <summary>
            Tag field value for this record
            </summary>
    </member>
    <member name="T:Igor.UE4.AST.InterfaceForm">
      <summary>
            Interface declaration AST
            </summary>
    </member>
    <member name="T:Igor.UE4.AST.VariantForm">
      <summary>
            Variant declaration AST
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.VariantForm.Descendants">
      <summary>
            List of direct descendants (both records and variants)
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.VariantForm.Records">
      <summary>
            List of all record descendants, both direct and indirect
            </summary>
    </member>
    <member name="T:Igor.UE4.AST.UnionClause">
      <summary>
            Union clause declaration AST
            </summary>
    </member>
    <member name="T:Igor.UE4.AST.UnionForm">
      <summary>
            Union type declaration AST
            </summary>
    </member>
    <member name="T:Igor.UE4.AST.DefineForm">
      <summary>
            Alias (define) type declaration AST
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.DefineForm.Type">
      <summary>
            Alias target type. This define type is defined as an alias for that type.
            </summary>
    </member>
    <member name="T:Igor.UE4.AST.FunctionArgument">
      <summary>
            Service function argument AST
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.FunctionArgument.Name">
      <summary>
            Argument name
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.FunctionArgument.Type">
      <summary>
            Argument type
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.FunctionArgument.Function">
      <summary>
            Function AST this argument belongs to
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.FunctionArgument.Index">
      <summary>
            Zero-based index of this argument
            </summary>
    </member>
    <member name="T:Igor.UE4.AST.FunctionThrow">
      <summary>
            AST of reference to exception thrown by service functions
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.FunctionThrow.Exception">
      <summary>
            Thrown exception AST exception record
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.FunctionThrow.Id">
      <summary>
            Unique integer ID for serialization
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.FunctionThrow.Function">
      <summary>
            Function AST
            </summary>
    </member>
    <member name="T:Igor.UE4.AST.ServiceFunction">
      <summary>
            Service function declaration AST
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.ServiceFunction.Direction">
      <summary>
            Function direction (c-&gt;s or s-&gt;c)
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.ServiceFunction.Arguments">
      <summary>
            List of function arguments
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.ServiceFunction.ReturnArguments">
      <summary>
            List of returned result arguments. Null if function is not an RPC.
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.ServiceFunction.Throws">
      <summary>
            List of thrown exception references
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.ServiceFunction.Index">
      <summary>
            Function index in the service
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.ServiceFunction.Service">
      <summary>
            Service AST this function belongs to
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.ServiceFunction.IsRpc">
      <summary>
            Is function an RPC?
            </summary>
    </member>
    <member name="T:Igor.UE4.AST.ServiceForm">
      <summary>
            Service declaration AST
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.ServiceForm.Functions">
      <summary>
            List of functions
            </summary>
    </member>
    <member name="T:Igor.UE4.AST.WebServiceForm">
      <summary>
            Web service declaration AST
            </summary>
    </member>
    <member name="T:Igor.UE4.AST.WebResource">
      <summary>
            Web resource declaration AST
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.WebResource.WebService">
      <summary>
            Web service AST where this resource is defined
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.WebResource.Path">
      <summary>
            List of URL path segments
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.WebResource.Query">
      <summary>
            List of URL query parameters
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.WebResource.Method">
      <summary>
            HTTP method
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.WebResource.Responses">
      <summary>
            List of possible responses
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.WebResource.RequestHeaders">
      <summary>
            List of request headers
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.WebResource.RequestContent">
      <summary>
            Request content AST, if available. Can be null if request has no body.
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.WebResource.RequestBodyType">
      <summary>
            Request body type AST. Can be null if request has no body.
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.WebContent.Type">
      <summary>
            Content Type
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.WebContent.Format">
      <summary>
            Data format of the content type
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.WebContent.Resource">
      <summary>
            Resource this content belongs to
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.WebContent.Var">
      <summary>
            Content variable. May be null, if only type was provided
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.WebContent.Annotation">
      <summary>
            Annotation string (if present in Igor source file) or null (if not present)
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.WebHeader.Name">
      <summary>
            Header name.
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.WebHeader.StaticValue">
      <summary>
            Static header value. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.WebHeader.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.WebHeader.IsStatic">
      <summary>
            True if header has a static value.
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.WebPathSegment.StaticValue">
      <summary>
            Static string segment. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.WebPathSegment.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.WebPathSegment.IsStatic">
      <summary>
            True if this segment is a static segment.
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.WebQueryParameter.StaticValue">
      <summary>
            Static query parameter value. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.WebQueryParameter.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.WebQueryParameter.IsStatic">
      <summary>
            True if query parameter has a static value.
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.WebQueryParameter.Format">
      <summary>
            Data format for query variable
            </summary>
    </member>
    <member name="T:Igor.UE4.AST.GenericType">
      <summary>
            Generic type instance AST
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.GenericType.Prototype">
      <summary>
            Generic type prototype declaration AST
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.GenericType.Args">
      <summary>
            Generic type arguments
            </summary>
    </member>
    <member name="T:Igor.UE4.AST.GenericInterface">
      <summary>
            Generic interface instance AST
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.GenericInterface.Prototype">
      <summary>
            Generic interface prototype declaration AST
            </summary>
    </member>
    <member name="P:Igor.UE4.AST.GenericInterface.Args">
      <summary>
            Generic type arguments
            </summary>
    </member>
    <member name="T:Igor.UE4.AST.BuiltInType">
      <summary>
            Igor built-in type instances
            </summary>
    </member>
    <member name="T:Igor.UE4.AST.BuiltInType.Bool">
      <summary>
            Built-in Igor bool type instance
            </summary>
    </member>
    <member name="T:Igor.UE4.AST.BuiltInType.Integer">
      <summary>
            Built-in Igor integer type instance
            </summary>
    </member>
    <member name="T:Igor.UE4.AST.BuiltInType.Float">
      <summary>
            Built-in Igor float type instance
            </summary>
    </member>
    <member name="T:Igor.UE4.AST.BuiltInType.String">
      <summary>
            Built-in Igor string type instance
            </summary>
    </member>
    <member name="T:Igor.UE4.AST.BuiltInType.Binary">
      <summary>
            Built-in Igor binary type instance
            </summary>
    </member>
    <member name="T:Igor.UE4.AST.BuiltInType.Atom">
      <summary>
            Built-in Igor atom type instance
            </summary>
    </member>
    <member name="T:Igor.UE4.AST.BuiltInType.Json">
      <summary>
            Built-in Igor json type instance
            </summary>
    </member>
    <member name="T:Igor.UE4.AST.BuiltInType.List">
      <summary>
            Built-in Igor list type instance
            </summary>
    </member>
    <member name="T:Igor.UE4.AST.BuiltInType.Dict">
      <summary>
            Built-in Igor dict type instance
            </summary>
    </member>
    <member name="T:Igor.UE4.AST.BuiltInType.Optional">
      <summary>
            Built-in Igor optional type instance (?T)
            </summary>
    </member>
    <member name="T:Igor.UE4.AST.BuiltInType.Flags">
      <summary>
            Built-in Igor flags type instance
            </summary>
    </member>
    <member name="T:Igor.UE4.AST.BuiltInType.OneOf">
      <summary>
            Built-in Igor oneof type instance
            </summary>
    </member>
    <member name="T:Igor.UE4.AST.AstMapper">
      <summary>
            Maps Igor.Declarations namespace classes to AST namespace classes.
            </summary>
    </member>
    <member name="M:Igor.UE4.AST.AstMapper.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Igor.UE4.AST.AstMapper.Map(System.Collections.Generic.IReadOnlyList{Igor.Declarations.Module})">
      <summary>
            Maps Igor.Declarations namespace classes to AST namespace classes.
            </summary>
      <param name="modules">Module declarations parse tree</param>
      <returns>Modules AST</returns>
    </member>
    <member name="T:Igor.Lua.Target">
      <summary>
            ITarget implementation for Lua language
            </summary>
    </member>
    <member name="T:Igor.Lua.AST.IType">
      <summary>
            AST type marker interface
            </summary>
    </member>
    <member name="T:Igor.Lua.AST.IInterface">
      <summary>
            AST interface marker interface
            </summary>
    </member>
    <member name="T:Igor.Lua.AST.Statement">
      <summary>
            Base type for named AST declaration.
            Statements can host Igor attributes.
            </summary>
    </member>
    <member name="M:Igor.Lua.AST.Statement.ToString">
      <summary>
            String representation of this AST, for debug purposes
            </summary>
      <returns>String representation of this AST</returns>
    </member>
    <member name="M:Igor.Lua.AST.Statement.Error(System.String)">
      <summary>
            Report an error related to this statement declaration.
            </summary>
      <param name="message">Error description</param>
    </member>
    <member name="M:Igor.Lua.AST.Statement.Warning(System.String)">
      <summary>
            Report a warning related to this statement declaration.
            </summary>
      <param name="message">Warning description</param>
    </member>
    <member name="M:Igor.Lua.AST.Statement.Hint(System.String)">
      <summary>
            Report a hint related to this statement declaration.
            </summary>
      <param name="message">Hint description</param>
    </member>
    <member name="M:Igor.Lua.AST.Statement.Attribute``1(Igor.AttributeDescriptor{``0},``0)">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or default value if value is unset in Igor source or environment)
            </summary>
      <typeparam name="T">Attribute value type argument</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <param name="defaultValue">Default value</param>
      <returns>Attribute value or default</returns>
    </member>
    <member name="M:Igor.Lua.AST.Statement.Attribute``1(Igor.StructAttributeDescriptor{``0})">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or null if value is unset in Igor source or environment).
            This is a function overload for value/struct types: numbers, bools and enums.
            </summary>
      <typeparam name="T">Attribute value type argument (must be value/struct type)</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>Nullable attribute value (null if value is not found)</returns>
    </member>
    <member name="M:Igor.Lua.AST.Statement.Attribute``1(Igor.ClassAttributeDescriptor{``0})">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or null if value is unset in Igor source or environment).
            This is a function overload for reference/class types: strings and objects.
            </summary>
      <typeparam name="T">Attribute value type argument (must be reference/class type)</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>Attribute value (null if value is not found)</returns>
    </member>
    <member name="M:Igor.Lua.AST.Statement.ListAttribute``1(Igor.AttributeDescriptor{``0})">
      <summary>
            Get a list of all attribute values set for this AST statement or inherited using inheritance type defined by attribute descriptor.
            Empty list is returned if no values are found.
            </summary>
      <typeparam name="T">Attribute value type argument</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>List of found attribute values</returns>
    </member>
    <member name="P:Igor.Lua.AST.Statement.NestedHosts">
      <summary>
            List of nested declarations
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.Statement.Location">
      <summary>
            Declaration location in Igor source file
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.Statement.Attributes">
      <summary>
            The attribute collection. Obsolete and will be removed in future releases.
            Use Attribute or ListAttribute functions instead.
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.Statement.Name">
      <summary>
            Name of the entity defined by this declaration
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.Statement.Annotation">
      <summary>
            Annotation string (if present in Igor source file) or null (if not present)
            </summary>
    </member>
    <member name="T:Igor.Lua.AST.Module">
      <summary>
            Module AST
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.Module.Definitions">
      <summary>
            List of top-level definitions (forms)
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.Module.Enums">
      <summary>
            List of enum types declared in this module
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.Module.Structs">
      <summary>
            List of struct types (records, variants, interfaces) declared in this module
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.Module.Records">
      <summary>
            List of records declared in this module
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.Module.Types">
      <summary>
            List of all types declared in this module
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.Module.Services">
      <summary>
            List of services declared in this module
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.Module.WebServices">
      <summary>
            List of web services declared in this module
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.Module.Tables">
      <summary>
            List of tables declared in this module
            </summary>
    </member>
    <member name="T:Igor.Lua.AST.Form">
      <summary>
            Base AST type for top-level declarations (forms) contained in modules: enums, records, services, etc.
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.Form.Module">
      <summary>
            AST of module in which this form is declared
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.Form.jsonEnabled">
      <summary>
            Is JSON serialization enabled (the value of json.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.Form.binaryEnabled">
      <summary>
            Is binary serialization enabled (the value of binary.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.Form.xmlEnabled">
      <summary>
            Is XML serialization enabled (the value of xml.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.Form.stringEnabled">
      <summary>
            Is string serialization enabled (the value of string.enabled attribute)
            </summary>
    </member>
    <member name="T:Igor.Lua.AST.TypeForm">
      <summary>
            Base AST type for type declarations
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.TypeForm.Args">
      <summary>
            List of generic arguments (type variables)
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.TypeForm.Arity">
      <summary>
            Generic arity (number of type arguments)
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.TypeForm.IsGeneric">
      <summary>
            Is type generic
            </summary>
    </member>
    <member name="T:Igor.Lua.AST.GenericArgument">
      <summary>
            Generic argument type variable
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.GenericArgument.Location">
      <summary>
            Location in Igor source file
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.GenericArgument.Name">
      <summary>
            Name of generic type variable
            </summary>
    </member>
    <member name="T:Igor.Lua.AST.EnumField">
      <summary>
            Enum field declaration AST
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.EnumField.Value">
      <summary>
            Integer value of enum field
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.EnumField.Enum">
      <summary>
            Enum AST this field belongs to
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.EnumField.jsonFieldNotation">
      <summary>
            Notation used to translate Igor name to JSON string values (the value of json.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.EnumField.jsonKey">
      <summary>
            JSON serialization value for this enum field, translated using jsonFieldNotation or overriden by json.key attribute
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.EnumField.xmlEnumNotation">
      <summary>
            Notation used to translate Igor name to XML string values (the value of xml.enum_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.EnumField.xmlName">
      <summary>
            XML serialization value for this enum field, translated using xmlEnumNotation or overriden by xml.name attribute
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.EnumField.stringFieldNotation">
      <summary>
            Notation used to translate Igor name to string values (the value of string.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.EnumField.stringValue">
      <summary>
            String serialization value for this enum field, translated using xmlEnumNotation or overriden by string.value attribute
            </summary>
    </member>
    <member name="T:Igor.Lua.AST.EnumForm">
      <summary>
            Enum type declaration AST
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.EnumForm.IntType">
      <summary>
            Base integer type. This is the minimum range integer type that includes all field values, or the value of int_type attribute.
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.EnumForm.Flags">
      <summary>
            Enum represents bit flags
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.EnumForm.jsonNumber">
      <summary>
            Serialize enum values to JSON as integer numbers
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.EnumForm.Fields">
      <summary>
            The list of enum fields
            </summary>
    </member>
    <member name="T:Igor.Lua.AST.RecordField">
      <summary>
            Record, variant or interface field declaration AST
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.RecordField.Type">
      <summary>
            Type AST of this field
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.RecordField.DefaultValue">
      <summary>
            Default value of the field
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.RecordField.IsTag">
      <summary>
            Is the field a variant tag?
            When deserializing variants, tag field is deserialized first, to define which record it is.
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.RecordField.IsInherited">
      <summary>
            Is the field inherited from the ancestor variant?
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.RecordField.IsLocal">
      <summary>
            Is the field local (not inherited)?
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.RecordField.Struct">
      <summary>
            Struct (record, interface or variant) this field belongs to.
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.RecordField.binaryIgnore">
      <summary>
            Should this field be skipped during binary serialization (value of binary.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.RecordField.jsonFieldNotation">
      <summary>
            Notation used to translate Igor name to JSON string values (value of json.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.RecordField.jsonKey">
      <summary>
            JSON serialization object key for this field, translated using jsonFieldNotation or overriden by json.key attribute
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.RecordField.jsonIgnore">
      <summary>
            Should this field be skipped during JSON serialization (value of json.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.RecordField.xmlIgnore">
      <summary>
            Should this field be skipped during XML serialization (value of xml.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.RecordField.Default">
      <summary>
            Default value AST (or null if there's no default value)
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.RecordField.HasDefault">
      <summary>
            Does the field has default value?
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.RecordField.IsOptional">
      <summary>
            Is field optional?
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.RecordField.NonOptType">
      <summary>
            Returns non-optional type of this field
            </summary>
    </member>
    <member name="T:Igor.Lua.AST.StructForm">
      <summary>
            Base AST type for struct declarations: records, variants and interfaces
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.StructForm.Fields">
      <summary>
            List of all fields (both local and inherited)
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.StructForm.Ancestor">
      <summary>
            Ancestor variant (or null if there's no ancestor)
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.StructForm.Interfaces">
      <summary>
            List of interfaces this struct implements
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.StructForm.TagField">
      <summary>
            Variant tag field (or null if there's no tag field)
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.StructForm.IsException">
      <summary>
            Is this struct an exception?
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.StructForm.jsonSerializedFields">
      <summary>
            List of fields included into JSON serialization
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.StructForm.jsonNulls">
      <summary>
            Whether generated JSON serializer should include nulls for optional fields.
            If this property is not set, serializer may prefer the most convenient or efficient implementation.
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.StructForm.binarySerializedFields">
      <summary>
            List of fields included into binary serialization
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.StructForm.xmlSerializedFields">
      <summary>
            List of fields included into XML serialization
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.StructForm.IsPatch">
      <summary>
            Is it a patch record (value of patch_record attribute)?
            </summary>
    </member>
    <member name="T:Igor.Lua.AST.RecordForm">
      <summary>
            Record declaration AST
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.RecordForm.TagValue">
      <summary>
            Tag field value for this record
            </summary>
    </member>
    <member name="T:Igor.Lua.AST.InterfaceForm">
      <summary>
            Interface declaration AST
            </summary>
    </member>
    <member name="T:Igor.Lua.AST.VariantForm">
      <summary>
            Variant declaration AST
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.VariantForm.Descendants">
      <summary>
            List of direct descendants (both records and variants)
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.VariantForm.Records">
      <summary>
            List of all record descendants, both direct and indirect
            </summary>
    </member>
    <member name="T:Igor.Lua.AST.UnionClause">
      <summary>
            Union clause declaration AST
            </summary>
    </member>
    <member name="T:Igor.Lua.AST.UnionForm">
      <summary>
            Union type declaration AST
            </summary>
    </member>
    <member name="T:Igor.Lua.AST.DefineForm">
      <summary>
            Alias (define) type declaration AST
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.DefineForm.Type">
      <summary>
            Alias target type. This define type is defined as an alias for that type.
            </summary>
    </member>
    <member name="T:Igor.Lua.AST.FunctionArgument">
      <summary>
            Service function argument AST
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.FunctionArgument.Name">
      <summary>
            Argument name
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.FunctionArgument.Type">
      <summary>
            Argument type
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.FunctionArgument.Function">
      <summary>
            Function AST this argument belongs to
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.FunctionArgument.Index">
      <summary>
            Zero-based index of this argument
            </summary>
    </member>
    <member name="T:Igor.Lua.AST.FunctionThrow">
      <summary>
            AST of reference to exception thrown by service functions
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.FunctionThrow.Exception">
      <summary>
            Thrown exception AST exception record
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.FunctionThrow.Id">
      <summary>
            Unique integer ID for serialization
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.FunctionThrow.Function">
      <summary>
            Function AST
            </summary>
    </member>
    <member name="T:Igor.Lua.AST.ServiceFunction">
      <summary>
            Service function declaration AST
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.ServiceFunction.Direction">
      <summary>
            Function direction (c-&gt;s or s-&gt;c)
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.ServiceFunction.Arguments">
      <summary>
            List of function arguments
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.ServiceFunction.ReturnArguments">
      <summary>
            List of returned result arguments. Null if function is not an RPC.
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.ServiceFunction.Throws">
      <summary>
            List of thrown exception references
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.ServiceFunction.Index">
      <summary>
            Function index in the service
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.ServiceFunction.Service">
      <summary>
            Service AST this function belongs to
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.ServiceFunction.IsRpc">
      <summary>
            Is function an RPC?
            </summary>
    </member>
    <member name="T:Igor.Lua.AST.ServiceForm">
      <summary>
            Service declaration AST
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.ServiceForm.Functions">
      <summary>
            List of functions
            </summary>
    </member>
    <member name="T:Igor.Lua.AST.WebServiceForm">
      <summary>
            Web service declaration AST
            </summary>
    </member>
    <member name="T:Igor.Lua.AST.WebResource">
      <summary>
            Web resource declaration AST
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.WebResource.WebService">
      <summary>
            Web service AST where this resource is defined
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.WebResource.Path">
      <summary>
            List of URL path segments
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.WebResource.Query">
      <summary>
            List of URL query parameters
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.WebResource.Method">
      <summary>
            HTTP method
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.WebResource.Responses">
      <summary>
            List of possible responses
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.WebResource.RequestHeaders">
      <summary>
            List of request headers
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.WebResource.RequestContent">
      <summary>
            Request content AST, if available. Can be null if request has no body.
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.WebResource.RequestBodyType">
      <summary>
            Request body type AST. Can be null if request has no body.
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.WebContent.Type">
      <summary>
            Content Type
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.WebContent.Format">
      <summary>
            Data format of the content type
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.WebContent.Resource">
      <summary>
            Resource this content belongs to
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.WebContent.Var">
      <summary>
            Content variable. May be null, if only type was provided
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.WebContent.Annotation">
      <summary>
            Annotation string (if present in Igor source file) or null (if not present)
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.WebHeader.Name">
      <summary>
            Header name.
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.WebHeader.StaticValue">
      <summary>
            Static header value. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.WebHeader.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.WebHeader.IsStatic">
      <summary>
            True if header has a static value.
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.WebPathSegment.StaticValue">
      <summary>
            Static string segment. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.WebPathSegment.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.WebPathSegment.IsStatic">
      <summary>
            True if this segment is a static segment.
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.WebQueryParameter.StaticValue">
      <summary>
            Static query parameter value. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.WebQueryParameter.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.WebQueryParameter.IsStatic">
      <summary>
            True if query parameter has a static value.
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.WebQueryParameter.Format">
      <summary>
            Data format for query variable
            </summary>
    </member>
    <member name="T:Igor.Lua.AST.GenericType">
      <summary>
            Generic type instance AST
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.GenericType.Prototype">
      <summary>
            Generic type prototype declaration AST
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.GenericType.Args">
      <summary>
            Generic type arguments
            </summary>
    </member>
    <member name="T:Igor.Lua.AST.GenericInterface">
      <summary>
            Generic interface instance AST
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.GenericInterface.Prototype">
      <summary>
            Generic interface prototype declaration AST
            </summary>
    </member>
    <member name="P:Igor.Lua.AST.GenericInterface.Args">
      <summary>
            Generic type arguments
            </summary>
    </member>
    <member name="T:Igor.Lua.AST.BuiltInType">
      <summary>
            Igor built-in type instances
            </summary>
    </member>
    <member name="T:Igor.Lua.AST.BuiltInType.Bool">
      <summary>
            Built-in Igor bool type instance
            </summary>
    </member>
    <member name="T:Igor.Lua.AST.BuiltInType.Integer">
      <summary>
            Built-in Igor integer type instance
            </summary>
    </member>
    <member name="T:Igor.Lua.AST.BuiltInType.Float">
      <summary>
            Built-in Igor float type instance
            </summary>
    </member>
    <member name="T:Igor.Lua.AST.BuiltInType.String">
      <summary>
            Built-in Igor string type instance
            </summary>
    </member>
    <member name="T:Igor.Lua.AST.BuiltInType.Binary">
      <summary>
            Built-in Igor binary type instance
            </summary>
    </member>
    <member name="T:Igor.Lua.AST.BuiltInType.Atom">
      <summary>
            Built-in Igor atom type instance
            </summary>
    </member>
    <member name="T:Igor.Lua.AST.BuiltInType.Json">
      <summary>
            Built-in Igor json type instance
            </summary>
    </member>
    <member name="T:Igor.Lua.AST.BuiltInType.List">
      <summary>
            Built-in Igor list type instance
            </summary>
    </member>
    <member name="T:Igor.Lua.AST.BuiltInType.Dict">
      <summary>
            Built-in Igor dict type instance
            </summary>
    </member>
    <member name="T:Igor.Lua.AST.BuiltInType.Optional">
      <summary>
            Built-in Igor optional type instance (?T)
            </summary>
    </member>
    <member name="T:Igor.Lua.AST.BuiltInType.Flags">
      <summary>
            Built-in Igor flags type instance
            </summary>
    </member>
    <member name="T:Igor.Lua.AST.BuiltInType.OneOf">
      <summary>
            Built-in Igor oneof type instance
            </summary>
    </member>
    <member name="T:Igor.Lua.AST.AstMapper">
      <summary>
            Maps Igor.Declarations namespace classes to AST namespace classes.
            </summary>
    </member>
    <member name="M:Igor.Lua.AST.AstMapper.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Igor.Lua.AST.AstMapper.Map(System.Collections.Generic.IReadOnlyList{Igor.Declarations.Module})">
      <summary>
            Maps Igor.Declarations namespace classes to AST namespace classes.
            </summary>
      <param name="modules">Module declarations parse tree</param>
      <returns>Modules AST</returns>
    </member>
    <member name="T:Igor.Go.Target">
      <summary>
            ITarget implementation for Go language
            </summary>
    </member>
    <member name="T:Igor.Go.AST.IType">
      <summary>
            AST type marker interface
            </summary>
    </member>
    <member name="T:Igor.Go.AST.IInterface">
      <summary>
            AST interface marker interface
            </summary>
    </member>
    <member name="T:Igor.Go.AST.Statement">
      <summary>
            Base type for named AST declaration.
            Statements can host Igor attributes.
            </summary>
    </member>
    <member name="M:Igor.Go.AST.Statement.ToString">
      <summary>
            String representation of this AST, for debug purposes
            </summary>
      <returns>String representation of this AST</returns>
    </member>
    <member name="M:Igor.Go.AST.Statement.Error(System.String)">
      <summary>
            Report an error related to this statement declaration.
            </summary>
      <param name="message">Error description</param>
    </member>
    <member name="M:Igor.Go.AST.Statement.Warning(System.String)">
      <summary>
            Report a warning related to this statement declaration.
            </summary>
      <param name="message">Warning description</param>
    </member>
    <member name="M:Igor.Go.AST.Statement.Hint(System.String)">
      <summary>
            Report a hint related to this statement declaration.
            </summary>
      <param name="message">Hint description</param>
    </member>
    <member name="M:Igor.Go.AST.Statement.Attribute``1(Igor.AttributeDescriptor{``0},``0)">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or default value if value is unset in Igor source or environment)
            </summary>
      <typeparam name="T">Attribute value type argument</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <param name="defaultValue">Default value</param>
      <returns>Attribute value or default</returns>
    </member>
    <member name="M:Igor.Go.AST.Statement.Attribute``1(Igor.StructAttributeDescriptor{``0})">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or null if value is unset in Igor source or environment).
            This is a function overload for value/struct types: numbers, bools and enums.
            </summary>
      <typeparam name="T">Attribute value type argument (must be value/struct type)</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>Nullable attribute value (null if value is not found)</returns>
    </member>
    <member name="M:Igor.Go.AST.Statement.Attribute``1(Igor.ClassAttributeDescriptor{``0})">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or null if value is unset in Igor source or environment).
            This is a function overload for reference/class types: strings and objects.
            </summary>
      <typeparam name="T">Attribute value type argument (must be reference/class type)</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>Attribute value (null if value is not found)</returns>
    </member>
    <member name="M:Igor.Go.AST.Statement.ListAttribute``1(Igor.AttributeDescriptor{``0})">
      <summary>
            Get a list of all attribute values set for this AST statement or inherited using inheritance type defined by attribute descriptor.
            Empty list is returned if no values are found.
            </summary>
      <typeparam name="T">Attribute value type argument</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>List of found attribute values</returns>
    </member>
    <member name="P:Igor.Go.AST.Statement.NestedHosts">
      <summary>
            List of nested declarations
            </summary>
    </member>
    <member name="P:Igor.Go.AST.Statement.Location">
      <summary>
            Declaration location in Igor source file
            </summary>
    </member>
    <member name="P:Igor.Go.AST.Statement.Attributes">
      <summary>
            The attribute collection. Obsolete and will be removed in future releases.
            Use Attribute or ListAttribute functions instead.
            </summary>
    </member>
    <member name="P:Igor.Go.AST.Statement.Name">
      <summary>
            Name of the entity defined by this declaration
            </summary>
    </member>
    <member name="P:Igor.Go.AST.Statement.Annotation">
      <summary>
            Annotation string (if present in Igor source file) or null (if not present)
            </summary>
    </member>
    <member name="T:Igor.Go.AST.Module">
      <summary>
            Module AST
            </summary>
    </member>
    <member name="P:Igor.Go.AST.Module.Definitions">
      <summary>
            List of top-level definitions (forms)
            </summary>
    </member>
    <member name="P:Igor.Go.AST.Module.Enums">
      <summary>
            List of enum types declared in this module
            </summary>
    </member>
    <member name="P:Igor.Go.AST.Module.Structs">
      <summary>
            List of struct types (records, variants, interfaces) declared in this module
            </summary>
    </member>
    <member name="P:Igor.Go.AST.Module.Records">
      <summary>
            List of records declared in this module
            </summary>
    </member>
    <member name="P:Igor.Go.AST.Module.Types">
      <summary>
            List of all types declared in this module
            </summary>
    </member>
    <member name="P:Igor.Go.AST.Module.Services">
      <summary>
            List of services declared in this module
            </summary>
    </member>
    <member name="P:Igor.Go.AST.Module.WebServices">
      <summary>
            List of web services declared in this module
            </summary>
    </member>
    <member name="P:Igor.Go.AST.Module.Tables">
      <summary>
            List of tables declared in this module
            </summary>
    </member>
    <member name="T:Igor.Go.AST.Form">
      <summary>
            Base AST type for top-level declarations (forms) contained in modules: enums, records, services, etc.
            </summary>
    </member>
    <member name="P:Igor.Go.AST.Form.Module">
      <summary>
            AST of module in which this form is declared
            </summary>
    </member>
    <member name="P:Igor.Go.AST.Form.jsonEnabled">
      <summary>
            Is JSON serialization enabled (the value of json.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.Go.AST.Form.binaryEnabled">
      <summary>
            Is binary serialization enabled (the value of binary.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.Go.AST.Form.xmlEnabled">
      <summary>
            Is XML serialization enabled (the value of xml.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.Go.AST.Form.stringEnabled">
      <summary>
            Is string serialization enabled (the value of string.enabled attribute)
            </summary>
    </member>
    <member name="T:Igor.Go.AST.TypeForm">
      <summary>
            Base AST type for type declarations
            </summary>
    </member>
    <member name="P:Igor.Go.AST.TypeForm.Args">
      <summary>
            List of generic arguments (type variables)
            </summary>
    </member>
    <member name="P:Igor.Go.AST.TypeForm.Arity">
      <summary>
            Generic arity (number of type arguments)
            </summary>
    </member>
    <member name="P:Igor.Go.AST.TypeForm.IsGeneric">
      <summary>
            Is type generic
            </summary>
    </member>
    <member name="T:Igor.Go.AST.GenericArgument">
      <summary>
            Generic argument type variable
            </summary>
    </member>
    <member name="P:Igor.Go.AST.GenericArgument.Location">
      <summary>
            Location in Igor source file
            </summary>
    </member>
    <member name="P:Igor.Go.AST.GenericArgument.Name">
      <summary>
            Name of generic type variable
            </summary>
    </member>
    <member name="T:Igor.Go.AST.EnumField">
      <summary>
            Enum field declaration AST
            </summary>
    </member>
    <member name="P:Igor.Go.AST.EnumField.Value">
      <summary>
            Integer value of enum field
            </summary>
    </member>
    <member name="P:Igor.Go.AST.EnumField.Enum">
      <summary>
            Enum AST this field belongs to
            </summary>
    </member>
    <member name="P:Igor.Go.AST.EnumField.jsonFieldNotation">
      <summary>
            Notation used to translate Igor name to JSON string values (the value of json.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.Go.AST.EnumField.jsonKey">
      <summary>
            JSON serialization value for this enum field, translated using jsonFieldNotation or overriden by json.key attribute
            </summary>
    </member>
    <member name="P:Igor.Go.AST.EnumField.xmlEnumNotation">
      <summary>
            Notation used to translate Igor name to XML string values (the value of xml.enum_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.Go.AST.EnumField.xmlName">
      <summary>
            XML serialization value for this enum field, translated using xmlEnumNotation or overriden by xml.name attribute
            </summary>
    </member>
    <member name="P:Igor.Go.AST.EnumField.stringFieldNotation">
      <summary>
            Notation used to translate Igor name to string values (the value of string.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.Go.AST.EnumField.stringValue">
      <summary>
            String serialization value for this enum field, translated using xmlEnumNotation or overriden by string.value attribute
            </summary>
    </member>
    <member name="T:Igor.Go.AST.EnumForm">
      <summary>
            Enum type declaration AST
            </summary>
    </member>
    <member name="P:Igor.Go.AST.EnumForm.IntType">
      <summary>
            Base integer type. This is the minimum range integer type that includes all field values, or the value of int_type attribute.
            </summary>
    </member>
    <member name="P:Igor.Go.AST.EnumForm.Flags">
      <summary>
            Enum represents bit flags
            </summary>
    </member>
    <member name="P:Igor.Go.AST.EnumForm.jsonNumber">
      <summary>
            Serialize enum values to JSON as integer numbers
            </summary>
    </member>
    <member name="P:Igor.Go.AST.EnumForm.Fields">
      <summary>
            The list of enum fields
            </summary>
    </member>
    <member name="T:Igor.Go.AST.RecordField">
      <summary>
            Record, variant or interface field declaration AST
            </summary>
    </member>
    <member name="P:Igor.Go.AST.RecordField.Type">
      <summary>
            Type AST of this field
            </summary>
    </member>
    <member name="P:Igor.Go.AST.RecordField.DefaultValue">
      <summary>
            Default value of the field
            </summary>
    </member>
    <member name="P:Igor.Go.AST.RecordField.IsTag">
      <summary>
            Is the field a variant tag?
            When deserializing variants, tag field is deserialized first, to define which record it is.
            </summary>
    </member>
    <member name="P:Igor.Go.AST.RecordField.IsInherited">
      <summary>
            Is the field inherited from the ancestor variant?
            </summary>
    </member>
    <member name="P:Igor.Go.AST.RecordField.IsLocal">
      <summary>
            Is the field local (not inherited)?
            </summary>
    </member>
    <member name="P:Igor.Go.AST.RecordField.Struct">
      <summary>
            Struct (record, interface or variant) this field belongs to.
            </summary>
    </member>
    <member name="P:Igor.Go.AST.RecordField.binaryIgnore">
      <summary>
            Should this field be skipped during binary serialization (value of binary.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.Go.AST.RecordField.jsonFieldNotation">
      <summary>
            Notation used to translate Igor name to JSON string values (value of json.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.Go.AST.RecordField.jsonKey">
      <summary>
            JSON serialization object key for this field, translated using jsonFieldNotation or overriden by json.key attribute
            </summary>
    </member>
    <member name="P:Igor.Go.AST.RecordField.jsonIgnore">
      <summary>
            Should this field be skipped during JSON serialization (value of json.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.Go.AST.RecordField.xmlIgnore">
      <summary>
            Should this field be skipped during XML serialization (value of xml.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.Go.AST.RecordField.Default">
      <summary>
            Default value AST (or null if there's no default value)
            </summary>
    </member>
    <member name="P:Igor.Go.AST.RecordField.HasDefault">
      <summary>
            Does the field has default value?
            </summary>
    </member>
    <member name="P:Igor.Go.AST.RecordField.IsOptional">
      <summary>
            Is field optional?
            </summary>
    </member>
    <member name="P:Igor.Go.AST.RecordField.NonOptType">
      <summary>
            Returns non-optional type of this field
            </summary>
    </member>
    <member name="T:Igor.Go.AST.StructForm">
      <summary>
            Base AST type for struct declarations: records, variants and interfaces
            </summary>
    </member>
    <member name="P:Igor.Go.AST.StructForm.Fields">
      <summary>
            List of all fields (both local and inherited)
            </summary>
    </member>
    <member name="P:Igor.Go.AST.StructForm.Ancestor">
      <summary>
            Ancestor variant (or null if there's no ancestor)
            </summary>
    </member>
    <member name="P:Igor.Go.AST.StructForm.Interfaces">
      <summary>
            List of interfaces this struct implements
            </summary>
    </member>
    <member name="P:Igor.Go.AST.StructForm.TagField">
      <summary>
            Variant tag field (or null if there's no tag field)
            </summary>
    </member>
    <member name="P:Igor.Go.AST.StructForm.IsException">
      <summary>
            Is this struct an exception?
            </summary>
    </member>
    <member name="P:Igor.Go.AST.StructForm.jsonSerializedFields">
      <summary>
            List of fields included into JSON serialization
            </summary>
    </member>
    <member name="P:Igor.Go.AST.StructForm.jsonNulls">
      <summary>
            Whether generated JSON serializer should include nulls for optional fields.
            If this property is not set, serializer may prefer the most convenient or efficient implementation.
            </summary>
    </member>
    <member name="P:Igor.Go.AST.StructForm.binarySerializedFields">
      <summary>
            List of fields included into binary serialization
            </summary>
    </member>
    <member name="P:Igor.Go.AST.StructForm.xmlSerializedFields">
      <summary>
            List of fields included into XML serialization
            </summary>
    </member>
    <member name="P:Igor.Go.AST.StructForm.IsPatch">
      <summary>
            Is it a patch record (value of patch_record attribute)?
            </summary>
    </member>
    <member name="T:Igor.Go.AST.RecordForm">
      <summary>
            Record declaration AST
            </summary>
    </member>
    <member name="P:Igor.Go.AST.RecordForm.TagValue">
      <summary>
            Tag field value for this record
            </summary>
    </member>
    <member name="T:Igor.Go.AST.InterfaceForm">
      <summary>
            Interface declaration AST
            </summary>
    </member>
    <member name="T:Igor.Go.AST.VariantForm">
      <summary>
            Variant declaration AST
            </summary>
    </member>
    <member name="P:Igor.Go.AST.VariantForm.Descendants">
      <summary>
            List of direct descendants (both records and variants)
            </summary>
    </member>
    <member name="P:Igor.Go.AST.VariantForm.Records">
      <summary>
            List of all record descendants, both direct and indirect
            </summary>
    </member>
    <member name="T:Igor.Go.AST.UnionClause">
      <summary>
            Union clause declaration AST
            </summary>
    </member>
    <member name="T:Igor.Go.AST.UnionForm">
      <summary>
            Union type declaration AST
            </summary>
    </member>
    <member name="T:Igor.Go.AST.DefineForm">
      <summary>
            Alias (define) type declaration AST
            </summary>
    </member>
    <member name="P:Igor.Go.AST.DefineForm.Type">
      <summary>
            Alias target type. This define type is defined as an alias for that type.
            </summary>
    </member>
    <member name="T:Igor.Go.AST.FunctionArgument">
      <summary>
            Service function argument AST
            </summary>
    </member>
    <member name="P:Igor.Go.AST.FunctionArgument.Name">
      <summary>
            Argument name
            </summary>
    </member>
    <member name="P:Igor.Go.AST.FunctionArgument.Type">
      <summary>
            Argument type
            </summary>
    </member>
    <member name="P:Igor.Go.AST.FunctionArgument.Function">
      <summary>
            Function AST this argument belongs to
            </summary>
    </member>
    <member name="P:Igor.Go.AST.FunctionArgument.Index">
      <summary>
            Zero-based index of this argument
            </summary>
    </member>
    <member name="T:Igor.Go.AST.FunctionThrow">
      <summary>
            AST of reference to exception thrown by service functions
            </summary>
    </member>
    <member name="P:Igor.Go.AST.FunctionThrow.Exception">
      <summary>
            Thrown exception AST exception record
            </summary>
    </member>
    <member name="P:Igor.Go.AST.FunctionThrow.Id">
      <summary>
            Unique integer ID for serialization
            </summary>
    </member>
    <member name="P:Igor.Go.AST.FunctionThrow.Function">
      <summary>
            Function AST
            </summary>
    </member>
    <member name="T:Igor.Go.AST.ServiceFunction">
      <summary>
            Service function declaration AST
            </summary>
    </member>
    <member name="P:Igor.Go.AST.ServiceFunction.Direction">
      <summary>
            Function direction (c-&gt;s or s-&gt;c)
            </summary>
    </member>
    <member name="P:Igor.Go.AST.ServiceFunction.Arguments">
      <summary>
            List of function arguments
            </summary>
    </member>
    <member name="P:Igor.Go.AST.ServiceFunction.ReturnArguments">
      <summary>
            List of returned result arguments. Null if function is not an RPC.
            </summary>
    </member>
    <member name="P:Igor.Go.AST.ServiceFunction.Throws">
      <summary>
            List of thrown exception references
            </summary>
    </member>
    <member name="P:Igor.Go.AST.ServiceFunction.Index">
      <summary>
            Function index in the service
            </summary>
    </member>
    <member name="P:Igor.Go.AST.ServiceFunction.Service">
      <summary>
            Service AST this function belongs to
            </summary>
    </member>
    <member name="P:Igor.Go.AST.ServiceFunction.IsRpc">
      <summary>
            Is function an RPC?
            </summary>
    </member>
    <member name="T:Igor.Go.AST.ServiceForm">
      <summary>
            Service declaration AST
            </summary>
    </member>
    <member name="P:Igor.Go.AST.ServiceForm.Functions">
      <summary>
            List of functions
            </summary>
    </member>
    <member name="T:Igor.Go.AST.WebServiceForm">
      <summary>
            Web service declaration AST
            </summary>
    </member>
    <member name="T:Igor.Go.AST.WebResource">
      <summary>
            Web resource declaration AST
            </summary>
    </member>
    <member name="P:Igor.Go.AST.WebResource.WebService">
      <summary>
            Web service AST where this resource is defined
            </summary>
    </member>
    <member name="P:Igor.Go.AST.WebResource.Path">
      <summary>
            List of URL path segments
            </summary>
    </member>
    <member name="P:Igor.Go.AST.WebResource.Query">
      <summary>
            List of URL query parameters
            </summary>
    </member>
    <member name="P:Igor.Go.AST.WebResource.Method">
      <summary>
            HTTP method
            </summary>
    </member>
    <member name="P:Igor.Go.AST.WebResource.Responses">
      <summary>
            List of possible responses
            </summary>
    </member>
    <member name="P:Igor.Go.AST.WebResource.RequestHeaders">
      <summary>
            List of request headers
            </summary>
    </member>
    <member name="P:Igor.Go.AST.WebResource.RequestContent">
      <summary>
            Request content AST, if available. Can be null if request has no body.
            </summary>
    </member>
    <member name="P:Igor.Go.AST.WebResource.RequestBodyType">
      <summary>
            Request body type AST. Can be null if request has no body.
            </summary>
    </member>
    <member name="P:Igor.Go.AST.WebContent.Type">
      <summary>
            Content Type
            </summary>
    </member>
    <member name="P:Igor.Go.AST.WebContent.Format">
      <summary>
            Data format of the content type
            </summary>
    </member>
    <member name="P:Igor.Go.AST.WebContent.Resource">
      <summary>
            Resource this content belongs to
            </summary>
    </member>
    <member name="P:Igor.Go.AST.WebContent.Var">
      <summary>
            Content variable. May be null, if only type was provided
            </summary>
    </member>
    <member name="P:Igor.Go.AST.WebContent.Annotation">
      <summary>
            Annotation string (if present in Igor source file) or null (if not present)
            </summary>
    </member>
    <member name="P:Igor.Go.AST.WebHeader.Name">
      <summary>
            Header name.
            </summary>
    </member>
    <member name="P:Igor.Go.AST.WebHeader.StaticValue">
      <summary>
            Static header value. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Go.AST.WebHeader.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Go.AST.WebHeader.IsStatic">
      <summary>
            True if header has a static value.
            </summary>
    </member>
    <member name="P:Igor.Go.AST.WebPathSegment.StaticValue">
      <summary>
            Static string segment. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Go.AST.WebPathSegment.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Go.AST.WebPathSegment.IsStatic">
      <summary>
            True if this segment is a static segment.
            </summary>
    </member>
    <member name="P:Igor.Go.AST.WebQueryParameter.StaticValue">
      <summary>
            Static query parameter value. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Go.AST.WebQueryParameter.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Go.AST.WebQueryParameter.IsStatic">
      <summary>
            True if query parameter has a static value.
            </summary>
    </member>
    <member name="P:Igor.Go.AST.WebQueryParameter.Format">
      <summary>
            Data format for query variable
            </summary>
    </member>
    <member name="T:Igor.Go.AST.GenericType">
      <summary>
            Generic type instance AST
            </summary>
    </member>
    <member name="P:Igor.Go.AST.GenericType.Prototype">
      <summary>
            Generic type prototype declaration AST
            </summary>
    </member>
    <member name="P:Igor.Go.AST.GenericType.Args">
      <summary>
            Generic type arguments
            </summary>
    </member>
    <member name="T:Igor.Go.AST.GenericInterface">
      <summary>
            Generic interface instance AST
            </summary>
    </member>
    <member name="P:Igor.Go.AST.GenericInterface.Prototype">
      <summary>
            Generic interface prototype declaration AST
            </summary>
    </member>
    <member name="P:Igor.Go.AST.GenericInterface.Args">
      <summary>
            Generic type arguments
            </summary>
    </member>
    <member name="T:Igor.Go.AST.BuiltInType">
      <summary>
            Igor built-in type instances
            </summary>
    </member>
    <member name="T:Igor.Go.AST.BuiltInType.Bool">
      <summary>
            Built-in Igor bool type instance
            </summary>
    </member>
    <member name="T:Igor.Go.AST.BuiltInType.Integer">
      <summary>
            Built-in Igor integer type instance
            </summary>
    </member>
    <member name="T:Igor.Go.AST.BuiltInType.Float">
      <summary>
            Built-in Igor float type instance
            </summary>
    </member>
    <member name="T:Igor.Go.AST.BuiltInType.String">
      <summary>
            Built-in Igor string type instance
            </summary>
    </member>
    <member name="T:Igor.Go.AST.BuiltInType.Binary">
      <summary>
            Built-in Igor binary type instance
            </summary>
    </member>
    <member name="T:Igor.Go.AST.BuiltInType.Atom">
      <summary>
            Built-in Igor atom type instance
            </summary>
    </member>
    <member name="T:Igor.Go.AST.BuiltInType.Json">
      <summary>
            Built-in Igor json type instance
            </summary>
    </member>
    <member name="T:Igor.Go.AST.BuiltInType.List">
      <summary>
            Built-in Igor list type instance
            </summary>
    </member>
    <member name="T:Igor.Go.AST.BuiltInType.Dict">
      <summary>
            Built-in Igor dict type instance
            </summary>
    </member>
    <member name="T:Igor.Go.AST.BuiltInType.Optional">
      <summary>
            Built-in Igor optional type instance (?T)
            </summary>
    </member>
    <member name="T:Igor.Go.AST.BuiltInType.Flags">
      <summary>
            Built-in Igor flags type instance
            </summary>
    </member>
    <member name="T:Igor.Go.AST.BuiltInType.OneOf">
      <summary>
            Built-in Igor oneof type instance
            </summary>
    </member>
    <member name="T:Igor.Go.AST.AstMapper">
      <summary>
            Maps Igor.Declarations namespace classes to AST namespace classes.
            </summary>
    </member>
    <member name="M:Igor.Go.AST.AstMapper.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Igor.Go.AST.AstMapper.Map(System.Collections.Generic.IReadOnlyList{Igor.Declarations.Module})">
      <summary>
            Maps Igor.Declarations namespace classes to AST namespace classes.
            </summary>
      <param name="modules">Module declarations parse tree</param>
      <returns>Modules AST</returns>
    </member>
    <member name="T:Igor.Elixir.Target">
      <summary>
            ITarget implementation for Elixir language
            </summary>
    </member>
    <member name="T:Igor.Elixir.AST.IType">
      <summary>
            AST type marker interface
            </summary>
    </member>
    <member name="T:Igor.Elixir.AST.IInterface">
      <summary>
            AST interface marker interface
            </summary>
    </member>
    <member name="T:Igor.Elixir.AST.Statement">
      <summary>
            Base type for named AST declaration.
            Statements can host Igor attributes.
            </summary>
    </member>
    <member name="M:Igor.Elixir.AST.Statement.ToString">
      <summary>
            String representation of this AST, for debug purposes
            </summary>
      <returns>String representation of this AST</returns>
    </member>
    <member name="M:Igor.Elixir.AST.Statement.Error(System.String)">
      <summary>
            Report an error related to this statement declaration.
            </summary>
      <param name="message">Error description</param>
    </member>
    <member name="M:Igor.Elixir.AST.Statement.Warning(System.String)">
      <summary>
            Report a warning related to this statement declaration.
            </summary>
      <param name="message">Warning description</param>
    </member>
    <member name="M:Igor.Elixir.AST.Statement.Hint(System.String)">
      <summary>
            Report a hint related to this statement declaration.
            </summary>
      <param name="message">Hint description</param>
    </member>
    <member name="M:Igor.Elixir.AST.Statement.Attribute``1(Igor.AttributeDescriptor{``0},``0)">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or default value if value is unset in Igor source or environment)
            </summary>
      <typeparam name="T">Attribute value type argument</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <param name="defaultValue">Default value</param>
      <returns>Attribute value or default</returns>
    </member>
    <member name="M:Igor.Elixir.AST.Statement.Attribute``1(Igor.StructAttributeDescriptor{``0})">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or null if value is unset in Igor source or environment).
            This is a function overload for value/struct types: numbers, bools and enums.
            </summary>
      <typeparam name="T">Attribute value type argument (must be value/struct type)</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>Nullable attribute value (null if value is not found)</returns>
    </member>
    <member name="M:Igor.Elixir.AST.Statement.Attribute``1(Igor.ClassAttributeDescriptor{``0})">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or null if value is unset in Igor source or environment).
            This is a function overload for reference/class types: strings and objects.
            </summary>
      <typeparam name="T">Attribute value type argument (must be reference/class type)</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>Attribute value (null if value is not found)</returns>
    </member>
    <member name="M:Igor.Elixir.AST.Statement.ListAttribute``1(Igor.AttributeDescriptor{``0})">
      <summary>
            Get a list of all attribute values set for this AST statement or inherited using inheritance type defined by attribute descriptor.
            Empty list is returned if no values are found.
            </summary>
      <typeparam name="T">Attribute value type argument</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>List of found attribute values</returns>
    </member>
    <member name="P:Igor.Elixir.AST.Statement.NestedHosts">
      <summary>
            List of nested declarations
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.Statement.Location">
      <summary>
            Declaration location in Igor source file
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.Statement.Attributes">
      <summary>
            The attribute collection. Obsolete and will be removed in future releases.
            Use Attribute or ListAttribute functions instead.
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.Statement.Name">
      <summary>
            Name of the entity defined by this declaration
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.Statement.Annotation">
      <summary>
            Annotation string (if present in Igor source file) or null (if not present)
            </summary>
    </member>
    <member name="T:Igor.Elixir.AST.Module">
      <summary>
            Module AST
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.Module.Definitions">
      <summary>
            List of top-level definitions (forms)
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.Module.Enums">
      <summary>
            List of enum types declared in this module
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.Module.Structs">
      <summary>
            List of struct types (records, variants, interfaces) declared in this module
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.Module.Records">
      <summary>
            List of records declared in this module
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.Module.Types">
      <summary>
            List of all types declared in this module
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.Module.Services">
      <summary>
            List of services declared in this module
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.Module.WebServices">
      <summary>
            List of web services declared in this module
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.Module.Tables">
      <summary>
            List of tables declared in this module
            </summary>
    </member>
    <member name="T:Igor.Elixir.AST.Form">
      <summary>
            Base AST type for top-level declarations (forms) contained in modules: enums, records, services, etc.
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.Form.Module">
      <summary>
            AST of module in which this form is declared
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.Form.jsonEnabled">
      <summary>
            Is JSON serialization enabled (the value of json.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.Form.binaryEnabled">
      <summary>
            Is binary serialization enabled (the value of binary.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.Form.xmlEnabled">
      <summary>
            Is XML serialization enabled (the value of xml.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.Form.stringEnabled">
      <summary>
            Is string serialization enabled (the value of string.enabled attribute)
            </summary>
    </member>
    <member name="T:Igor.Elixir.AST.TypeForm">
      <summary>
            Base AST type for type declarations
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.TypeForm.Args">
      <summary>
            List of generic arguments (type variables)
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.TypeForm.Arity">
      <summary>
            Generic arity (number of type arguments)
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.TypeForm.IsGeneric">
      <summary>
            Is type generic
            </summary>
    </member>
    <member name="T:Igor.Elixir.AST.GenericArgument">
      <summary>
            Generic argument type variable
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.GenericArgument.Location">
      <summary>
            Location in Igor source file
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.GenericArgument.Name">
      <summary>
            Name of generic type variable
            </summary>
    </member>
    <member name="T:Igor.Elixir.AST.EnumField">
      <summary>
            Enum field declaration AST
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.EnumField.Value">
      <summary>
            Integer value of enum field
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.EnumField.Enum">
      <summary>
            Enum AST this field belongs to
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.EnumField.jsonFieldNotation">
      <summary>
            Notation used to translate Igor name to JSON string values (the value of json.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.EnumField.jsonKey">
      <summary>
            JSON serialization value for this enum field, translated using jsonFieldNotation or overriden by json.key attribute
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.EnumField.xmlEnumNotation">
      <summary>
            Notation used to translate Igor name to XML string values (the value of xml.enum_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.EnumField.xmlName">
      <summary>
            XML serialization value for this enum field, translated using xmlEnumNotation or overriden by xml.name attribute
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.EnumField.stringFieldNotation">
      <summary>
            Notation used to translate Igor name to string values (the value of string.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.EnumField.stringValue">
      <summary>
            String serialization value for this enum field, translated using xmlEnumNotation or overriden by string.value attribute
            </summary>
    </member>
    <member name="T:Igor.Elixir.AST.EnumForm">
      <summary>
            Enum type declaration AST
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.EnumForm.IntType">
      <summary>
            Base integer type. This is the minimum range integer type that includes all field values, or the value of int_type attribute.
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.EnumForm.Flags">
      <summary>
            Enum represents bit flags
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.EnumForm.jsonNumber">
      <summary>
            Serialize enum values to JSON as integer numbers
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.EnumForm.Fields">
      <summary>
            The list of enum fields
            </summary>
    </member>
    <member name="T:Igor.Elixir.AST.RecordField">
      <summary>
            Record, variant or interface field declaration AST
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.RecordField.Type">
      <summary>
            Type AST of this field
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.RecordField.DefaultValue">
      <summary>
            Default value of the field
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.RecordField.IsTag">
      <summary>
            Is the field a variant tag?
            When deserializing variants, tag field is deserialized first, to define which record it is.
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.RecordField.IsInherited">
      <summary>
            Is the field inherited from the ancestor variant?
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.RecordField.IsLocal">
      <summary>
            Is the field local (not inherited)?
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.RecordField.Struct">
      <summary>
            Struct (record, interface or variant) this field belongs to.
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.RecordField.binaryIgnore">
      <summary>
            Should this field be skipped during binary serialization (value of binary.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.RecordField.jsonFieldNotation">
      <summary>
            Notation used to translate Igor name to JSON string values (value of json.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.RecordField.jsonKey">
      <summary>
            JSON serialization object key for this field, translated using jsonFieldNotation or overriden by json.key attribute
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.RecordField.jsonIgnore">
      <summary>
            Should this field be skipped during JSON serialization (value of json.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.RecordField.xmlIgnore">
      <summary>
            Should this field be skipped during XML serialization (value of xml.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.RecordField.Default">
      <summary>
            Default value AST (or null if there's no default value)
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.RecordField.HasDefault">
      <summary>
            Does the field has default value?
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.RecordField.IsOptional">
      <summary>
            Is field optional?
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.RecordField.NonOptType">
      <summary>
            Returns non-optional type of this field
            </summary>
    </member>
    <member name="T:Igor.Elixir.AST.StructForm">
      <summary>
            Base AST type for struct declarations: records, variants and interfaces
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.StructForm.Fields">
      <summary>
            List of all fields (both local and inherited)
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.StructForm.Ancestor">
      <summary>
            Ancestor variant (or null if there's no ancestor)
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.StructForm.Interfaces">
      <summary>
            List of interfaces this struct implements
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.StructForm.TagField">
      <summary>
            Variant tag field (or null if there's no tag field)
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.StructForm.IsException">
      <summary>
            Is this struct an exception?
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.StructForm.jsonSerializedFields">
      <summary>
            List of fields included into JSON serialization
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.StructForm.jsonNulls">
      <summary>
            Whether generated JSON serializer should include nulls for optional fields.
            If this property is not set, serializer may prefer the most convenient or efficient implementation.
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.StructForm.binarySerializedFields">
      <summary>
            List of fields included into binary serialization
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.StructForm.xmlSerializedFields">
      <summary>
            List of fields included into XML serialization
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.StructForm.IsPatch">
      <summary>
            Is it a patch record (value of patch_record attribute)?
            </summary>
    </member>
    <member name="T:Igor.Elixir.AST.RecordForm">
      <summary>
            Record declaration AST
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.RecordForm.TagValue">
      <summary>
            Tag field value for this record
            </summary>
    </member>
    <member name="T:Igor.Elixir.AST.InterfaceForm">
      <summary>
            Interface declaration AST
            </summary>
    </member>
    <member name="T:Igor.Elixir.AST.VariantForm">
      <summary>
            Variant declaration AST
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.VariantForm.Descendants">
      <summary>
            List of direct descendants (both records and variants)
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.VariantForm.Records">
      <summary>
            List of all record descendants, both direct and indirect
            </summary>
    </member>
    <member name="T:Igor.Elixir.AST.UnionClause">
      <summary>
            Union clause declaration AST
            </summary>
    </member>
    <member name="T:Igor.Elixir.AST.UnionForm">
      <summary>
            Union type declaration AST
            </summary>
    </member>
    <member name="T:Igor.Elixir.AST.DefineForm">
      <summary>
            Alias (define) type declaration AST
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.DefineForm.Type">
      <summary>
            Alias target type. This define type is defined as an alias for that type.
            </summary>
    </member>
    <member name="T:Igor.Elixir.AST.FunctionArgument">
      <summary>
            Service function argument AST
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.FunctionArgument.Name">
      <summary>
            Argument name
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.FunctionArgument.Type">
      <summary>
            Argument type
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.FunctionArgument.Function">
      <summary>
            Function AST this argument belongs to
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.FunctionArgument.Index">
      <summary>
            Zero-based index of this argument
            </summary>
    </member>
    <member name="T:Igor.Elixir.AST.FunctionThrow">
      <summary>
            AST of reference to exception thrown by service functions
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.FunctionThrow.Exception">
      <summary>
            Thrown exception AST exception record
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.FunctionThrow.Id">
      <summary>
            Unique integer ID for serialization
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.FunctionThrow.Function">
      <summary>
            Function AST
            </summary>
    </member>
    <member name="T:Igor.Elixir.AST.ServiceFunction">
      <summary>
            Service function declaration AST
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.ServiceFunction.Direction">
      <summary>
            Function direction (c-&gt;s or s-&gt;c)
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.ServiceFunction.Arguments">
      <summary>
            List of function arguments
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.ServiceFunction.ReturnArguments">
      <summary>
            List of returned result arguments. Null if function is not an RPC.
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.ServiceFunction.Throws">
      <summary>
            List of thrown exception references
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.ServiceFunction.Index">
      <summary>
            Function index in the service
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.ServiceFunction.Service">
      <summary>
            Service AST this function belongs to
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.ServiceFunction.IsRpc">
      <summary>
            Is function an RPC?
            </summary>
    </member>
    <member name="T:Igor.Elixir.AST.ServiceForm">
      <summary>
            Service declaration AST
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.ServiceForm.Functions">
      <summary>
            List of functions
            </summary>
    </member>
    <member name="T:Igor.Elixir.AST.WebServiceForm">
      <summary>
            Web service declaration AST
            </summary>
    </member>
    <member name="T:Igor.Elixir.AST.WebResource">
      <summary>
            Web resource declaration AST
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.WebResource.WebService">
      <summary>
            Web service AST where this resource is defined
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.WebResource.Path">
      <summary>
            List of URL path segments
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.WebResource.Query">
      <summary>
            List of URL query parameters
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.WebResource.Method">
      <summary>
            HTTP method
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.WebResource.Responses">
      <summary>
            List of possible responses
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.WebResource.RequestHeaders">
      <summary>
            List of request headers
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.WebResource.RequestContent">
      <summary>
            Request content AST, if available. Can be null if request has no body.
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.WebResource.RequestBodyType">
      <summary>
            Request body type AST. Can be null if request has no body.
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.WebContent.Type">
      <summary>
            Content Type
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.WebContent.Format">
      <summary>
            Data format of the content type
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.WebContent.Resource">
      <summary>
            Resource this content belongs to
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.WebContent.Var">
      <summary>
            Content variable. May be null, if only type was provided
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.WebContent.Annotation">
      <summary>
            Annotation string (if present in Igor source file) or null (if not present)
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.WebHeader.Name">
      <summary>
            Header name.
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.WebHeader.StaticValue">
      <summary>
            Static header value. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.WebHeader.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.WebHeader.IsStatic">
      <summary>
            True if header has a static value.
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.WebPathSegment.StaticValue">
      <summary>
            Static string segment. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.WebPathSegment.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.WebPathSegment.IsStatic">
      <summary>
            True if this segment is a static segment.
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.WebQueryParameter.StaticValue">
      <summary>
            Static query parameter value. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.WebQueryParameter.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.WebQueryParameter.IsStatic">
      <summary>
            True if query parameter has a static value.
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.WebQueryParameter.Format">
      <summary>
            Data format for query variable
            </summary>
    </member>
    <member name="T:Igor.Elixir.AST.GenericType">
      <summary>
            Generic type instance AST
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.GenericType.Prototype">
      <summary>
            Generic type prototype declaration AST
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.GenericType.Args">
      <summary>
            Generic type arguments
            </summary>
    </member>
    <member name="T:Igor.Elixir.AST.GenericInterface">
      <summary>
            Generic interface instance AST
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.GenericInterface.Prototype">
      <summary>
            Generic interface prototype declaration AST
            </summary>
    </member>
    <member name="P:Igor.Elixir.AST.GenericInterface.Args">
      <summary>
            Generic type arguments
            </summary>
    </member>
    <member name="T:Igor.Elixir.AST.BuiltInType">
      <summary>
            Igor built-in type instances
            </summary>
    </member>
    <member name="T:Igor.Elixir.AST.BuiltInType.Bool">
      <summary>
            Built-in Igor bool type instance
            </summary>
    </member>
    <member name="T:Igor.Elixir.AST.BuiltInType.Integer">
      <summary>
            Built-in Igor integer type instance
            </summary>
    </member>
    <member name="T:Igor.Elixir.AST.BuiltInType.Float">
      <summary>
            Built-in Igor float type instance
            </summary>
    </member>
    <member name="T:Igor.Elixir.AST.BuiltInType.String">
      <summary>
            Built-in Igor string type instance
            </summary>
    </member>
    <member name="T:Igor.Elixir.AST.BuiltInType.Binary">
      <summary>
            Built-in Igor binary type instance
            </summary>
    </member>
    <member name="T:Igor.Elixir.AST.BuiltInType.Atom">
      <summary>
            Built-in Igor atom type instance
            </summary>
    </member>
    <member name="T:Igor.Elixir.AST.BuiltInType.Json">
      <summary>
            Built-in Igor json type instance
            </summary>
    </member>
    <member name="T:Igor.Elixir.AST.BuiltInType.List">
      <summary>
            Built-in Igor list type instance
            </summary>
    </member>
    <member name="T:Igor.Elixir.AST.BuiltInType.Dict">
      <summary>
            Built-in Igor dict type instance
            </summary>
    </member>
    <member name="T:Igor.Elixir.AST.BuiltInType.Optional">
      <summary>
            Built-in Igor optional type instance (?T)
            </summary>
    </member>
    <member name="T:Igor.Elixir.AST.BuiltInType.Flags">
      <summary>
            Built-in Igor flags type instance
            </summary>
    </member>
    <member name="T:Igor.Elixir.AST.BuiltInType.OneOf">
      <summary>
            Built-in Igor oneof type instance
            </summary>
    </member>
    <member name="T:Igor.Elixir.AST.AstMapper">
      <summary>
            Maps Igor.Declarations namespace classes to AST namespace classes.
            </summary>
    </member>
    <member name="M:Igor.Elixir.AST.AstMapper.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Igor.Elixir.AST.AstMapper.Map(System.Collections.Generic.IReadOnlyList{Igor.Declarations.Module})">
      <summary>
            Maps Igor.Declarations namespace classes to AST namespace classes.
            </summary>
      <param name="modules">Module declarations parse tree</param>
      <returns>Modules AST</returns>
    </member>
    <member name="T:Igor.Python.Target">
      <summary>
            ITarget implementation for Python language
            </summary>
    </member>
    <member name="T:Igor.Python.AST.IType">
      <summary>
            AST type marker interface
            </summary>
    </member>
    <member name="T:Igor.Python.AST.IInterface">
      <summary>
            AST interface marker interface
            </summary>
    </member>
    <member name="T:Igor.Python.AST.Statement">
      <summary>
            Base type for named AST declaration.
            Statements can host Igor attributes.
            </summary>
    </member>
    <member name="M:Igor.Python.AST.Statement.ToString">
      <summary>
            String representation of this AST, for debug purposes
            </summary>
      <returns>String representation of this AST</returns>
    </member>
    <member name="M:Igor.Python.AST.Statement.Error(System.String)">
      <summary>
            Report an error related to this statement declaration.
            </summary>
      <param name="message">Error description</param>
    </member>
    <member name="M:Igor.Python.AST.Statement.Warning(System.String)">
      <summary>
            Report a warning related to this statement declaration.
            </summary>
      <param name="message">Warning description</param>
    </member>
    <member name="M:Igor.Python.AST.Statement.Hint(System.String)">
      <summary>
            Report a hint related to this statement declaration.
            </summary>
      <param name="message">Hint description</param>
    </member>
    <member name="M:Igor.Python.AST.Statement.Attribute``1(Igor.AttributeDescriptor{``0},``0)">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or default value if value is unset in Igor source or environment)
            </summary>
      <typeparam name="T">Attribute value type argument</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <param name="defaultValue">Default value</param>
      <returns>Attribute value or default</returns>
    </member>
    <member name="M:Igor.Python.AST.Statement.Attribute``1(Igor.StructAttributeDescriptor{``0})">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or null if value is unset in Igor source or environment).
            This is a function overload for value/struct types: numbers, bools and enums.
            </summary>
      <typeparam name="T">Attribute value type argument (must be value/struct type)</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>Nullable attribute value (null if value is not found)</returns>
    </member>
    <member name="M:Igor.Python.AST.Statement.Attribute``1(Igor.ClassAttributeDescriptor{``0})">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or null if value is unset in Igor source or environment).
            This is a function overload for reference/class types: strings and objects.
            </summary>
      <typeparam name="T">Attribute value type argument (must be reference/class type)</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>Attribute value (null if value is not found)</returns>
    </member>
    <member name="M:Igor.Python.AST.Statement.ListAttribute``1(Igor.AttributeDescriptor{``0})">
      <summary>
            Get a list of all attribute values set for this AST statement or inherited using inheritance type defined by attribute descriptor.
            Empty list is returned if no values are found.
            </summary>
      <typeparam name="T">Attribute value type argument</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>List of found attribute values</returns>
    </member>
    <member name="P:Igor.Python.AST.Statement.NestedHosts">
      <summary>
            List of nested declarations
            </summary>
    </member>
    <member name="P:Igor.Python.AST.Statement.Location">
      <summary>
            Declaration location in Igor source file
            </summary>
    </member>
    <member name="P:Igor.Python.AST.Statement.Attributes">
      <summary>
            The attribute collection. Obsolete and will be removed in future releases.
            Use Attribute or ListAttribute functions instead.
            </summary>
    </member>
    <member name="P:Igor.Python.AST.Statement.Name">
      <summary>
            Name of the entity defined by this declaration
            </summary>
    </member>
    <member name="P:Igor.Python.AST.Statement.Annotation">
      <summary>
            Annotation string (if present in Igor source file) or null (if not present)
            </summary>
    </member>
    <member name="T:Igor.Python.AST.Module">
      <summary>
            Module AST
            </summary>
    </member>
    <member name="P:Igor.Python.AST.Module.Definitions">
      <summary>
            List of top-level definitions (forms)
            </summary>
    </member>
    <member name="P:Igor.Python.AST.Module.Enums">
      <summary>
            List of enum types declared in this module
            </summary>
    </member>
    <member name="P:Igor.Python.AST.Module.Structs">
      <summary>
            List of struct types (records, variants, interfaces) declared in this module
            </summary>
    </member>
    <member name="P:Igor.Python.AST.Module.Records">
      <summary>
            List of records declared in this module
            </summary>
    </member>
    <member name="P:Igor.Python.AST.Module.Types">
      <summary>
            List of all types declared in this module
            </summary>
    </member>
    <member name="P:Igor.Python.AST.Module.Services">
      <summary>
            List of services declared in this module
            </summary>
    </member>
    <member name="P:Igor.Python.AST.Module.WebServices">
      <summary>
            List of web services declared in this module
            </summary>
    </member>
    <member name="P:Igor.Python.AST.Module.Tables">
      <summary>
            List of tables declared in this module
            </summary>
    </member>
    <member name="T:Igor.Python.AST.Form">
      <summary>
            Base AST type for top-level declarations (forms) contained in modules: enums, records, services, etc.
            </summary>
    </member>
    <member name="P:Igor.Python.AST.Form.Module">
      <summary>
            AST of module in which this form is declared
            </summary>
    </member>
    <member name="P:Igor.Python.AST.Form.jsonEnabled">
      <summary>
            Is JSON serialization enabled (the value of json.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.Python.AST.Form.binaryEnabled">
      <summary>
            Is binary serialization enabled (the value of binary.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.Python.AST.Form.xmlEnabled">
      <summary>
            Is XML serialization enabled (the value of xml.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.Python.AST.Form.stringEnabled">
      <summary>
            Is string serialization enabled (the value of string.enabled attribute)
            </summary>
    </member>
    <member name="T:Igor.Python.AST.TypeForm">
      <summary>
            Base AST type for type declarations
            </summary>
    </member>
    <member name="P:Igor.Python.AST.TypeForm.Args">
      <summary>
            List of generic arguments (type variables)
            </summary>
    </member>
    <member name="P:Igor.Python.AST.TypeForm.Arity">
      <summary>
            Generic arity (number of type arguments)
            </summary>
    </member>
    <member name="P:Igor.Python.AST.TypeForm.IsGeneric">
      <summary>
            Is type generic
            </summary>
    </member>
    <member name="T:Igor.Python.AST.GenericArgument">
      <summary>
            Generic argument type variable
            </summary>
    </member>
    <member name="P:Igor.Python.AST.GenericArgument.Location">
      <summary>
            Location in Igor source file
            </summary>
    </member>
    <member name="P:Igor.Python.AST.GenericArgument.Name">
      <summary>
            Name of generic type variable
            </summary>
    </member>
    <member name="T:Igor.Python.AST.EnumField">
      <summary>
            Enum field declaration AST
            </summary>
    </member>
    <member name="P:Igor.Python.AST.EnumField.Value">
      <summary>
            Integer value of enum field
            </summary>
    </member>
    <member name="P:Igor.Python.AST.EnumField.Enum">
      <summary>
            Enum AST this field belongs to
            </summary>
    </member>
    <member name="P:Igor.Python.AST.EnumField.jsonFieldNotation">
      <summary>
            Notation used to translate Igor name to JSON string values (the value of json.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.Python.AST.EnumField.jsonKey">
      <summary>
            JSON serialization value for this enum field, translated using jsonFieldNotation or overriden by json.key attribute
            </summary>
    </member>
    <member name="P:Igor.Python.AST.EnumField.xmlEnumNotation">
      <summary>
            Notation used to translate Igor name to XML string values (the value of xml.enum_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.Python.AST.EnumField.xmlName">
      <summary>
            XML serialization value for this enum field, translated using xmlEnumNotation or overriden by xml.name attribute
            </summary>
    </member>
    <member name="P:Igor.Python.AST.EnumField.stringFieldNotation">
      <summary>
            Notation used to translate Igor name to string values (the value of string.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.Python.AST.EnumField.stringValue">
      <summary>
            String serialization value for this enum field, translated using xmlEnumNotation or overriden by string.value attribute
            </summary>
    </member>
    <member name="T:Igor.Python.AST.EnumForm">
      <summary>
            Enum type declaration AST
            </summary>
    </member>
    <member name="P:Igor.Python.AST.EnumForm.IntType">
      <summary>
            Base integer type. This is the minimum range integer type that includes all field values, or the value of int_type attribute.
            </summary>
    </member>
    <member name="P:Igor.Python.AST.EnumForm.Flags">
      <summary>
            Enum represents bit flags
            </summary>
    </member>
    <member name="P:Igor.Python.AST.EnumForm.jsonNumber">
      <summary>
            Serialize enum values to JSON as integer numbers
            </summary>
    </member>
    <member name="P:Igor.Python.AST.EnumForm.Fields">
      <summary>
            The list of enum fields
            </summary>
    </member>
    <member name="T:Igor.Python.AST.RecordField">
      <summary>
            Record, variant or interface field declaration AST
            </summary>
    </member>
    <member name="P:Igor.Python.AST.RecordField.Type">
      <summary>
            Type AST of this field
            </summary>
    </member>
    <member name="P:Igor.Python.AST.RecordField.DefaultValue">
      <summary>
            Default value of the field
            </summary>
    </member>
    <member name="P:Igor.Python.AST.RecordField.IsTag">
      <summary>
            Is the field a variant tag?
            When deserializing variants, tag field is deserialized first, to define which record it is.
            </summary>
    </member>
    <member name="P:Igor.Python.AST.RecordField.IsInherited">
      <summary>
            Is the field inherited from the ancestor variant?
            </summary>
    </member>
    <member name="P:Igor.Python.AST.RecordField.IsLocal">
      <summary>
            Is the field local (not inherited)?
            </summary>
    </member>
    <member name="P:Igor.Python.AST.RecordField.Struct">
      <summary>
            Struct (record, interface or variant) this field belongs to.
            </summary>
    </member>
    <member name="P:Igor.Python.AST.RecordField.binaryIgnore">
      <summary>
            Should this field be skipped during binary serialization (value of binary.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.Python.AST.RecordField.jsonFieldNotation">
      <summary>
            Notation used to translate Igor name to JSON string values (value of json.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.Python.AST.RecordField.jsonKey">
      <summary>
            JSON serialization object key for this field, translated using jsonFieldNotation or overriden by json.key attribute
            </summary>
    </member>
    <member name="P:Igor.Python.AST.RecordField.jsonIgnore">
      <summary>
            Should this field be skipped during JSON serialization (value of json.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.Python.AST.RecordField.xmlIgnore">
      <summary>
            Should this field be skipped during XML serialization (value of xml.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.Python.AST.RecordField.Default">
      <summary>
            Default value AST (or null if there's no default value)
            </summary>
    </member>
    <member name="P:Igor.Python.AST.RecordField.HasDefault">
      <summary>
            Does the field has default value?
            </summary>
    </member>
    <member name="P:Igor.Python.AST.RecordField.IsOptional">
      <summary>
            Is field optional?
            </summary>
    </member>
    <member name="P:Igor.Python.AST.RecordField.NonOptType">
      <summary>
            Returns non-optional type of this field
            </summary>
    </member>
    <member name="T:Igor.Python.AST.StructForm">
      <summary>
            Base AST type for struct declarations: records, variants and interfaces
            </summary>
    </member>
    <member name="P:Igor.Python.AST.StructForm.Fields">
      <summary>
            List of all fields (both local and inherited)
            </summary>
    </member>
    <member name="P:Igor.Python.AST.StructForm.Ancestor">
      <summary>
            Ancestor variant (or null if there's no ancestor)
            </summary>
    </member>
    <member name="P:Igor.Python.AST.StructForm.Interfaces">
      <summary>
            List of interfaces this struct implements
            </summary>
    </member>
    <member name="P:Igor.Python.AST.StructForm.TagField">
      <summary>
            Variant tag field (or null if there's no tag field)
            </summary>
    </member>
    <member name="P:Igor.Python.AST.StructForm.IsException">
      <summary>
            Is this struct an exception?
            </summary>
    </member>
    <member name="P:Igor.Python.AST.StructForm.jsonSerializedFields">
      <summary>
            List of fields included into JSON serialization
            </summary>
    </member>
    <member name="P:Igor.Python.AST.StructForm.jsonNulls">
      <summary>
            Whether generated JSON serializer should include nulls for optional fields.
            If this property is not set, serializer may prefer the most convenient or efficient implementation.
            </summary>
    </member>
    <member name="P:Igor.Python.AST.StructForm.binarySerializedFields">
      <summary>
            List of fields included into binary serialization
            </summary>
    </member>
    <member name="P:Igor.Python.AST.StructForm.xmlSerializedFields">
      <summary>
            List of fields included into XML serialization
            </summary>
    </member>
    <member name="P:Igor.Python.AST.StructForm.IsPatch">
      <summary>
            Is it a patch record (value of patch_record attribute)?
            </summary>
    </member>
    <member name="T:Igor.Python.AST.RecordForm">
      <summary>
            Record declaration AST
            </summary>
    </member>
    <member name="P:Igor.Python.AST.RecordForm.TagValue">
      <summary>
            Tag field value for this record
            </summary>
    </member>
    <member name="T:Igor.Python.AST.InterfaceForm">
      <summary>
            Interface declaration AST
            </summary>
    </member>
    <member name="T:Igor.Python.AST.VariantForm">
      <summary>
            Variant declaration AST
            </summary>
    </member>
    <member name="P:Igor.Python.AST.VariantForm.Descendants">
      <summary>
            List of direct descendants (both records and variants)
            </summary>
    </member>
    <member name="P:Igor.Python.AST.VariantForm.Records">
      <summary>
            List of all record descendants, both direct and indirect
            </summary>
    </member>
    <member name="T:Igor.Python.AST.UnionClause">
      <summary>
            Union clause declaration AST
            </summary>
    </member>
    <member name="T:Igor.Python.AST.UnionForm">
      <summary>
            Union type declaration AST
            </summary>
    </member>
    <member name="T:Igor.Python.AST.DefineForm">
      <summary>
            Alias (define) type declaration AST
            </summary>
    </member>
    <member name="P:Igor.Python.AST.DefineForm.Type">
      <summary>
            Alias target type. This define type is defined as an alias for that type.
            </summary>
    </member>
    <member name="T:Igor.Python.AST.FunctionArgument">
      <summary>
            Service function argument AST
            </summary>
    </member>
    <member name="P:Igor.Python.AST.FunctionArgument.Name">
      <summary>
            Argument name
            </summary>
    </member>
    <member name="P:Igor.Python.AST.FunctionArgument.Type">
      <summary>
            Argument type
            </summary>
    </member>
    <member name="P:Igor.Python.AST.FunctionArgument.Function">
      <summary>
            Function AST this argument belongs to
            </summary>
    </member>
    <member name="P:Igor.Python.AST.FunctionArgument.Index">
      <summary>
            Zero-based index of this argument
            </summary>
    </member>
    <member name="T:Igor.Python.AST.FunctionThrow">
      <summary>
            AST of reference to exception thrown by service functions
            </summary>
    </member>
    <member name="P:Igor.Python.AST.FunctionThrow.Exception">
      <summary>
            Thrown exception AST exception record
            </summary>
    </member>
    <member name="P:Igor.Python.AST.FunctionThrow.Id">
      <summary>
            Unique integer ID for serialization
            </summary>
    </member>
    <member name="P:Igor.Python.AST.FunctionThrow.Function">
      <summary>
            Function AST
            </summary>
    </member>
    <member name="T:Igor.Python.AST.ServiceFunction">
      <summary>
            Service function declaration AST
            </summary>
    </member>
    <member name="P:Igor.Python.AST.ServiceFunction.Direction">
      <summary>
            Function direction (c-&gt;s or s-&gt;c)
            </summary>
    </member>
    <member name="P:Igor.Python.AST.ServiceFunction.Arguments">
      <summary>
            List of function arguments
            </summary>
    </member>
    <member name="P:Igor.Python.AST.ServiceFunction.ReturnArguments">
      <summary>
            List of returned result arguments. Null if function is not an RPC.
            </summary>
    </member>
    <member name="P:Igor.Python.AST.ServiceFunction.Throws">
      <summary>
            List of thrown exception references
            </summary>
    </member>
    <member name="P:Igor.Python.AST.ServiceFunction.Index">
      <summary>
            Function index in the service
            </summary>
    </member>
    <member name="P:Igor.Python.AST.ServiceFunction.Service">
      <summary>
            Service AST this function belongs to
            </summary>
    </member>
    <member name="P:Igor.Python.AST.ServiceFunction.IsRpc">
      <summary>
            Is function an RPC?
            </summary>
    </member>
    <member name="T:Igor.Python.AST.ServiceForm">
      <summary>
            Service declaration AST
            </summary>
    </member>
    <member name="P:Igor.Python.AST.ServiceForm.Functions">
      <summary>
            List of functions
            </summary>
    </member>
    <member name="T:Igor.Python.AST.WebServiceForm">
      <summary>
            Web service declaration AST
            </summary>
    </member>
    <member name="T:Igor.Python.AST.WebResource">
      <summary>
            Web resource declaration AST
            </summary>
    </member>
    <member name="P:Igor.Python.AST.WebResource.WebService">
      <summary>
            Web service AST where this resource is defined
            </summary>
    </member>
    <member name="P:Igor.Python.AST.WebResource.Path">
      <summary>
            List of URL path segments
            </summary>
    </member>
    <member name="P:Igor.Python.AST.WebResource.Query">
      <summary>
            List of URL query parameters
            </summary>
    </member>
    <member name="P:Igor.Python.AST.WebResource.Method">
      <summary>
            HTTP method
            </summary>
    </member>
    <member name="P:Igor.Python.AST.WebResource.Responses">
      <summary>
            List of possible responses
            </summary>
    </member>
    <member name="P:Igor.Python.AST.WebResource.RequestHeaders">
      <summary>
            List of request headers
            </summary>
    </member>
    <member name="P:Igor.Python.AST.WebResource.RequestContent">
      <summary>
            Request content AST, if available. Can be null if request has no body.
            </summary>
    </member>
    <member name="P:Igor.Python.AST.WebResource.RequestBodyType">
      <summary>
            Request body type AST. Can be null if request has no body.
            </summary>
    </member>
    <member name="P:Igor.Python.AST.WebContent.Type">
      <summary>
            Content Type
            </summary>
    </member>
    <member name="P:Igor.Python.AST.WebContent.Format">
      <summary>
            Data format of the content type
            </summary>
    </member>
    <member name="P:Igor.Python.AST.WebContent.Resource">
      <summary>
            Resource this content belongs to
            </summary>
    </member>
    <member name="P:Igor.Python.AST.WebContent.Var">
      <summary>
            Content variable. May be null, if only type was provided
            </summary>
    </member>
    <member name="P:Igor.Python.AST.WebContent.Annotation">
      <summary>
            Annotation string (if present in Igor source file) or null (if not present)
            </summary>
    </member>
    <member name="P:Igor.Python.AST.WebHeader.Name">
      <summary>
            Header name.
            </summary>
    </member>
    <member name="P:Igor.Python.AST.WebHeader.StaticValue">
      <summary>
            Static header value. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Python.AST.WebHeader.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Python.AST.WebHeader.IsStatic">
      <summary>
            True if header has a static value.
            </summary>
    </member>
    <member name="P:Igor.Python.AST.WebPathSegment.StaticValue">
      <summary>
            Static string segment. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Python.AST.WebPathSegment.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Python.AST.WebPathSegment.IsStatic">
      <summary>
            True if this segment is a static segment.
            </summary>
    </member>
    <member name="P:Igor.Python.AST.WebQueryParameter.StaticValue">
      <summary>
            Static query parameter value. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Python.AST.WebQueryParameter.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Python.AST.WebQueryParameter.IsStatic">
      <summary>
            True if query parameter has a static value.
            </summary>
    </member>
    <member name="P:Igor.Python.AST.WebQueryParameter.Format">
      <summary>
            Data format for query variable
            </summary>
    </member>
    <member name="T:Igor.Python.AST.GenericType">
      <summary>
            Generic type instance AST
            </summary>
    </member>
    <member name="P:Igor.Python.AST.GenericType.Prototype">
      <summary>
            Generic type prototype declaration AST
            </summary>
    </member>
    <member name="P:Igor.Python.AST.GenericType.Args">
      <summary>
            Generic type arguments
            </summary>
    </member>
    <member name="T:Igor.Python.AST.GenericInterface">
      <summary>
            Generic interface instance AST
            </summary>
    </member>
    <member name="P:Igor.Python.AST.GenericInterface.Prototype">
      <summary>
            Generic interface prototype declaration AST
            </summary>
    </member>
    <member name="P:Igor.Python.AST.GenericInterface.Args">
      <summary>
            Generic type arguments
            </summary>
    </member>
    <member name="T:Igor.Python.AST.BuiltInType">
      <summary>
            Igor built-in type instances
            </summary>
    </member>
    <member name="T:Igor.Python.AST.BuiltInType.Bool">
      <summary>
            Built-in Igor bool type instance
            </summary>
    </member>
    <member name="T:Igor.Python.AST.BuiltInType.Integer">
      <summary>
            Built-in Igor integer type instance
            </summary>
    </member>
    <member name="T:Igor.Python.AST.BuiltInType.Float">
      <summary>
            Built-in Igor float type instance
            </summary>
    </member>
    <member name="T:Igor.Python.AST.BuiltInType.String">
      <summary>
            Built-in Igor string type instance
            </summary>
    </member>
    <member name="T:Igor.Python.AST.BuiltInType.Binary">
      <summary>
            Built-in Igor binary type instance
            </summary>
    </member>
    <member name="T:Igor.Python.AST.BuiltInType.Atom">
      <summary>
            Built-in Igor atom type instance
            </summary>
    </member>
    <member name="T:Igor.Python.AST.BuiltInType.Json">
      <summary>
            Built-in Igor json type instance
            </summary>
    </member>
    <member name="T:Igor.Python.AST.BuiltInType.List">
      <summary>
            Built-in Igor list type instance
            </summary>
    </member>
    <member name="T:Igor.Python.AST.BuiltInType.Dict">
      <summary>
            Built-in Igor dict type instance
            </summary>
    </member>
    <member name="T:Igor.Python.AST.BuiltInType.Optional">
      <summary>
            Built-in Igor optional type instance (?T)
            </summary>
    </member>
    <member name="T:Igor.Python.AST.BuiltInType.Flags">
      <summary>
            Built-in Igor flags type instance
            </summary>
    </member>
    <member name="T:Igor.Python.AST.BuiltInType.OneOf">
      <summary>
            Built-in Igor oneof type instance
            </summary>
    </member>
    <member name="T:Igor.Python.AST.AstMapper">
      <summary>
            Maps Igor.Declarations namespace classes to AST namespace classes.
            </summary>
    </member>
    <member name="M:Igor.Python.AST.AstMapper.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Igor.Python.AST.AstMapper.Map(System.Collections.Generic.IReadOnlyList{Igor.Declarations.Module})">
      <summary>
            Maps Igor.Declarations namespace classes to AST namespace classes.
            </summary>
      <param name="modules">Module declarations parse tree</param>
      <returns>Modules AST</returns>
    </member>
    <member name="T:Igor.Schema.DiagramSchemaTarget">
      <summary>
            ITarget implementation for Igor diagram schema
            </summary>
    </member>
    <member name="T:Igor.Schema.SchemaTarget">
      <summary>
            ITarget implementation for Igor schema
            </summary>
    </member>
    <member name="T:Igor.Schema.AST.IType">
      <summary>
            AST type marker interface
            </summary>
    </member>
    <member name="T:Igor.Schema.AST.IInterface">
      <summary>
            AST interface marker interface
            </summary>
    </member>
    <member name="T:Igor.Schema.AST.Statement">
      <summary>
            Base type for named AST declaration.
            Statements can host Igor attributes.
            </summary>
    </member>
    <member name="M:Igor.Schema.AST.Statement.ToString">
      <summary>
            String representation of this AST, for debug purposes
            </summary>
      <returns>String representation of this AST</returns>
    </member>
    <member name="M:Igor.Schema.AST.Statement.Error(System.String)">
      <summary>
            Report an error related to this statement declaration.
            </summary>
      <param name="message">Error description</param>
    </member>
    <member name="M:Igor.Schema.AST.Statement.Warning(System.String)">
      <summary>
            Report a warning related to this statement declaration.
            </summary>
      <param name="message">Warning description</param>
    </member>
    <member name="M:Igor.Schema.AST.Statement.Hint(System.String)">
      <summary>
            Report a hint related to this statement declaration.
            </summary>
      <param name="message">Hint description</param>
    </member>
    <member name="M:Igor.Schema.AST.Statement.Attribute``1(Igor.AttributeDescriptor{``0},``0)">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or default value if value is unset in Igor source or environment)
            </summary>
      <typeparam name="T">Attribute value type argument</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <param name="defaultValue">Default value</param>
      <returns>Attribute value or default</returns>
    </member>
    <member name="M:Igor.Schema.AST.Statement.Attribute``1(Igor.StructAttributeDescriptor{``0})">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or null if value is unset in Igor source or environment).
            This is a function overload for value/struct types: numbers, bools and enums.
            </summary>
      <typeparam name="T">Attribute value type argument (must be value/struct type)</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>Nullable attribute value (null if value is not found)</returns>
    </member>
    <member name="M:Igor.Schema.AST.Statement.Attribute``1(Igor.ClassAttributeDescriptor{``0})">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or null if value is unset in Igor source or environment).
            This is a function overload for reference/class types: strings and objects.
            </summary>
      <typeparam name="T">Attribute value type argument (must be reference/class type)</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>Attribute value (null if value is not found)</returns>
    </member>
    <member name="M:Igor.Schema.AST.Statement.ListAttribute``1(Igor.AttributeDescriptor{``0})">
      <summary>
            Get a list of all attribute values set for this AST statement or inherited using inheritance type defined by attribute descriptor.
            Empty list is returned if no values are found.
            </summary>
      <typeparam name="T">Attribute value type argument</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>List of found attribute values</returns>
    </member>
    <member name="P:Igor.Schema.AST.Statement.NestedHosts">
      <summary>
            List of nested declarations
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.Statement.Location">
      <summary>
            Declaration location in Igor source file
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.Statement.Attributes">
      <summary>
            The attribute collection. Obsolete and will be removed in future releases.
            Use Attribute or ListAttribute functions instead.
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.Statement.Name">
      <summary>
            Name of the entity defined by this declaration
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.Statement.Annotation">
      <summary>
            Annotation string (if present in Igor source file) or null (if not present)
            </summary>
    </member>
    <member name="T:Igor.Schema.AST.Module">
      <summary>
            Module AST
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.Module.Definitions">
      <summary>
            List of top-level definitions (forms)
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.Module.Enums">
      <summary>
            List of enum types declared in this module
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.Module.Structs">
      <summary>
            List of struct types (records, variants, interfaces) declared in this module
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.Module.Records">
      <summary>
            List of records declared in this module
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.Module.Types">
      <summary>
            List of all types declared in this module
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.Module.Services">
      <summary>
            List of services declared in this module
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.Module.WebServices">
      <summary>
            List of web services declared in this module
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.Module.Tables">
      <summary>
            List of tables declared in this module
            </summary>
    </member>
    <member name="T:Igor.Schema.AST.Form">
      <summary>
            Base AST type for top-level declarations (forms) contained in modules: enums, records, services, etc.
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.Form.Module">
      <summary>
            AST of module in which this form is declared
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.Form.jsonEnabled">
      <summary>
            Is JSON serialization enabled (the value of json.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.Form.binaryEnabled">
      <summary>
            Is binary serialization enabled (the value of binary.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.Form.xmlEnabled">
      <summary>
            Is XML serialization enabled (the value of xml.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.Form.stringEnabled">
      <summary>
            Is string serialization enabled (the value of string.enabled attribute)
            </summary>
    </member>
    <member name="T:Igor.Schema.AST.TypeForm">
      <summary>
            Base AST type for type declarations
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.TypeForm.Args">
      <summary>
            List of generic arguments (type variables)
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.TypeForm.Arity">
      <summary>
            Generic arity (number of type arguments)
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.TypeForm.IsGeneric">
      <summary>
            Is type generic
            </summary>
    </member>
    <member name="T:Igor.Schema.AST.GenericArgument">
      <summary>
            Generic argument type variable
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.GenericArgument.Location">
      <summary>
            Location in Igor source file
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.GenericArgument.Name">
      <summary>
            Name of generic type variable
            </summary>
    </member>
    <member name="T:Igor.Schema.AST.EnumField">
      <summary>
            Enum field declaration AST
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.EnumField.Value">
      <summary>
            Integer value of enum field
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.EnumField.Enum">
      <summary>
            Enum AST this field belongs to
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.EnumField.jsonFieldNotation">
      <summary>
            Notation used to translate Igor name to JSON string values (the value of json.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.EnumField.jsonKey">
      <summary>
            JSON serialization value for this enum field, translated using jsonFieldNotation or overriden by json.key attribute
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.EnumField.xmlEnumNotation">
      <summary>
            Notation used to translate Igor name to XML string values (the value of xml.enum_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.EnumField.xmlName">
      <summary>
            XML serialization value for this enum field, translated using xmlEnumNotation or overriden by xml.name attribute
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.EnumField.stringFieldNotation">
      <summary>
            Notation used to translate Igor name to string values (the value of string.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.EnumField.stringValue">
      <summary>
            String serialization value for this enum field, translated using xmlEnumNotation or overriden by string.value attribute
            </summary>
    </member>
    <member name="T:Igor.Schema.AST.EnumForm">
      <summary>
            Enum type declaration AST
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.EnumForm.IntType">
      <summary>
            Base integer type. This is the minimum range integer type that includes all field values, or the value of int_type attribute.
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.EnumForm.Flags">
      <summary>
            Enum represents bit flags
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.EnumForm.jsonNumber">
      <summary>
            Serialize enum values to JSON as integer numbers
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.EnumForm.Fields">
      <summary>
            The list of enum fields
            </summary>
    </member>
    <member name="T:Igor.Schema.AST.RecordField">
      <summary>
            Record, variant or interface field declaration AST
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.RecordField.Type">
      <summary>
            Type AST of this field
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.RecordField.DefaultValue">
      <summary>
            Default value of the field
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.RecordField.IsTag">
      <summary>
            Is the field a variant tag?
            When deserializing variants, tag field is deserialized first, to define which record it is.
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.RecordField.IsInherited">
      <summary>
            Is the field inherited from the ancestor variant?
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.RecordField.IsLocal">
      <summary>
            Is the field local (not inherited)?
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.RecordField.Struct">
      <summary>
            Struct (record, interface or variant) this field belongs to.
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.RecordField.binaryIgnore">
      <summary>
            Should this field be skipped during binary serialization (value of binary.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.RecordField.jsonFieldNotation">
      <summary>
            Notation used to translate Igor name to JSON string values (value of json.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.RecordField.jsonKey">
      <summary>
            JSON serialization object key for this field, translated using jsonFieldNotation or overriden by json.key attribute
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.RecordField.jsonIgnore">
      <summary>
            Should this field be skipped during JSON serialization (value of json.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.RecordField.xmlIgnore">
      <summary>
            Should this field be skipped during XML serialization (value of xml.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.RecordField.Default">
      <summary>
            Default value AST (or null if there's no default value)
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.RecordField.HasDefault">
      <summary>
            Does the field has default value?
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.RecordField.IsOptional">
      <summary>
            Is field optional?
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.RecordField.NonOptType">
      <summary>
            Returns non-optional type of this field
            </summary>
    </member>
    <member name="T:Igor.Schema.AST.StructForm">
      <summary>
            Base AST type for struct declarations: records, variants and interfaces
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.StructForm.Fields">
      <summary>
            List of all fields (both local and inherited)
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.StructForm.Ancestor">
      <summary>
            Ancestor variant (or null if there's no ancestor)
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.StructForm.Interfaces">
      <summary>
            List of interfaces this struct implements
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.StructForm.TagField">
      <summary>
            Variant tag field (or null if there's no tag field)
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.StructForm.IsException">
      <summary>
            Is this struct an exception?
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.StructForm.jsonSerializedFields">
      <summary>
            List of fields included into JSON serialization
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.StructForm.jsonNulls">
      <summary>
            Whether generated JSON serializer should include nulls for optional fields.
            If this property is not set, serializer may prefer the most convenient or efficient implementation.
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.StructForm.binarySerializedFields">
      <summary>
            List of fields included into binary serialization
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.StructForm.xmlSerializedFields">
      <summary>
            List of fields included into XML serialization
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.StructForm.IsPatch">
      <summary>
            Is it a patch record (value of patch_record attribute)?
            </summary>
    </member>
    <member name="T:Igor.Schema.AST.RecordForm">
      <summary>
            Record declaration AST
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.RecordForm.TagValue">
      <summary>
            Tag field value for this record
            </summary>
    </member>
    <member name="T:Igor.Schema.AST.InterfaceForm">
      <summary>
            Interface declaration AST
            </summary>
    </member>
    <member name="T:Igor.Schema.AST.VariantForm">
      <summary>
            Variant declaration AST
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.VariantForm.Descendants">
      <summary>
            List of direct descendants (both records and variants)
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.VariantForm.Records">
      <summary>
            List of all record descendants, both direct and indirect
            </summary>
    </member>
    <member name="T:Igor.Schema.AST.UnionClause">
      <summary>
            Union clause declaration AST
            </summary>
    </member>
    <member name="T:Igor.Schema.AST.UnionForm">
      <summary>
            Union type declaration AST
            </summary>
    </member>
    <member name="T:Igor.Schema.AST.DefineForm">
      <summary>
            Alias (define) type declaration AST
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.DefineForm.Type">
      <summary>
            Alias target type. This define type is defined as an alias for that type.
            </summary>
    </member>
    <member name="T:Igor.Schema.AST.FunctionArgument">
      <summary>
            Service function argument AST
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.FunctionArgument.Name">
      <summary>
            Argument name
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.FunctionArgument.Type">
      <summary>
            Argument type
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.FunctionArgument.Function">
      <summary>
            Function AST this argument belongs to
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.FunctionArgument.Index">
      <summary>
            Zero-based index of this argument
            </summary>
    </member>
    <member name="T:Igor.Schema.AST.FunctionThrow">
      <summary>
            AST of reference to exception thrown by service functions
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.FunctionThrow.Exception">
      <summary>
            Thrown exception AST exception record
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.FunctionThrow.Id">
      <summary>
            Unique integer ID for serialization
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.FunctionThrow.Function">
      <summary>
            Function AST
            </summary>
    </member>
    <member name="T:Igor.Schema.AST.ServiceFunction">
      <summary>
            Service function declaration AST
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.ServiceFunction.Direction">
      <summary>
            Function direction (c-&gt;s or s-&gt;c)
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.ServiceFunction.Arguments">
      <summary>
            List of function arguments
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.ServiceFunction.ReturnArguments">
      <summary>
            List of returned result arguments. Null if function is not an RPC.
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.ServiceFunction.Throws">
      <summary>
            List of thrown exception references
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.ServiceFunction.Index">
      <summary>
            Function index in the service
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.ServiceFunction.Service">
      <summary>
            Service AST this function belongs to
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.ServiceFunction.IsRpc">
      <summary>
            Is function an RPC?
            </summary>
    </member>
    <member name="T:Igor.Schema.AST.ServiceForm">
      <summary>
            Service declaration AST
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.ServiceForm.Functions">
      <summary>
            List of functions
            </summary>
    </member>
    <member name="T:Igor.Schema.AST.WebServiceForm">
      <summary>
            Web service declaration AST
            </summary>
    </member>
    <member name="T:Igor.Schema.AST.WebResource">
      <summary>
            Web resource declaration AST
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.WebResource.WebService">
      <summary>
            Web service AST where this resource is defined
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.WebResource.Path">
      <summary>
            List of URL path segments
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.WebResource.Query">
      <summary>
            List of URL query parameters
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.WebResource.Method">
      <summary>
            HTTP method
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.WebResource.Responses">
      <summary>
            List of possible responses
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.WebResource.RequestHeaders">
      <summary>
            List of request headers
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.WebResource.RequestContent">
      <summary>
            Request content AST, if available. Can be null if request has no body.
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.WebResource.RequestBodyType">
      <summary>
            Request body type AST. Can be null if request has no body.
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.WebContent.Type">
      <summary>
            Content Type
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.WebContent.Format">
      <summary>
            Data format of the content type
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.WebContent.Resource">
      <summary>
            Resource this content belongs to
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.WebContent.Var">
      <summary>
            Content variable. May be null, if only type was provided
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.WebContent.Annotation">
      <summary>
            Annotation string (if present in Igor source file) or null (if not present)
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.WebHeader.Name">
      <summary>
            Header name.
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.WebHeader.StaticValue">
      <summary>
            Static header value. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.WebHeader.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.WebHeader.IsStatic">
      <summary>
            True if header has a static value.
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.WebPathSegment.StaticValue">
      <summary>
            Static string segment. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.WebPathSegment.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.WebPathSegment.IsStatic">
      <summary>
            True if this segment is a static segment.
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.WebQueryParameter.StaticValue">
      <summary>
            Static query parameter value. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.WebQueryParameter.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.WebQueryParameter.IsStatic">
      <summary>
            True if query parameter has a static value.
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.WebQueryParameter.Format">
      <summary>
            Data format for query variable
            </summary>
    </member>
    <member name="T:Igor.Schema.AST.GenericType">
      <summary>
            Generic type instance AST
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.GenericType.Prototype">
      <summary>
            Generic type prototype declaration AST
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.GenericType.Args">
      <summary>
            Generic type arguments
            </summary>
    </member>
    <member name="T:Igor.Schema.AST.GenericInterface">
      <summary>
            Generic interface instance AST
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.GenericInterface.Prototype">
      <summary>
            Generic interface prototype declaration AST
            </summary>
    </member>
    <member name="P:Igor.Schema.AST.GenericInterface.Args">
      <summary>
            Generic type arguments
            </summary>
    </member>
    <member name="T:Igor.Schema.AST.BuiltInType">
      <summary>
            Igor built-in type instances
            </summary>
    </member>
    <member name="T:Igor.Schema.AST.BuiltInType.Bool">
      <summary>
            Built-in Igor bool type instance
            </summary>
    </member>
    <member name="T:Igor.Schema.AST.BuiltInType.Integer">
      <summary>
            Built-in Igor integer type instance
            </summary>
    </member>
    <member name="T:Igor.Schema.AST.BuiltInType.Float">
      <summary>
            Built-in Igor float type instance
            </summary>
    </member>
    <member name="T:Igor.Schema.AST.BuiltInType.String">
      <summary>
            Built-in Igor string type instance
            </summary>
    </member>
    <member name="T:Igor.Schema.AST.BuiltInType.Binary">
      <summary>
            Built-in Igor binary type instance
            </summary>
    </member>
    <member name="T:Igor.Schema.AST.BuiltInType.Atom">
      <summary>
            Built-in Igor atom type instance
            </summary>
    </member>
    <member name="T:Igor.Schema.AST.BuiltInType.Json">
      <summary>
            Built-in Igor json type instance
            </summary>
    </member>
    <member name="T:Igor.Schema.AST.BuiltInType.List">
      <summary>
            Built-in Igor list type instance
            </summary>
    </member>
    <member name="T:Igor.Schema.AST.BuiltInType.Dict">
      <summary>
            Built-in Igor dict type instance
            </summary>
    </member>
    <member name="T:Igor.Schema.AST.BuiltInType.Optional">
      <summary>
            Built-in Igor optional type instance (?T)
            </summary>
    </member>
    <member name="T:Igor.Schema.AST.BuiltInType.Flags">
      <summary>
            Built-in Igor flags type instance
            </summary>
    </member>
    <member name="T:Igor.Schema.AST.BuiltInType.OneOf">
      <summary>
            Built-in Igor oneof type instance
            </summary>
    </member>
    <member name="T:Igor.Schema.AST.AstMapper">
      <summary>
            Maps Igor.Declarations namespace classes to AST namespace classes.
            </summary>
    </member>
    <member name="M:Igor.Schema.AST.AstMapper.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Igor.Schema.AST.AstMapper.Map(System.Collections.Generic.IReadOnlyList{Igor.Declarations.Module})">
      <summary>
            Maps Igor.Declarations namespace classes to AST namespace classes.
            </summary>
      <param name="modules">Module declarations parse tree</param>
      <returns>Modules AST</returns>
    </member>
    <member name="T:Igor.JsonSchema.JsonSchemaAttributes">
      <summary>
            Built-in attributes available for JsonSchema target ("json_schema")
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.JsonSchemaAttributes.AllAttributes">
      <summary>
            Returns the list of all built-in JavaScript attributes
            </summary>
    </member>
    <member name="T:Igor.JsonSchema.JsonSchemaTarget">
      <summary>
            ITarget implementation for JavaScript language
            </summary>
    </member>
    <member name="T:Igor.JsonSchema.AST.IType">
      <summary>
            AST type marker interface
            </summary>
    </member>
    <member name="T:Igor.JsonSchema.AST.IInterface">
      <summary>
            AST interface marker interface
            </summary>
    </member>
    <member name="T:Igor.JsonSchema.AST.Statement">
      <summary>
            Base type for named AST declaration.
            Statements can host Igor attributes.
            </summary>
    </member>
    <member name="M:Igor.JsonSchema.AST.Statement.ToString">
      <summary>
            String representation of this AST, for debug purposes
            </summary>
      <returns>String representation of this AST</returns>
    </member>
    <member name="M:Igor.JsonSchema.AST.Statement.Error(System.String)">
      <summary>
            Report an error related to this statement declaration.
            </summary>
      <param name="message">Error description</param>
    </member>
    <member name="M:Igor.JsonSchema.AST.Statement.Warning(System.String)">
      <summary>
            Report a warning related to this statement declaration.
            </summary>
      <param name="message">Warning description</param>
    </member>
    <member name="M:Igor.JsonSchema.AST.Statement.Hint(System.String)">
      <summary>
            Report a hint related to this statement declaration.
            </summary>
      <param name="message">Hint description</param>
    </member>
    <member name="M:Igor.JsonSchema.AST.Statement.Attribute``1(Igor.AttributeDescriptor{``0},``0)">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or default value if value is unset in Igor source or environment)
            </summary>
      <typeparam name="T">Attribute value type argument</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <param name="defaultValue">Default value</param>
      <returns>Attribute value or default</returns>
    </member>
    <member name="M:Igor.JsonSchema.AST.Statement.Attribute``1(Igor.StructAttributeDescriptor{``0})">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or null if value is unset in Igor source or environment).
            This is a function overload for value/struct types: numbers, bools and enums.
            </summary>
      <typeparam name="T">Attribute value type argument (must be value/struct type)</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>Nullable attribute value (null if value is not found)</returns>
    </member>
    <member name="M:Igor.JsonSchema.AST.Statement.Attribute``1(Igor.ClassAttributeDescriptor{``0})">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or null if value is unset in Igor source or environment).
            This is a function overload for reference/class types: strings and objects.
            </summary>
      <typeparam name="T">Attribute value type argument (must be reference/class type)</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>Attribute value (null if value is not found)</returns>
    </member>
    <member name="M:Igor.JsonSchema.AST.Statement.ListAttribute``1(Igor.AttributeDescriptor{``0})">
      <summary>
            Get a list of all attribute values set for this AST statement or inherited using inheritance type defined by attribute descriptor.
            Empty list is returned if no values are found.
            </summary>
      <typeparam name="T">Attribute value type argument</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>List of found attribute values</returns>
    </member>
    <member name="P:Igor.JsonSchema.AST.Statement.NestedHosts">
      <summary>
            List of nested declarations
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.Statement.Location">
      <summary>
            Declaration location in Igor source file
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.Statement.Attributes">
      <summary>
            The attribute collection. Obsolete and will be removed in future releases.
            Use Attribute or ListAttribute functions instead.
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.Statement.Name">
      <summary>
            Name of the entity defined by this declaration
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.Statement.Annotation">
      <summary>
            Annotation string (if present in Igor source file) or null (if not present)
            </summary>
    </member>
    <member name="T:Igor.JsonSchema.AST.Module">
      <summary>
            Module AST
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.Module.Definitions">
      <summary>
            List of top-level definitions (forms)
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.Module.Enums">
      <summary>
            List of enum types declared in this module
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.Module.Structs">
      <summary>
            List of struct types (records, variants, interfaces) declared in this module
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.Module.Records">
      <summary>
            List of records declared in this module
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.Module.Types">
      <summary>
            List of all types declared in this module
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.Module.Services">
      <summary>
            List of services declared in this module
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.Module.WebServices">
      <summary>
            List of web services declared in this module
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.Module.Tables">
      <summary>
            List of tables declared in this module
            </summary>
    </member>
    <member name="T:Igor.JsonSchema.AST.Form">
      <summary>
            Base AST type for top-level declarations (forms) contained in modules: enums, records, services, etc.
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.Form.Module">
      <summary>
            AST of module in which this form is declared
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.Form.jsonEnabled">
      <summary>
            Is JSON serialization enabled (the value of json.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.Form.binaryEnabled">
      <summary>
            Is binary serialization enabled (the value of binary.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.Form.xmlEnabled">
      <summary>
            Is XML serialization enabled (the value of xml.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.Form.stringEnabled">
      <summary>
            Is string serialization enabled (the value of string.enabled attribute)
            </summary>
    </member>
    <member name="T:Igor.JsonSchema.AST.TypeForm">
      <summary>
            Base AST type for type declarations
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.TypeForm.Args">
      <summary>
            List of generic arguments (type variables)
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.TypeForm.Arity">
      <summary>
            Generic arity (number of type arguments)
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.TypeForm.IsGeneric">
      <summary>
            Is type generic
            </summary>
    </member>
    <member name="T:Igor.JsonSchema.AST.GenericArgument">
      <summary>
            Generic argument type variable
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.GenericArgument.Location">
      <summary>
            Location in Igor source file
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.GenericArgument.Name">
      <summary>
            Name of generic type variable
            </summary>
    </member>
    <member name="T:Igor.JsonSchema.AST.EnumField">
      <summary>
            Enum field declaration AST
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.EnumField.Value">
      <summary>
            Integer value of enum field
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.EnumField.Enum">
      <summary>
            Enum AST this field belongs to
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.EnumField.jsonFieldNotation">
      <summary>
            Notation used to translate Igor name to JSON string values (the value of json.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.EnumField.jsonKey">
      <summary>
            JSON serialization value for this enum field, translated using jsonFieldNotation or overriden by json.key attribute
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.EnumField.xmlEnumNotation">
      <summary>
            Notation used to translate Igor name to XML string values (the value of xml.enum_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.EnumField.xmlName">
      <summary>
            XML serialization value for this enum field, translated using xmlEnumNotation or overriden by xml.name attribute
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.EnumField.stringFieldNotation">
      <summary>
            Notation used to translate Igor name to string values (the value of string.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.EnumField.stringValue">
      <summary>
            String serialization value for this enum field, translated using xmlEnumNotation or overriden by string.value attribute
            </summary>
    </member>
    <member name="T:Igor.JsonSchema.AST.EnumForm">
      <summary>
            Enum type declaration AST
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.EnumForm.IntType">
      <summary>
            Base integer type. This is the minimum range integer type that includes all field values, or the value of int_type attribute.
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.EnumForm.Flags">
      <summary>
            Enum represents bit flags
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.EnumForm.jsonNumber">
      <summary>
            Serialize enum values to JSON as integer numbers
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.EnumForm.Fields">
      <summary>
            The list of enum fields
            </summary>
    </member>
    <member name="T:Igor.JsonSchema.AST.RecordField">
      <summary>
            Record, variant or interface field declaration AST
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.RecordField.Type">
      <summary>
            Type AST of this field
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.RecordField.DefaultValue">
      <summary>
            Default value of the field
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.RecordField.IsTag">
      <summary>
            Is the field a variant tag?
            When deserializing variants, tag field is deserialized first, to define which record it is.
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.RecordField.IsInherited">
      <summary>
            Is the field inherited from the ancestor variant?
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.RecordField.IsLocal">
      <summary>
            Is the field local (not inherited)?
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.RecordField.Struct">
      <summary>
            Struct (record, interface or variant) this field belongs to.
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.RecordField.binaryIgnore">
      <summary>
            Should this field be skipped during binary serialization (value of binary.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.RecordField.jsonFieldNotation">
      <summary>
            Notation used to translate Igor name to JSON string values (value of json.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.RecordField.jsonKey">
      <summary>
            JSON serialization object key for this field, translated using jsonFieldNotation or overriden by json.key attribute
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.RecordField.jsonIgnore">
      <summary>
            Should this field be skipped during JSON serialization (value of json.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.RecordField.xmlIgnore">
      <summary>
            Should this field be skipped during XML serialization (value of xml.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.RecordField.Default">
      <summary>
            Default value AST (or null if there's no default value)
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.RecordField.HasDefault">
      <summary>
            Does the field has default value?
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.RecordField.IsOptional">
      <summary>
            Is field optional?
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.RecordField.NonOptType">
      <summary>
            Returns non-optional type of this field
            </summary>
    </member>
    <member name="T:Igor.JsonSchema.AST.StructForm">
      <summary>
            Base AST type for struct declarations: records, variants and interfaces
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.StructForm.Fields">
      <summary>
            List of all fields (both local and inherited)
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.StructForm.Ancestor">
      <summary>
            Ancestor variant (or null if there's no ancestor)
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.StructForm.Interfaces">
      <summary>
            List of interfaces this struct implements
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.StructForm.TagField">
      <summary>
            Variant tag field (or null if there's no tag field)
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.StructForm.IsException">
      <summary>
            Is this struct an exception?
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.StructForm.jsonSerializedFields">
      <summary>
            List of fields included into JSON serialization
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.StructForm.jsonNulls">
      <summary>
            Whether generated JSON serializer should include nulls for optional fields.
            If this property is not set, serializer may prefer the most convenient or efficient implementation.
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.StructForm.binarySerializedFields">
      <summary>
            List of fields included into binary serialization
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.StructForm.xmlSerializedFields">
      <summary>
            List of fields included into XML serialization
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.StructForm.IsPatch">
      <summary>
            Is it a patch record (value of patch_record attribute)?
            </summary>
    </member>
    <member name="T:Igor.JsonSchema.AST.RecordForm">
      <summary>
            Record declaration AST
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.RecordForm.TagValue">
      <summary>
            Tag field value for this record
            </summary>
    </member>
    <member name="T:Igor.JsonSchema.AST.InterfaceForm">
      <summary>
            Interface declaration AST
            </summary>
    </member>
    <member name="T:Igor.JsonSchema.AST.VariantForm">
      <summary>
            Variant declaration AST
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.VariantForm.Descendants">
      <summary>
            List of direct descendants (both records and variants)
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.VariantForm.Records">
      <summary>
            List of all record descendants, both direct and indirect
            </summary>
    </member>
    <member name="T:Igor.JsonSchema.AST.UnionClause">
      <summary>
            Union clause declaration AST
            </summary>
    </member>
    <member name="T:Igor.JsonSchema.AST.UnionForm">
      <summary>
            Union type declaration AST
            </summary>
    </member>
    <member name="T:Igor.JsonSchema.AST.DefineForm">
      <summary>
            Alias (define) type declaration AST
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.DefineForm.Type">
      <summary>
            Alias target type. This define type is defined as an alias for that type.
            </summary>
    </member>
    <member name="T:Igor.JsonSchema.AST.FunctionArgument">
      <summary>
            Service function argument AST
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.FunctionArgument.Name">
      <summary>
            Argument name
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.FunctionArgument.Type">
      <summary>
            Argument type
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.FunctionArgument.Function">
      <summary>
            Function AST this argument belongs to
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.FunctionArgument.Index">
      <summary>
            Zero-based index of this argument
            </summary>
    </member>
    <member name="T:Igor.JsonSchema.AST.FunctionThrow">
      <summary>
            AST of reference to exception thrown by service functions
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.FunctionThrow.Exception">
      <summary>
            Thrown exception AST exception record
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.FunctionThrow.Id">
      <summary>
            Unique integer ID for serialization
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.FunctionThrow.Function">
      <summary>
            Function AST
            </summary>
    </member>
    <member name="T:Igor.JsonSchema.AST.ServiceFunction">
      <summary>
            Service function declaration AST
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.ServiceFunction.Direction">
      <summary>
            Function direction (c-&gt;s or s-&gt;c)
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.ServiceFunction.Arguments">
      <summary>
            List of function arguments
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.ServiceFunction.ReturnArguments">
      <summary>
            List of returned result arguments. Null if function is not an RPC.
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.ServiceFunction.Throws">
      <summary>
            List of thrown exception references
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.ServiceFunction.Index">
      <summary>
            Function index in the service
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.ServiceFunction.Service">
      <summary>
            Service AST this function belongs to
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.ServiceFunction.IsRpc">
      <summary>
            Is function an RPC?
            </summary>
    </member>
    <member name="T:Igor.JsonSchema.AST.ServiceForm">
      <summary>
            Service declaration AST
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.ServiceForm.Functions">
      <summary>
            List of functions
            </summary>
    </member>
    <member name="T:Igor.JsonSchema.AST.WebServiceForm">
      <summary>
            Web service declaration AST
            </summary>
    </member>
    <member name="T:Igor.JsonSchema.AST.WebResource">
      <summary>
            Web resource declaration AST
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.WebResource.WebService">
      <summary>
            Web service AST where this resource is defined
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.WebResource.Path">
      <summary>
            List of URL path segments
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.WebResource.Query">
      <summary>
            List of URL query parameters
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.WebResource.Method">
      <summary>
            HTTP method
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.WebResource.Responses">
      <summary>
            List of possible responses
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.WebResource.RequestHeaders">
      <summary>
            List of request headers
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.WebResource.RequestContent">
      <summary>
            Request content AST, if available. Can be null if request has no body.
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.WebResource.RequestBodyType">
      <summary>
            Request body type AST. Can be null if request has no body.
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.WebContent.Type">
      <summary>
            Content Type
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.WebContent.Format">
      <summary>
            Data format of the content type
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.WebContent.Resource">
      <summary>
            Resource this content belongs to
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.WebContent.Var">
      <summary>
            Content variable. May be null, if only type was provided
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.WebContent.Annotation">
      <summary>
            Annotation string (if present in Igor source file) or null (if not present)
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.WebHeader.Name">
      <summary>
            Header name.
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.WebHeader.StaticValue">
      <summary>
            Static header value. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.WebHeader.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.WebHeader.IsStatic">
      <summary>
            True if header has a static value.
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.WebPathSegment.StaticValue">
      <summary>
            Static string segment. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.WebPathSegment.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.WebPathSegment.IsStatic">
      <summary>
            True if this segment is a static segment.
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.WebQueryParameter.StaticValue">
      <summary>
            Static query parameter value. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.WebQueryParameter.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.WebQueryParameter.IsStatic">
      <summary>
            True if query parameter has a static value.
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.WebQueryParameter.Format">
      <summary>
            Data format for query variable
            </summary>
    </member>
    <member name="T:Igor.JsonSchema.AST.GenericType">
      <summary>
            Generic type instance AST
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.GenericType.Prototype">
      <summary>
            Generic type prototype declaration AST
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.GenericType.Args">
      <summary>
            Generic type arguments
            </summary>
    </member>
    <member name="T:Igor.JsonSchema.AST.GenericInterface">
      <summary>
            Generic interface instance AST
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.GenericInterface.Prototype">
      <summary>
            Generic interface prototype declaration AST
            </summary>
    </member>
    <member name="P:Igor.JsonSchema.AST.GenericInterface.Args">
      <summary>
            Generic type arguments
            </summary>
    </member>
    <member name="T:Igor.JsonSchema.AST.BuiltInType">
      <summary>
            Igor built-in type instances
            </summary>
    </member>
    <member name="T:Igor.JsonSchema.AST.BuiltInType.Bool">
      <summary>
            Built-in Igor bool type instance
            </summary>
    </member>
    <member name="T:Igor.JsonSchema.AST.BuiltInType.Integer">
      <summary>
            Built-in Igor integer type instance
            </summary>
    </member>
    <member name="T:Igor.JsonSchema.AST.BuiltInType.Float">
      <summary>
            Built-in Igor float type instance
            </summary>
    </member>
    <member name="T:Igor.JsonSchema.AST.BuiltInType.String">
      <summary>
            Built-in Igor string type instance
            </summary>
    </member>
    <member name="T:Igor.JsonSchema.AST.BuiltInType.Binary">
      <summary>
            Built-in Igor binary type instance
            </summary>
    </member>
    <member name="T:Igor.JsonSchema.AST.BuiltInType.Atom">
      <summary>
            Built-in Igor atom type instance
            </summary>
    </member>
    <member name="T:Igor.JsonSchema.AST.BuiltInType.Json">
      <summary>
            Built-in Igor json type instance
            </summary>
    </member>
    <member name="T:Igor.JsonSchema.AST.BuiltInType.List">
      <summary>
            Built-in Igor list type instance
            </summary>
    </member>
    <member name="T:Igor.JsonSchema.AST.BuiltInType.Dict">
      <summary>
            Built-in Igor dict type instance
            </summary>
    </member>
    <member name="T:Igor.JsonSchema.AST.BuiltInType.Optional">
      <summary>
            Built-in Igor optional type instance (?T)
            </summary>
    </member>
    <member name="T:Igor.JsonSchema.AST.BuiltInType.Flags">
      <summary>
            Built-in Igor flags type instance
            </summary>
    </member>
    <member name="T:Igor.JsonSchema.AST.AstMapper">
      <summary>
            Maps Igor.Declarations namespace classes to AST namespace classes.
            </summary>
    </member>
    <member name="M:Igor.JsonSchema.AST.AstMapper.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Igor.JsonSchema.AST.AstMapper.Map(System.Collections.Generic.IReadOnlyList{Igor.Declarations.Module})">
      <summary>
            Maps Igor.Declarations namespace classes to AST namespace classes.
            </summary>
      <param name="modules">Module declarations parse tree</param>
      <returns>Modules AST</returns>
    </member>
    <member name="T:Igor.Xsd.XsdTarget">
      <summary>
            ITarget implementation for XSD schema generation
            </summary>
    </member>
    <member name="T:Igor.Xsd.AST.IType">
      <summary>
            AST type marker interface
            </summary>
    </member>
    <member name="T:Igor.Xsd.AST.IInterface">
      <summary>
            AST interface marker interface
            </summary>
    </member>
    <member name="T:Igor.Xsd.AST.Statement">
      <summary>
            Base type for named AST declaration.
            Statements can host Igor attributes.
            </summary>
    </member>
    <member name="M:Igor.Xsd.AST.Statement.ToString">
      <summary>
            String representation of this AST, for debug purposes
            </summary>
      <returns>String representation of this AST</returns>
    </member>
    <member name="M:Igor.Xsd.AST.Statement.Error(System.String)">
      <summary>
            Report an error related to this statement declaration.
            </summary>
      <param name="message">Error description</param>
    </member>
    <member name="M:Igor.Xsd.AST.Statement.Warning(System.String)">
      <summary>
            Report a warning related to this statement declaration.
            </summary>
      <param name="message">Warning description</param>
    </member>
    <member name="M:Igor.Xsd.AST.Statement.Hint(System.String)">
      <summary>
            Report a hint related to this statement declaration.
            </summary>
      <param name="message">Hint description</param>
    </member>
    <member name="M:Igor.Xsd.AST.Statement.Attribute``1(Igor.AttributeDescriptor{``0},``0)">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or default value if value is unset in Igor source or environment)
            </summary>
      <typeparam name="T">Attribute value type argument</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <param name="defaultValue">Default value</param>
      <returns>Attribute value or default</returns>
    </member>
    <member name="M:Igor.Xsd.AST.Statement.Attribute``1(Igor.StructAttributeDescriptor{``0})">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or null if value is unset in Igor source or environment).
            This is a function overload for value/struct types: numbers, bools and enums.
            </summary>
      <typeparam name="T">Attribute value type argument (must be value/struct type)</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>Nullable attribute value (null if value is not found)</returns>
    </member>
    <member name="M:Igor.Xsd.AST.Statement.Attribute``1(Igor.ClassAttributeDescriptor{``0})">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or null if value is unset in Igor source or environment).
            This is a function overload for reference/class types: strings and objects.
            </summary>
      <typeparam name="T">Attribute value type argument (must be reference/class type)</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>Attribute value (null if value is not found)</returns>
    </member>
    <member name="M:Igor.Xsd.AST.Statement.ListAttribute``1(Igor.AttributeDescriptor{``0})">
      <summary>
            Get a list of all attribute values set for this AST statement or inherited using inheritance type defined by attribute descriptor.
            Empty list is returned if no values are found.
            </summary>
      <typeparam name="T">Attribute value type argument</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>List of found attribute values</returns>
    </member>
    <member name="P:Igor.Xsd.AST.Statement.NestedHosts">
      <summary>
            List of nested declarations
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.Statement.Location">
      <summary>
            Declaration location in Igor source file
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.Statement.Attributes">
      <summary>
            The attribute collection. Obsolete and will be removed in future releases.
            Use Attribute or ListAttribute functions instead.
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.Statement.Name">
      <summary>
            Name of the entity defined by this declaration
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.Statement.Annotation">
      <summary>
            Annotation string (if present in Igor source file) or null (if not present)
            </summary>
    </member>
    <member name="T:Igor.Xsd.AST.Module">
      <summary>
            Module AST
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.Module.Definitions">
      <summary>
            List of top-level definitions (forms)
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.Module.Enums">
      <summary>
            List of enum types declared in this module
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.Module.Structs">
      <summary>
            List of struct types (records, variants, interfaces) declared in this module
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.Module.Records">
      <summary>
            List of records declared in this module
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.Module.Types">
      <summary>
            List of all types declared in this module
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.Module.Services">
      <summary>
            List of services declared in this module
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.Module.WebServices">
      <summary>
            List of web services declared in this module
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.Module.Tables">
      <summary>
            List of tables declared in this module
            </summary>
    </member>
    <member name="T:Igor.Xsd.AST.Form">
      <summary>
            Base AST type for top-level declarations (forms) contained in modules: enums, records, services, etc.
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.Form.Module">
      <summary>
            AST of module in which this form is declared
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.Form.jsonEnabled">
      <summary>
            Is JSON serialization enabled (the value of json.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.Form.binaryEnabled">
      <summary>
            Is binary serialization enabled (the value of binary.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.Form.xmlEnabled">
      <summary>
            Is XML serialization enabled (the value of xml.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.Form.stringEnabled">
      <summary>
            Is string serialization enabled (the value of string.enabled attribute)
            </summary>
    </member>
    <member name="T:Igor.Xsd.AST.TypeForm">
      <summary>
            Base AST type for type declarations
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.TypeForm.Args">
      <summary>
            List of generic arguments (type variables)
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.TypeForm.Arity">
      <summary>
            Generic arity (number of type arguments)
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.TypeForm.IsGeneric">
      <summary>
            Is type generic
            </summary>
    </member>
    <member name="T:Igor.Xsd.AST.GenericArgument">
      <summary>
            Generic argument type variable
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.GenericArgument.Location">
      <summary>
            Location in Igor source file
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.GenericArgument.Name">
      <summary>
            Name of generic type variable
            </summary>
    </member>
    <member name="T:Igor.Xsd.AST.EnumField">
      <summary>
            Enum field declaration AST
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.EnumField.Value">
      <summary>
            Integer value of enum field
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.EnumField.Enum">
      <summary>
            Enum AST this field belongs to
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.EnumField.jsonFieldNotation">
      <summary>
            Notation used to translate Igor name to JSON string values (the value of json.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.EnumField.jsonKey">
      <summary>
            JSON serialization value for this enum field, translated using jsonFieldNotation or overriden by json.key attribute
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.EnumField.xmlEnumNotation">
      <summary>
            Notation used to translate Igor name to XML string values (the value of xml.enum_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.EnumField.xmlName">
      <summary>
            XML serialization value for this enum field, translated using xmlEnumNotation or overriden by xml.name attribute
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.EnumField.stringFieldNotation">
      <summary>
            Notation used to translate Igor name to string values (the value of string.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.EnumField.stringValue">
      <summary>
            String serialization value for this enum field, translated using xmlEnumNotation or overriden by string.value attribute
            </summary>
    </member>
    <member name="T:Igor.Xsd.AST.EnumForm">
      <summary>
            Enum type declaration AST
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.EnumForm.IntType">
      <summary>
            Base integer type. This is the minimum range integer type that includes all field values, or the value of int_type attribute.
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.EnumForm.Flags">
      <summary>
            Enum represents bit flags
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.EnumForm.jsonNumber">
      <summary>
            Serialize enum values to JSON as integer numbers
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.EnumForm.Fields">
      <summary>
            The list of enum fields
            </summary>
    </member>
    <member name="T:Igor.Xsd.AST.RecordField">
      <summary>
            Record, variant or interface field declaration AST
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.RecordField.Type">
      <summary>
            Type AST of this field
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.RecordField.DefaultValue">
      <summary>
            Default value of the field
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.RecordField.IsTag">
      <summary>
            Is the field a variant tag?
            When deserializing variants, tag field is deserialized first, to define which record it is.
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.RecordField.IsInherited">
      <summary>
            Is the field inherited from the ancestor variant?
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.RecordField.IsLocal">
      <summary>
            Is the field local (not inherited)?
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.RecordField.Struct">
      <summary>
            Struct (record, interface or variant) this field belongs to.
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.RecordField.binaryIgnore">
      <summary>
            Should this field be skipped during binary serialization (value of binary.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.RecordField.jsonFieldNotation">
      <summary>
            Notation used to translate Igor name to JSON string values (value of json.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.RecordField.jsonKey">
      <summary>
            JSON serialization object key for this field, translated using jsonFieldNotation or overriden by json.key attribute
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.RecordField.jsonIgnore">
      <summary>
            Should this field be skipped during JSON serialization (value of json.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.RecordField.xmlIgnore">
      <summary>
            Should this field be skipped during XML serialization (value of xml.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.RecordField.Default">
      <summary>
            Default value AST (or null if there's no default value)
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.RecordField.HasDefault">
      <summary>
            Does the field has default value?
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.RecordField.IsOptional">
      <summary>
            Is field optional?
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.RecordField.NonOptType">
      <summary>
            Returns non-optional type of this field
            </summary>
    </member>
    <member name="T:Igor.Xsd.AST.StructForm">
      <summary>
            Base AST type for struct declarations: records, variants and interfaces
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.StructForm.Fields">
      <summary>
            List of all fields (both local and inherited)
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.StructForm.Ancestor">
      <summary>
            Ancestor variant (or null if there's no ancestor)
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.StructForm.Interfaces">
      <summary>
            List of interfaces this struct implements
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.StructForm.TagField">
      <summary>
            Variant tag field (or null if there's no tag field)
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.StructForm.IsException">
      <summary>
            Is this struct an exception?
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.StructForm.jsonSerializedFields">
      <summary>
            List of fields included into JSON serialization
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.StructForm.jsonNulls">
      <summary>
            Whether generated JSON serializer should include nulls for optional fields.
            If this property is not set, serializer may prefer the most convenient or efficient implementation.
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.StructForm.binarySerializedFields">
      <summary>
            List of fields included into binary serialization
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.StructForm.xmlSerializedFields">
      <summary>
            List of fields included into XML serialization
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.StructForm.IsPatch">
      <summary>
            Is it a patch record (value of patch_record attribute)?
            </summary>
    </member>
    <member name="T:Igor.Xsd.AST.RecordForm">
      <summary>
            Record declaration AST
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.RecordForm.TagValue">
      <summary>
            Tag field value for this record
            </summary>
    </member>
    <member name="T:Igor.Xsd.AST.InterfaceForm">
      <summary>
            Interface declaration AST
            </summary>
    </member>
    <member name="T:Igor.Xsd.AST.VariantForm">
      <summary>
            Variant declaration AST
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.VariantForm.Descendants">
      <summary>
            List of direct descendants (both records and variants)
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.VariantForm.Records">
      <summary>
            List of all record descendants, both direct and indirect
            </summary>
    </member>
    <member name="T:Igor.Xsd.AST.UnionClause">
      <summary>
            Union clause declaration AST
            </summary>
    </member>
    <member name="T:Igor.Xsd.AST.UnionForm">
      <summary>
            Union type declaration AST
            </summary>
    </member>
    <member name="T:Igor.Xsd.AST.DefineForm">
      <summary>
            Alias (define) type declaration AST
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.DefineForm.Type">
      <summary>
            Alias target type. This define type is defined as an alias for that type.
            </summary>
    </member>
    <member name="T:Igor.Xsd.AST.FunctionArgument">
      <summary>
            Service function argument AST
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.FunctionArgument.Name">
      <summary>
            Argument name
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.FunctionArgument.Type">
      <summary>
            Argument type
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.FunctionArgument.Function">
      <summary>
            Function AST this argument belongs to
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.FunctionArgument.Index">
      <summary>
            Zero-based index of this argument
            </summary>
    </member>
    <member name="T:Igor.Xsd.AST.FunctionThrow">
      <summary>
            AST of reference to exception thrown by service functions
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.FunctionThrow.Exception">
      <summary>
            Thrown exception AST exception record
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.FunctionThrow.Id">
      <summary>
            Unique integer ID for serialization
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.FunctionThrow.Function">
      <summary>
            Function AST
            </summary>
    </member>
    <member name="T:Igor.Xsd.AST.ServiceFunction">
      <summary>
            Service function declaration AST
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.ServiceFunction.Direction">
      <summary>
            Function direction (c-&gt;s or s-&gt;c)
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.ServiceFunction.Arguments">
      <summary>
            List of function arguments
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.ServiceFunction.ReturnArguments">
      <summary>
            List of returned result arguments. Null if function is not an RPC.
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.ServiceFunction.Throws">
      <summary>
            List of thrown exception references
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.ServiceFunction.Index">
      <summary>
            Function index in the service
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.ServiceFunction.Service">
      <summary>
            Service AST this function belongs to
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.ServiceFunction.IsRpc">
      <summary>
            Is function an RPC?
            </summary>
    </member>
    <member name="T:Igor.Xsd.AST.ServiceForm">
      <summary>
            Service declaration AST
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.ServiceForm.Functions">
      <summary>
            List of functions
            </summary>
    </member>
    <member name="T:Igor.Xsd.AST.WebServiceForm">
      <summary>
            Web service declaration AST
            </summary>
    </member>
    <member name="T:Igor.Xsd.AST.WebResource">
      <summary>
            Web resource declaration AST
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.WebResource.WebService">
      <summary>
            Web service AST where this resource is defined
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.WebResource.Path">
      <summary>
            List of URL path segments
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.WebResource.Query">
      <summary>
            List of URL query parameters
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.WebResource.Method">
      <summary>
            HTTP method
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.WebResource.Responses">
      <summary>
            List of possible responses
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.WebResource.RequestHeaders">
      <summary>
            List of request headers
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.WebResource.RequestContent">
      <summary>
            Request content AST, if available. Can be null if request has no body.
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.WebResource.RequestBodyType">
      <summary>
            Request body type AST. Can be null if request has no body.
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.WebContent.Type">
      <summary>
            Content Type
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.WebContent.Format">
      <summary>
            Data format of the content type
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.WebContent.Resource">
      <summary>
            Resource this content belongs to
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.WebContent.Var">
      <summary>
            Content variable. May be null, if only type was provided
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.WebContent.Annotation">
      <summary>
            Annotation string (if present in Igor source file) or null (if not present)
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.WebHeader.Name">
      <summary>
            Header name.
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.WebHeader.StaticValue">
      <summary>
            Static header value. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.WebHeader.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.WebHeader.IsStatic">
      <summary>
            True if header has a static value.
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.WebPathSegment.StaticValue">
      <summary>
            Static string segment. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.WebPathSegment.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.WebPathSegment.IsStatic">
      <summary>
            True if this segment is a static segment.
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.WebQueryParameter.StaticValue">
      <summary>
            Static query parameter value. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.WebQueryParameter.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.WebQueryParameter.IsStatic">
      <summary>
            True if query parameter has a static value.
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.WebQueryParameter.Format">
      <summary>
            Data format for query variable
            </summary>
    </member>
    <member name="T:Igor.Xsd.AST.GenericType">
      <summary>
            Generic type instance AST
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.GenericType.Prototype">
      <summary>
            Generic type prototype declaration AST
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.GenericType.Args">
      <summary>
            Generic type arguments
            </summary>
    </member>
    <member name="T:Igor.Xsd.AST.GenericInterface">
      <summary>
            Generic interface instance AST
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.GenericInterface.Prototype">
      <summary>
            Generic interface prototype declaration AST
            </summary>
    </member>
    <member name="P:Igor.Xsd.AST.GenericInterface.Args">
      <summary>
            Generic type arguments
            </summary>
    </member>
    <member name="T:Igor.Xsd.AST.BuiltInType">
      <summary>
            Igor built-in type instances
            </summary>
    </member>
    <member name="T:Igor.Xsd.AST.BuiltInType.Bool">
      <summary>
            Built-in Igor bool type instance
            </summary>
    </member>
    <member name="T:Igor.Xsd.AST.BuiltInType.Integer">
      <summary>
            Built-in Igor integer type instance
            </summary>
    </member>
    <member name="T:Igor.Xsd.AST.BuiltInType.Float">
      <summary>
            Built-in Igor float type instance
            </summary>
    </member>
    <member name="T:Igor.Xsd.AST.BuiltInType.String">
      <summary>
            Built-in Igor string type instance
            </summary>
    </member>
    <member name="T:Igor.Xsd.AST.BuiltInType.Binary">
      <summary>
            Built-in Igor binary type instance
            </summary>
    </member>
    <member name="T:Igor.Xsd.AST.BuiltInType.Atom">
      <summary>
            Built-in Igor atom type instance
            </summary>
    </member>
    <member name="T:Igor.Xsd.AST.BuiltInType.Json">
      <summary>
            Built-in Igor json type instance
            </summary>
    </member>
    <member name="T:Igor.Xsd.AST.BuiltInType.List">
      <summary>
            Built-in Igor list type instance
            </summary>
    </member>
    <member name="T:Igor.Xsd.AST.BuiltInType.Dict">
      <summary>
            Built-in Igor dict type instance
            </summary>
    </member>
    <member name="T:Igor.Xsd.AST.BuiltInType.Optional">
      <summary>
            Built-in Igor optional type instance (?T)
            </summary>
    </member>
    <member name="T:Igor.Xsd.AST.BuiltInType.Flags">
      <summary>
            Built-in Igor flags type instance
            </summary>
    </member>
    <member name="T:Igor.Xsd.AST.BuiltInType.OneOf">
      <summary>
            Built-in Igor oneof type instance
            </summary>
    </member>
    <member name="T:Igor.Xsd.AST.AstMapper">
      <summary>
            Maps Igor.Declarations namespace classes to AST namespace classes.
            </summary>
    </member>
    <member name="M:Igor.Xsd.AST.AstMapper.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Igor.Xsd.AST.AstMapper.Map(System.Collections.Generic.IReadOnlyList{Igor.Declarations.Module})">
      <summary>
            Maps Igor.Declarations namespace classes to AST namespace classes.
            </summary>
      <param name="modules">Module declarations parse tree</param>
      <returns>Modules AST</returns>
    </member>
    <member name="T:Igor.Sql.AST.IType">
      <summary>
            AST type marker interface
            </summary>
    </member>
    <member name="T:Igor.Sql.AST.IInterface">
      <summary>
            AST interface marker interface
            </summary>
    </member>
    <member name="T:Igor.Sql.AST.Statement">
      <summary>
            Base type for named AST declaration.
            Statements can host Igor attributes.
            </summary>
    </member>
    <member name="M:Igor.Sql.AST.Statement.ToString">
      <summary>
            String representation of this AST, for debug purposes
            </summary>
      <returns>String representation of this AST</returns>
    </member>
    <member name="M:Igor.Sql.AST.Statement.Error(System.String)">
      <summary>
            Report an error related to this statement declaration.
            </summary>
      <param name="message">Error description</param>
    </member>
    <member name="M:Igor.Sql.AST.Statement.Warning(System.String)">
      <summary>
            Report a warning related to this statement declaration.
            </summary>
      <param name="message">Warning description</param>
    </member>
    <member name="M:Igor.Sql.AST.Statement.Hint(System.String)">
      <summary>
            Report a hint related to this statement declaration.
            </summary>
      <param name="message">Hint description</param>
    </member>
    <member name="M:Igor.Sql.AST.Statement.Attribute``1(Igor.AttributeDescriptor{``0},``0)">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or default value if value is unset in Igor source or environment)
            </summary>
      <typeparam name="T">Attribute value type argument</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <param name="defaultValue">Default value</param>
      <returns>Attribute value or default</returns>
    </member>
    <member name="M:Igor.Sql.AST.Statement.Attribute``1(Igor.StructAttributeDescriptor{``0})">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or null if value is unset in Igor source or environment).
            This is a function overload for value/struct types: numbers, bools and enums.
            </summary>
      <typeparam name="T">Attribute value type argument (must be value/struct type)</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>Nullable attribute value (null if value is not found)</returns>
    </member>
    <member name="M:Igor.Sql.AST.Statement.Attribute``1(Igor.ClassAttributeDescriptor{``0})">
      <summary>
            Get a single attribute value set for this AST statement or inherited using inheritance type defined by attribute descriptor
            (or null if value is unset in Igor source or environment).
            This is a function overload for reference/class types: strings and objects.
            </summary>
      <typeparam name="T">Attribute value type argument (must be reference/class type)</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>Attribute value (null if value is not found)</returns>
    </member>
    <member name="M:Igor.Sql.AST.Statement.ListAttribute``1(Igor.AttributeDescriptor{``0})">
      <summary>
            Get a list of all attribute values set for this AST statement or inherited using inheritance type defined by attribute descriptor.
            Empty list is returned if no values are found.
            </summary>
      <typeparam name="T">Attribute value type argument</typeparam>
      <param name="attribute">Attribute descriptor</param>
      <returns>List of found attribute values</returns>
    </member>
    <member name="P:Igor.Sql.AST.Statement.NestedHosts">
      <summary>
            List of nested declarations
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.Statement.Location">
      <summary>
            Declaration location in Igor source file
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.Statement.Attributes">
      <summary>
            The attribute collection. Obsolete and will be removed in future releases.
            Use Attribute or ListAttribute functions instead.
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.Statement.Name">
      <summary>
            Name of the entity defined by this declaration
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.Statement.Annotation">
      <summary>
            Annotation string (if present in Igor source file) or null (if not present)
            </summary>
    </member>
    <member name="T:Igor.Sql.AST.Module">
      <summary>
            Module AST
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.Module.Definitions">
      <summary>
            List of top-level definitions (forms)
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.Module.Enums">
      <summary>
            List of enum types declared in this module
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.Module.Structs">
      <summary>
            List of struct types (records, variants, interfaces) declared in this module
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.Module.Records">
      <summary>
            List of records declared in this module
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.Module.Types">
      <summary>
            List of all types declared in this module
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.Module.Services">
      <summary>
            List of services declared in this module
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.Module.WebServices">
      <summary>
            List of web services declared in this module
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.Module.Tables">
      <summary>
            List of tables declared in this module
            </summary>
    </member>
    <member name="T:Igor.Sql.AST.Form">
      <summary>
            Base AST type for top-level declarations (forms) contained in modules: enums, records, services, etc.
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.Form.Module">
      <summary>
            AST of module in which this form is declared
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.Form.jsonEnabled">
      <summary>
            Is JSON serialization enabled (the value of json.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.Form.binaryEnabled">
      <summary>
            Is binary serialization enabled (the value of binary.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.Form.xmlEnabled">
      <summary>
            Is XML serialization enabled (the value of xml.enabled attribute)
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.Form.stringEnabled">
      <summary>
            Is string serialization enabled (the value of string.enabled attribute)
            </summary>
    </member>
    <member name="T:Igor.Sql.AST.TypeForm">
      <summary>
            Base AST type for type declarations
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.TypeForm.Args">
      <summary>
            List of generic arguments (type variables)
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.TypeForm.Arity">
      <summary>
            Generic arity (number of type arguments)
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.TypeForm.IsGeneric">
      <summary>
            Is type generic
            </summary>
    </member>
    <member name="T:Igor.Sql.AST.GenericArgument">
      <summary>
            Generic argument type variable
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.GenericArgument.Location">
      <summary>
            Location in Igor source file
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.GenericArgument.Name">
      <summary>
            Name of generic type variable
            </summary>
    </member>
    <member name="T:Igor.Sql.AST.EnumField">
      <summary>
            Enum field declaration AST
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.EnumField.Value">
      <summary>
            Integer value of enum field
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.EnumField.Enum">
      <summary>
            Enum AST this field belongs to
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.EnumField.jsonFieldNotation">
      <summary>
            Notation used to translate Igor name to JSON string values (the value of json.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.EnumField.jsonKey">
      <summary>
            JSON serialization value for this enum field, translated using jsonFieldNotation or overriden by json.key attribute
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.EnumField.xmlEnumNotation">
      <summary>
            Notation used to translate Igor name to XML string values (the value of xml.enum_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.EnumField.xmlName">
      <summary>
            XML serialization value for this enum field, translated using xmlEnumNotation or overriden by xml.name attribute
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.EnumField.stringFieldNotation">
      <summary>
            Notation used to translate Igor name to string values (the value of string.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.EnumField.stringValue">
      <summary>
            String serialization value for this enum field, translated using xmlEnumNotation or overriden by string.value attribute
            </summary>
    </member>
    <member name="T:Igor.Sql.AST.EnumForm">
      <summary>
            Enum type declaration AST
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.EnumForm.IntType">
      <summary>
            Base integer type. This is the minimum range integer type that includes all field values, or the value of int_type attribute.
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.EnumForm.Flags">
      <summary>
            Enum represents bit flags
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.EnumForm.jsonNumber">
      <summary>
            Serialize enum values to JSON as integer numbers
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.EnumForm.Fields">
      <summary>
            The list of enum fields
            </summary>
    </member>
    <member name="T:Igor.Sql.AST.RecordField">
      <summary>
            Record, variant or interface field declaration AST
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.RecordField.Type">
      <summary>
            Type AST of this field
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.RecordField.DefaultValue">
      <summary>
            Default value of the field
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.RecordField.IsTag">
      <summary>
            Is the field a variant tag?
            When deserializing variants, tag field is deserialized first, to define which record it is.
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.RecordField.IsInherited">
      <summary>
            Is the field inherited from the ancestor variant?
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.RecordField.IsLocal">
      <summary>
            Is the field local (not inherited)?
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.RecordField.Struct">
      <summary>
            Struct (record, interface or variant) this field belongs to.
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.RecordField.binaryIgnore">
      <summary>
            Should this field be skipped during binary serialization (value of binary.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.RecordField.jsonFieldNotation">
      <summary>
            Notation used to translate Igor name to JSON string values (value of json.field_notation attribute)
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.RecordField.jsonKey">
      <summary>
            JSON serialization object key for this field, translated using jsonFieldNotation or overriden by json.key attribute
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.RecordField.jsonIgnore">
      <summary>
            Should this field be skipped during JSON serialization (value of json.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.RecordField.xmlIgnore">
      <summary>
            Should this field be skipped during XML serialization (value of xml.ignore attribute)
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.RecordField.Default">
      <summary>
            Default value AST (or null if there's no default value)
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.RecordField.HasDefault">
      <summary>
            Does the field has default value?
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.RecordField.IsOptional">
      <summary>
            Is field optional?
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.RecordField.NonOptType">
      <summary>
            Returns non-optional type of this field
            </summary>
    </member>
    <member name="T:Igor.Sql.AST.StructForm">
      <summary>
            Base AST type for struct declarations: records, variants and interfaces
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.StructForm.Fields">
      <summary>
            List of all fields (both local and inherited)
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.StructForm.Ancestor">
      <summary>
            Ancestor variant (or null if there's no ancestor)
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.StructForm.Interfaces">
      <summary>
            List of interfaces this struct implements
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.StructForm.TagField">
      <summary>
            Variant tag field (or null if there's no tag field)
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.StructForm.IsException">
      <summary>
            Is this struct an exception?
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.StructForm.jsonSerializedFields">
      <summary>
            List of fields included into JSON serialization
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.StructForm.jsonNulls">
      <summary>
            Whether generated JSON serializer should include nulls for optional fields.
            If this property is not set, serializer may prefer the most convenient or efficient implementation.
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.StructForm.binarySerializedFields">
      <summary>
            List of fields included into binary serialization
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.StructForm.xmlSerializedFields">
      <summary>
            List of fields included into XML serialization
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.StructForm.IsPatch">
      <summary>
            Is it a patch record (value of patch_record attribute)?
            </summary>
    </member>
    <member name="T:Igor.Sql.AST.RecordForm">
      <summary>
            Record declaration AST
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.RecordForm.TagValue">
      <summary>
            Tag field value for this record
            </summary>
    </member>
    <member name="T:Igor.Sql.AST.InterfaceForm">
      <summary>
            Interface declaration AST
            </summary>
    </member>
    <member name="T:Igor.Sql.AST.VariantForm">
      <summary>
            Variant declaration AST
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.VariantForm.Descendants">
      <summary>
            List of direct descendants (both records and variants)
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.VariantForm.Records">
      <summary>
            List of all record descendants, both direct and indirect
            </summary>
    </member>
    <member name="T:Igor.Sql.AST.UnionClause">
      <summary>
            Union clause declaration AST
            </summary>
    </member>
    <member name="T:Igor.Sql.AST.UnionForm">
      <summary>
            Union type declaration AST
            </summary>
    </member>
    <member name="T:Igor.Sql.AST.DefineForm">
      <summary>
            Alias (define) type declaration AST
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.DefineForm.Type">
      <summary>
            Alias target type. This define type is defined as an alias for that type.
            </summary>
    </member>
    <member name="T:Igor.Sql.AST.FunctionArgument">
      <summary>
            Service function argument AST
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.FunctionArgument.Name">
      <summary>
            Argument name
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.FunctionArgument.Type">
      <summary>
            Argument type
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.FunctionArgument.Function">
      <summary>
            Function AST this argument belongs to
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.FunctionArgument.Index">
      <summary>
            Zero-based index of this argument
            </summary>
    </member>
    <member name="T:Igor.Sql.AST.FunctionThrow">
      <summary>
            AST of reference to exception thrown by service functions
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.FunctionThrow.Exception">
      <summary>
            Thrown exception AST exception record
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.FunctionThrow.Id">
      <summary>
            Unique integer ID for serialization
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.FunctionThrow.Function">
      <summary>
            Function AST
            </summary>
    </member>
    <member name="T:Igor.Sql.AST.ServiceFunction">
      <summary>
            Service function declaration AST
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.ServiceFunction.Direction">
      <summary>
            Function direction (c-&gt;s or s-&gt;c)
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.ServiceFunction.Arguments">
      <summary>
            List of function arguments
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.ServiceFunction.ReturnArguments">
      <summary>
            List of returned result arguments. Null if function is not an RPC.
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.ServiceFunction.Throws">
      <summary>
            List of thrown exception references
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.ServiceFunction.Index">
      <summary>
            Function index in the service
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.ServiceFunction.Service">
      <summary>
            Service AST this function belongs to
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.ServiceFunction.IsRpc">
      <summary>
            Is function an RPC?
            </summary>
    </member>
    <member name="T:Igor.Sql.AST.ServiceForm">
      <summary>
            Service declaration AST
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.ServiceForm.Functions">
      <summary>
            List of functions
            </summary>
    </member>
    <member name="T:Igor.Sql.AST.WebServiceForm">
      <summary>
            Web service declaration AST
            </summary>
    </member>
    <member name="T:Igor.Sql.AST.WebResource">
      <summary>
            Web resource declaration AST
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.WebResource.WebService">
      <summary>
            Web service AST where this resource is defined
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.WebResource.Path">
      <summary>
            List of URL path segments
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.WebResource.Query">
      <summary>
            List of URL query parameters
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.WebResource.Method">
      <summary>
            HTTP method
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.WebResource.Responses">
      <summary>
            List of possible responses
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.WebResource.RequestHeaders">
      <summary>
            List of request headers
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.WebResource.RequestContent">
      <summary>
            Request content AST, if available. Can be null if request has no body.
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.WebResource.RequestBodyType">
      <summary>
            Request body type AST. Can be null if request has no body.
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.WebContent.Type">
      <summary>
            Content Type
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.WebContent.Format">
      <summary>
            Data format of the content type
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.WebContent.Resource">
      <summary>
            Resource this content belongs to
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.WebContent.Var">
      <summary>
            Content variable. May be null, if only type was provided
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.WebContent.Annotation">
      <summary>
            Annotation string (if present in Igor source file) or null (if not present)
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.WebHeader.Name">
      <summary>
            Header name.
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.WebHeader.StaticValue">
      <summary>
            Static header value. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.WebHeader.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.WebHeader.IsStatic">
      <summary>
            True if header has a static value.
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.WebPathSegment.StaticValue">
      <summary>
            Static string segment. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.WebPathSegment.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.WebPathSegment.IsStatic">
      <summary>
            True if this segment is a static segment.
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.WebQueryParameter.StaticValue">
      <summary>
            Static query parameter value. 
            Either this value or <cref>Var</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.WebQueryParameter.Var">
      <summary>
            Path variable.
            Either this value or <cref>StaticValue</cref> is always present.
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.WebQueryParameter.IsStatic">
      <summary>
            True if query parameter has a static value.
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.WebQueryParameter.Format">
      <summary>
            Data format for query variable
            </summary>
    </member>
    <member name="T:Igor.Sql.AST.GenericType">
      <summary>
            Generic type instance AST
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.GenericType.Prototype">
      <summary>
            Generic type prototype declaration AST
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.GenericType.Args">
      <summary>
            Generic type arguments
            </summary>
    </member>
    <member name="T:Igor.Sql.AST.GenericInterface">
      <summary>
            Generic interface instance AST
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.GenericInterface.Prototype">
      <summary>
            Generic interface prototype declaration AST
            </summary>
    </member>
    <member name="P:Igor.Sql.AST.GenericInterface.Args">
      <summary>
            Generic type arguments
            </summary>
    </member>
    <member name="T:Igor.Sql.AST.BuiltInType">
      <summary>
            Igor built-in type instances
            </summary>
    </member>
    <member name="T:Igor.Sql.AST.BuiltInType.Bool">
      <summary>
            Built-in Igor bool type instance
            </summary>
    </member>
    <member name="T:Igor.Sql.AST.BuiltInType.Integer">
      <summary>
            Built-in Igor integer type instance
            </summary>
    </member>
    <member name="T:Igor.Sql.AST.BuiltInType.Float">
      <summary>
            Built-in Igor float type instance
            </summary>
    </member>
    <member name="T:Igor.Sql.AST.BuiltInType.String">
      <summary>
            Built-in Igor string type instance
            </summary>
    </member>
    <member name="T:Igor.Sql.AST.BuiltInType.Binary">
      <summary>
            Built-in Igor binary type instance
            </summary>
    </member>
    <member name="T:Igor.Sql.AST.BuiltInType.Atom">
      <summary>
            Built-in Igor atom type instance
            </summary>
    </member>
    <member name="T:Igor.Sql.AST.BuiltInType.Json">
      <summary>
            Built-in Igor json type instance
            </summary>
    </member>
    <member name="T:Igor.Sql.AST.BuiltInType.List">
      <summary>
            Built-in Igor list type instance
            </summary>
    </member>
    <member name="T:Igor.Sql.AST.BuiltInType.Dict">
      <summary>
            Built-in Igor dict type instance
            </summary>
    </member>
    <member name="T:Igor.Sql.AST.BuiltInType.Optional">
      <summary>
            Built-in Igor optional type instance (?T)
            </summary>
    </member>
    <member name="T:Igor.Sql.AST.BuiltInType.Flags">
      <summary>
            Built-in Igor flags type instance
            </summary>
    </member>
    <member name="T:Igor.Sql.AST.BuiltInType.OneOf">
      <summary>
            Built-in Igor oneof type instance
            </summary>
    </member>
    <member name="T:Igor.Sql.AST.AstMapper">
      <summary>
            Maps Igor.Declarations namespace classes to AST namespace classes.
            </summary>
    </member>
    <member name="M:Igor.Sql.AST.AstMapper.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Igor.Sql.AST.AstMapper.Map(System.Collections.Generic.IReadOnlyList{Igor.Declarations.Module})">
      <summary>
            Maps Igor.Declarations namespace classes to AST namespace classes.
            </summary>
      <param name="modules">Module declarations parse tree</param>
      <returns>Modules AST</returns>
    </member>
  </members>
</doc>